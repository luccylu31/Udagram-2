{"ast":null,"code":"import _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as config } from './ionic-global.js';\nimport { writeTask, Build } from '@stencil/core/internal/client';\nimport { p as printIonWarning } from './index6.js';\nimport { r as raf } from './helpers.js';\nvar LIFECYCLE_WILL_ENTER = 'ionViewWillEnter';\nvar LIFECYCLE_DID_ENTER = 'ionViewDidEnter';\nvar LIFECYCLE_WILL_LEAVE = 'ionViewWillLeave';\nvar LIFECYCLE_DID_LEAVE = 'ionViewDidLeave';\nvar LIFECYCLE_WILL_UNLOAD = 'ionViewWillUnload';\n/**\n * Moves focus to a specified element. Note that we do not remove the tabindex\n * because that can result in an unintentional blur. Non-focusables can't be\n * focused, so the body will get focused again.\n */\n\nvar moveFocus = function moveFocus(el) {\n  el.tabIndex = -1;\n  el.focus();\n};\n/**\n * Elements that are hidden using `display: none` should not be focused even if\n * they are present in the DOM.\n */\n\n\nvar isVisible = function isVisible(el) {\n  return el.offsetParent !== null;\n};\n/**\n * The focus controller allows us to manage focus within a view so assistive\n * technologies can inform users of changes to the navigation state. Traditional\n * native apps have a way of informing assistive technology about a navigation\n * state change. Mobile browsers have this too, but only when doing a full page\n * load. In a single page app we do not do that, so we need to build this\n * integration ourselves.\n */\n\n\nvar createFocusController = function createFocusController() {\n  var saveViewFocus = function saveViewFocus(referenceEl) {\n    var focusManagerEnabled = config.get('focusManagerPriority', false);\n    /**\n     * When going back to a previously visited page focus should typically be moved\n     * back to the element that was last focused when the user was on this view.\n     */\n\n    if (focusManagerEnabled) {\n      var activeEl = document.activeElement;\n\n      if (activeEl !== null && (referenceEl === null || referenceEl === void 0 ? void 0 : referenceEl.contains(activeEl))) {\n        activeEl.setAttribute(LAST_FOCUS, 'true');\n      }\n    }\n  };\n\n  var setViewFocus = function setViewFocus(referenceEl) {\n    var focusManagerPriorities = config.get('focusManagerPriority', false);\n    /**\n     * If the focused element is a descendant of the referenceEl then it's possible\n     * that the app developer manually moved focus, so we do not want to override that.\n     * This can happen with inputs the are focused when a view transitions in.\n     */\n\n    if (Array.isArray(focusManagerPriorities) && !referenceEl.contains(document.activeElement)) {\n      /**\n       * When going back to a previously visited view focus should always be moved back\n       * to the element that the user was last focused on when they were on this view.\n       */\n      var lastFocus = referenceEl.querySelector(\"[\".concat(LAST_FOCUS, \"]\"));\n\n      if (lastFocus && isVisible(lastFocus)) {\n        moveFocus(lastFocus);\n        return;\n      }\n\n      var _iterator = _createForOfIteratorHelper(focusManagerPriorities),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var priority = _step.value;\n\n          /**\n           * For each recognized case (excluding the default case) make sure to return\n           * so that the fallback focus behavior does not run.\n           *\n           * We intentionally query for specific roles/semantic elements so that the\n           * transition manager can work with both Ionic and non-Ionic UI components.\n           *\n           * If new selectors are added, be sure to remove the outline ring by adding\n           * new selectors to rule in core.scss.\n           */\n          switch (priority) {\n            case 'content':\n              var content = referenceEl.querySelector('main, [role=\"main\"]');\n\n              if (content && isVisible(content)) {\n                moveFocus(content);\n                return;\n              }\n\n              break;\n\n            case 'heading':\n              var headingOne = referenceEl.querySelector('h1, [role=\"heading\"][aria-level=\"1\"]');\n\n              if (headingOne && isVisible(headingOne)) {\n                moveFocus(headingOne);\n                return;\n              }\n\n              break;\n\n            case 'banner':\n              var header = referenceEl.querySelector('header, [role=\"banner\"]');\n\n              if (header && isVisible(header)) {\n                moveFocus(header);\n                return;\n              }\n\n              break;\n\n            default:\n              printIonWarning(\"Unrecognized focus manager priority value \".concat(priority));\n              break;\n          }\n        }\n        /**\n         * If there is nothing to focus then focus the page so focus at least moves to\n         * the correct view. The browser will then determine where within the page to\n         * move focus to.\n         */\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      moveFocus(referenceEl);\n    }\n  };\n\n  return {\n    saveViewFocus: saveViewFocus,\n    setViewFocus: setViewFocus\n  };\n};\n\nvar LAST_FOCUS = 'ion-last-focus';\n\nvar iosTransitionAnimation = function iosTransitionAnimation() {\n  return import('./ios.transition.js');\n};\n\nvar mdTransitionAnimation = function mdTransitionAnimation() {\n  return import('./md.transition.js');\n};\n\nvar focusController = createFocusController(); // TODO(FW-2832): types\n\nvar transition = function transition(opts) {\n  return new Promise(function (resolve, reject) {\n    writeTask(function () {\n      beforeTransition(opts);\n      runTransition(opts).then(function (result) {\n        if (result.animation) {\n          result.animation.destroy();\n        }\n\n        afterTransition(opts);\n        resolve(result);\n      }, function (error) {\n        afterTransition(opts);\n        reject(error);\n      });\n    });\n  });\n};\n\nvar beforeTransition = function beforeTransition(opts) {\n  var enteringEl = opts.enteringEl;\n  var leavingEl = opts.leavingEl;\n  focusController.saveViewFocus(leavingEl);\n  setZIndex(enteringEl, leavingEl, opts.direction);\n\n  if (opts.showGoBack) {\n    enteringEl.classList.add('can-go-back');\n  } else {\n    enteringEl.classList.remove('can-go-back');\n  }\n\n  setPageHidden(enteringEl, false);\n  /**\n   * When transitioning, the page should not\n   * respond to click events. This resolves small\n   * issues like users double tapping the ion-back-button.\n   * These pointer events are removed in `afterTransition`.\n   */\n\n  enteringEl.style.setProperty('pointer-events', 'none');\n\n  if (leavingEl) {\n    setPageHidden(leavingEl, false);\n    leavingEl.style.setProperty('pointer-events', 'none');\n  }\n};\n\nvar runTransition = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {\n    var animationBuilder, ani;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getAnimationBuilder(opts);\n\n        case 2:\n          animationBuilder = _context.sent;\n          ani = animationBuilder && Build.isBrowser ? animation(animationBuilder, opts) : noAnimation(opts); // fast path for no animation\n\n          return _context.abrupt(\"return\", ani);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function runTransition(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar afterTransition = function afterTransition(opts) {\n  var enteringEl = opts.enteringEl;\n  var leavingEl = opts.leavingEl;\n  enteringEl.classList.remove('ion-page-invisible');\n  enteringEl.style.removeProperty('pointer-events');\n\n  if (leavingEl !== undefined) {\n    leavingEl.classList.remove('ion-page-invisible');\n    leavingEl.style.removeProperty('pointer-events');\n  }\n\n  focusController.setViewFocus(enteringEl);\n};\n\nvar getAnimationBuilder = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opts) {\n    var getAnimation;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(!opts.leavingEl || !opts.animated || opts.duration === 0)) {\n            _context2.next = 2;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 2:\n          if (!opts.animationBuilder) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", opts.animationBuilder);\n\n        case 4:\n          if (!(opts.mode === 'ios')) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 7;\n          return iosTransitionAnimation();\n\n        case 7:\n          _context2.t0 = _context2.sent.iosTransitionAnimation;\n          _context2.next = 13;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return mdTransitionAnimation();\n\n        case 12:\n          _context2.t0 = _context2.sent.mdTransitionAnimation;\n\n        case 13:\n          getAnimation = _context2.t0;\n          return _context2.abrupt(\"return\", getAnimation);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n\n  return function getAnimationBuilder(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar animation = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(animationBuilder, opts) {\n    var trans, didComplete;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return waitForReady(opts, true);\n\n        case 2:\n          trans = animationBuilder(opts.baseEl, opts);\n          fireWillEvents(opts.enteringEl, opts.leavingEl);\n          _context3.next = 6;\n          return playTransition(trans, opts);\n\n        case 6:\n          didComplete = _context3.sent;\n\n          if (opts.progressCallback) {\n            opts.progressCallback(undefined);\n          }\n\n          if (didComplete) {\n            fireDidEvents(opts.enteringEl, opts.leavingEl);\n          }\n\n          return _context3.abrupt(\"return\", {\n            hasCompleted: didComplete,\n            animation: trans\n          });\n\n        case 10:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n\n  return function animation(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar noAnimation = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(opts) {\n    var enteringEl, leavingEl, focusManagerEnabled;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          enteringEl = opts.enteringEl;\n          leavingEl = opts.leavingEl;\n          focusManagerEnabled = config.get('focusManagerPriority', false);\n          /**\n           * If the focus manager is enabled then we need to wait for Ionic components to be\n           * rendered otherwise the component to focus may not be focused because it is hidden.\n           */\n\n          _context4.next = 5;\n          return waitForReady(opts, focusManagerEnabled);\n\n        case 5:\n          fireWillEvents(enteringEl, leavingEl);\n          fireDidEvents(enteringEl, leavingEl);\n          return _context4.abrupt(\"return\", {\n            hasCompleted: true\n          });\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n\n  return function noAnimation(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar waitForReady = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(opts, defaultDeep) {\n    var deep;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          deep = opts.deepWait !== undefined ? opts.deepWait : defaultDeep;\n\n          if (!deep) {\n            _context5.next = 4;\n            break;\n          }\n\n          _context5.next = 4;\n          return Promise.all([deepReady(opts.enteringEl), deepReady(opts.leavingEl)]);\n\n        case 4:\n          _context5.next = 6;\n          return notifyViewReady(opts.viewIsReady, opts.enteringEl);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n\n  return function waitForReady(_x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar notifyViewReady = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(viewIsReady, enteringEl) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!viewIsReady) {\n            _context6.next = 3;\n            break;\n          }\n\n          _context6.next = 3;\n          return viewIsReady(enteringEl);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n\n  return function notifyViewReady(_x8, _x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar playTransition = function playTransition(trans, opts) {\n  var progressCallback = opts.progressCallback;\n  var promise = new Promise(function (resolve) {\n    trans.onFinish(function (currentStep) {\n      return resolve(currentStep === 1);\n    });\n  }); // cool, let's do this, start the transition\n\n  if (progressCallback) {\n    // this is a swipe to go back, just get the transition progress ready\n    // kick off the swipe animation start\n    trans.progressStart(true);\n    progressCallback(trans);\n  } else {\n    // only the top level transition should actually start \"play\"\n    // kick it off and let it play through\n    // ******** DOM WRITE ****************\n    trans.play();\n  } // create a callback for when the animation is done\n\n\n  return promise;\n};\n\nvar fireWillEvents = function fireWillEvents(enteringEl, leavingEl) {\n  lifecycle(leavingEl, LIFECYCLE_WILL_LEAVE);\n  lifecycle(enteringEl, LIFECYCLE_WILL_ENTER);\n};\n\nvar fireDidEvents = function fireDidEvents(enteringEl, leavingEl) {\n  lifecycle(enteringEl, LIFECYCLE_DID_ENTER);\n  lifecycle(leavingEl, LIFECYCLE_DID_LEAVE);\n};\n\nvar lifecycle = function lifecycle(el, eventName) {\n  if (el) {\n    var ev = new CustomEvent(eventName, {\n      bubbles: false,\n      cancelable: false\n    });\n    el.dispatchEvent(ev);\n  }\n};\n/**\n * Wait two request animation frame loops.\n * This allows the framework implementations enough time to mount\n * the user-defined contents. This is often needed when using inline\n * modals and popovers that accept user components. For popover,\n * the contents must be mounted for the popover to be sized correctly.\n * For modals, the contents must be mounted for iOS to run the\n * transition correctly.\n *\n * On Angular and React, a single raf is enough time, but for Vue\n * we need to wait two rafs. As a result we are using two rafs for\n * all frameworks to ensure contents are mounted.\n */\n\n\nvar waitForMount = function waitForMount() {\n  return new Promise(function (resolve) {\n    return raf(function () {\n      return raf(function () {\n        return resolve();\n      });\n    });\n  });\n};\n\nvar deepReady = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(el) {\n    var element, stencilEl, waitForCustomElement;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          element = el;\n\n          if (!element) {\n            _context7.next = 17;\n            break;\n          }\n\n          if (!(element.componentOnReady != null)) {\n            _context7.next = 10;\n            break;\n          }\n\n          _context7.next = 5;\n          return element.componentOnReady();\n\n        case 5:\n          stencilEl = _context7.sent;\n\n          if (!(stencilEl != null)) {\n            _context7.next = 8;\n            break;\n          }\n\n          return _context7.abrupt(\"return\");\n\n        case 8:\n          _context7.next = 15;\n          break;\n\n        case 10:\n          if (!(element.__registerHost != null)) {\n            _context7.next = 15;\n            break;\n          }\n\n          /**\n           * Non-lazy loaded custom elements need to wait\n           * one frame for component to be loaded.\n           */\n          waitForCustomElement = new Promise(function (resolve) {\n            return raf(resolve);\n          });\n          _context7.next = 14;\n          return waitForCustomElement;\n\n        case 14:\n          return _context7.abrupt(\"return\");\n\n        case 15:\n          _context7.next = 17;\n          return Promise.all(Array.from(element.children).map(deepReady));\n\n        case 17:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n\n  return function deepReady(_x10) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar setPageHidden = function setPageHidden(el, hidden) {\n  if (hidden) {\n    el.setAttribute('aria-hidden', 'true');\n    el.classList.add('ion-page-hidden');\n  } else {\n    el.hidden = false;\n    el.removeAttribute('aria-hidden');\n    el.classList.remove('ion-page-hidden');\n  }\n};\n\nvar setZIndex = function setZIndex(enteringEl, leavingEl, direction) {\n  if (enteringEl !== undefined) {\n    enteringEl.style.zIndex = direction === 'back' ? '99' : '101';\n  }\n\n  if (leavingEl !== undefined) {\n    leavingEl.style.zIndex = '100';\n  }\n};\n\nvar getIonPageElement = function getIonPageElement(element) {\n  if (element.classList.contains('ion-page')) {\n    return element;\n  }\n\n  var ionPage = element.querySelector(':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs');\n\n  if (ionPage) {\n    return ionPage;\n  } // idk, return the original element so at least something animates and we don't have a null pointer\n\n\n  return element;\n};\n\nexport { LIFECYCLE_WILL_ENTER as L, LIFECYCLE_DID_ENTER as a, LIFECYCLE_WILL_LEAVE as b, LIFECYCLE_DID_LEAVE as c, LIFECYCLE_WILL_UNLOAD as d, deepReady as e, getIonPageElement as g, lifecycle as l, setPageHidden as s, transition as t, waitForMount as w };","map":null,"metadata":{},"sourceType":"module"}