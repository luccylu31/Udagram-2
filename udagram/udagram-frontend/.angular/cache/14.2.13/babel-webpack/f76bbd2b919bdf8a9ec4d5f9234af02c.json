{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { i as inheritAriaAttributes } from './helpers-da915de8.js';\nimport { o as openURL, c as createColorClasses, h as hostContext } from './theme-01f3f29c.js';\nimport { m as chevronForwardOutline, n as ellipsisHorizontal } from './index-e2cf2ceb.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nvar breadcrumbIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex:0 0 auto;flex:0 0 auto;-ms-flex-align:center;align-items:center;color:var(--color);font-size:1rem;font-weight:400;line-height:1.5}.breadcrumb-native{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%;outline:none;background:inherit}:host(.breadcrumb-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.breadcrumb-active){color:var(--color-active)}:host(.ion-focused){color:var(--color-focused)}:host(.ion-focused) .breadcrumb-native{background:var(--background-focused)}@media (any-hover: hover){:host(.ion-activatable:hover){color:var(--color-hover)}:host(.ion-activatable.in-breadcrumbs-color:hover),:host(.ion-activatable.ion-color:hover){color:var(--ion-color-shade)}}.breadcrumb-separator{display:-ms-inline-flexbox;display:inline-flex}:host(.breadcrumb-collapsed) .breadcrumb-native{display:none}:host(.in-breadcrumbs-color),:host(.in-breadcrumbs-color.breadcrumb-active){color:var(--ion-color-base)}:host(.in-breadcrumbs-color) .breadcrumb-separator{color:var(--ion-color-base)}:host(.ion-color){color:var(--ion-color-base)}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumb-separator{color:rgba(var(--ion-color-contrast-rgb), 0.8)}:host(.in-toolbar-color.breadcrumb-active){color:var(--ion-color-contrast)}.breadcrumbs-collapsed-indicator{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;-webkit-margin-start:14px;margin-inline-start:14px;-webkit-margin-end:14px;margin-inline-end:14px;margin-top:0;margin-bottom:0;display:-ms-flexbox;display:flex;-ms-flex:1 1 100%;flex:1 1 100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:32px;height:18px;border:0;outline:none;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}.breadcrumbs-collapsed-indicator ion-icon{margin-top:1px;font-size:1.375rem}:host{--color:var(--ion-color-step-850, var(--ion-text-color-step-150, #2d4665));--color-active:var(--ion-text-color, #03060b);--color-hover:var(--ion-text-color, #03060b);--color-focused:var(--color-active);--background-focused:var(--ion-color-step-50, var(--ion-background-color-step-50, rgba(233, 237, 243, 0.7)));font-size:clamp(16px, 1rem, 22px)}:host(.breadcrumb-active){font-weight:600}.breadcrumb-native{border-radius:4px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:5px;padding-bottom:5px;border:1px solid transparent}:host(.ion-focused) .breadcrumb-native{border-radius:8px}:host(.in-breadcrumbs-color.ion-focused) .breadcrumb-native,:host(.ion-color.ion-focused) .breadcrumb-native{background:rgba(var(--ion-color-base-rgb), 0.1);color:var(--ion-color-base)}:host(.ion-focused) ::slotted(ion-icon),:host(.in-breadcrumbs-color.ion-focused) ::slotted(ion-icon),:host(.ion-color.ion-focused) ::slotted(ion-icon){color:var(--ion-color-step-750, var(--ion-text-color-step-250, #445b78))}.breadcrumb-separator{color:var(--ion-color-step-550, var(--ion-text-color-step-450, #73849a))}::slotted(ion-icon){color:var(--ion-color-step-400, var(--ion-text-color-step-600, #92a0b3));font-size:min(1.125rem, 21.6px)}::slotted(ion-icon[slot=start]){-webkit-margin-end:8px;margin-inline-end:8px}::slotted(ion-icon[slot=end]){-webkit-margin-start:8px;margin-inline-start:8px}:host(.breadcrumb-active) ::slotted(ion-icon){color:var(--ion-color-step-850, var(--ion-text-color-step-150, #242d39))}.breadcrumbs-collapsed-indicator{border-radius:4px;background:var(--ion-color-step-100, var(--ion-background-color-step-100, #e9edf3));color:var(--ion-color-step-550, var(--ion-text-color-step-450, #73849a))}.breadcrumbs-collapsed-indicator:hover{opacity:0.45}.breadcrumbs-collapsed-indicator:focus{background:var(--ion-color-step-150, var(--ion-background-color-step-150, #d9e0ea))}.breadcrumbs-collapsed-indicator ion-icon{font-size:min(1.375rem, 22px)}\";\nvar IonBreadcrumbIosStyle0 = breadcrumbIosCss;\nvar breadcrumbMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex:0 0 auto;flex:0 0 auto;-ms-flex-align:center;align-items:center;color:var(--color);font-size:1rem;font-weight:400;line-height:1.5}.breadcrumb-native{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%;outline:none;background:inherit}:host(.breadcrumb-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.breadcrumb-active){color:var(--color-active)}:host(.ion-focused){color:var(--color-focused)}:host(.ion-focused) .breadcrumb-native{background:var(--background-focused)}@media (any-hover: hover){:host(.ion-activatable:hover){color:var(--color-hover)}:host(.ion-activatable.in-breadcrumbs-color:hover),:host(.ion-activatable.ion-color:hover){color:var(--ion-color-shade)}}.breadcrumb-separator{display:-ms-inline-flexbox;display:inline-flex}:host(.breadcrumb-collapsed) .breadcrumb-native{display:none}:host(.in-breadcrumbs-color),:host(.in-breadcrumbs-color.breadcrumb-active){color:var(--ion-color-base)}:host(.in-breadcrumbs-color) .breadcrumb-separator{color:var(--ion-color-base)}:host(.ion-color){color:var(--ion-color-base)}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumb-separator{color:rgba(var(--ion-color-contrast-rgb), 0.8)}:host(.in-toolbar-color.breadcrumb-active){color:var(--ion-color-contrast)}.breadcrumbs-collapsed-indicator{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;-webkit-margin-start:14px;margin-inline-start:14px;-webkit-margin-end:14px;margin-inline-end:14px;margin-top:0;margin-bottom:0;display:-ms-flexbox;display:flex;-ms-flex:1 1 100%;flex:1 1 100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:32px;height:18px;border:0;outline:none;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}.breadcrumbs-collapsed-indicator ion-icon{margin-top:1px;font-size:1.375rem}:host{--color:var(--ion-color-step-600, var(--ion-text-color-step-400, #677483));--color-active:var(--ion-text-color, #03060b);--color-hover:var(--ion-text-color, #03060b);--color-focused:var(--ion-color-step-800, var(--ion-text-color-step-200, #35404e));--background-focused:var(--ion-color-step-50, var(--ion-background-color-step-50, #fff))}:host(.breadcrumb-active){font-weight:500}.breadcrumb-native{-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px}.breadcrumb-separator{-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:10px;margin-inline-end:10px;margin-top:-1px}:host(.ion-focused) .breadcrumb-native{border-radius:4px;-webkit-box-shadow:0px 1px 2px rgba(0, 0, 0, 0.2), 0px 2px 8px rgba(0, 0, 0, 0.12);box-shadow:0px 1px 2px rgba(0, 0, 0, 0.2), 0px 2px 8px rgba(0, 0, 0, 0.12)}.breadcrumb-separator{color:var(--ion-color-step-550, var(--ion-text-color-step-450, #73849a))}::slotted(ion-icon){color:var(--ion-color-step-550, var(--ion-text-color-step-450, #7d8894));font-size:1.125rem}::slotted(ion-icon[slot=start]){-webkit-margin-end:8px;margin-inline-end:8px}::slotted(ion-icon[slot=end]){-webkit-margin-start:8px;margin-inline-start:8px}:host(.breadcrumb-active) ::slotted(ion-icon){color:var(--ion-color-step-850, var(--ion-text-color-step-150, #222d3a))}.breadcrumbs-collapsed-indicator{border-radius:2px;background:var(--ion-color-step-100, var(--ion-background-color-step-100, #eef1f3));color:var(--ion-color-step-550, var(--ion-text-color-step-450, #73849a))}.breadcrumbs-collapsed-indicator:hover{opacity:0.7}.breadcrumbs-collapsed-indicator:focus{background:var(--ion-color-step-150, var(--ion-background-color-step-150, #dfe5e8))}\";\nvar IonBreadcrumbMdStyle0 = breadcrumbMdCss;\n\nvar Breadcrumb = /*#__PURE__*/function () {\n  function Breadcrumb(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Breadcrumb);\n\n    registerInstance(this, hostRef);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.collapsedClick = createEvent(this, \"collapsedClick\", 7);\n    this.inheritedAttributes = {};\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n\n    this.collapsedIndicatorClick = function () {\n      _this.collapsedClick.emit({\n        ionShadowTarget: _this.collapsedRef\n      });\n    };\n\n    this.collapsed = false;\n    this.last = undefined;\n    this.showCollapsedIndicator = undefined;\n    this.color = undefined;\n    this.active = false;\n    this.disabled = false;\n    this.download = undefined;\n    this.href = undefined;\n    this.rel = undefined;\n    this.separator = undefined;\n    this.target = undefined;\n    this.routerDirection = 'forward';\n    this.routerAnimation = undefined;\n  }\n\n  return _createClass(Breadcrumb, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.inheritedAttributes = inheritAriaAttributes(this.el);\n    }\n  }, {\n    key: \"isClickable\",\n    value: function isClickable() {\n      return this.href !== undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var color = this.color,\n          active = this.active,\n          collapsed = this.collapsed,\n          disabled = this.disabled,\n          download = this.download,\n          el = this.el,\n          inheritedAttributes = this.inheritedAttributes,\n          last = this.last,\n          routerAnimation = this.routerAnimation,\n          routerDirection = this.routerDirection,\n          separator = this.separator,\n          showCollapsedIndicator = this.showCollapsedIndicator,\n          target = this.target;\n      var clickable = this.isClickable();\n      var TagType = this.href === undefined ? 'span' : 'a'; // Links can still be tabbed to when set to disabled if they have an href\n      // in order to truly disable them we can keep it as an anchor but remove the href\n\n      var href = disabled ? undefined : this.href;\n      var mode = getIonMode(this);\n      var attrs = TagType === 'span' ? {} : {\n        download: download,\n        href: href,\n        target: target\n      }; // If the breadcrumb is collapsed, check if it contains the collapsed indicator\n      // to show the separator as long as it isn't also the last breadcrumb\n      // otherwise if not collapsed use the value in separator\n\n      var showSeparator = last ? false : collapsed ? showCollapsedIndicator && !last ? true : false : separator;\n      return h(Host, {\n        key: 'dfe55ad57f23e5da5f2e2c51fea99964812472e3',\n        onClick: function onClick(ev) {\n          return openURL(href, ev, routerDirection, routerAnimation);\n        },\n        \"aria-disabled\": disabled ? 'true' : null,\n        class: createColorClasses(color, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'breadcrumb-active', active), 'breadcrumb-collapsed', collapsed), 'breadcrumb-disabled', disabled), 'in-breadcrumbs-color', hostContext('ion-breadcrumbs[color]', el)), 'in-toolbar', hostContext('ion-toolbar', this.el)), 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), 'ion-activatable', clickable), 'ion-focusable', clickable))\n      }, h(TagType, Object.assign({\n        key: 'e361b1f0e7de6dd5c5dd4f6deae72c2c8210466d'\n      }, attrs, {\n        class: \"breadcrumb-native\",\n        part: \"native\",\n        disabled: disabled,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur\n      }, inheritedAttributes), h(\"slot\", {\n        key: '9daeb45a8a28c89f3ad5751f71b8412197846371',\n        name: \"start\"\n      }), h(\"slot\", {\n        key: '4849e63cdffd6c712292745138b68730442c8b0d'\n      }), h(\"slot\", {\n        key: '6edf9bac5aec06ccec2844efac2d9afa1d24cf57',\n        name: \"end\"\n      })), showCollapsedIndicator && h(\"button\", {\n        key: 'de7f5faea75b44011b289d259265e2435a65874f',\n        part: \"collapsed-indicator\",\n        \"aria-label\": \"Show more breadcrumbs\",\n        onClick: function onClick() {\n          return _this2.collapsedIndicatorClick();\n        },\n        ref: function ref(collapsedEl) {\n          return _this2.collapsedRef = collapsedEl;\n        },\n        class: {\n          'breadcrumbs-collapsed-indicator': true\n        }\n      }, h(\"ion-icon\", {\n        key: '957d8851af9c99dda263f34eff0b35a0fc212c32',\n        \"aria-hidden\": \"true\",\n        icon: ellipsisHorizontal,\n        lazy: false\n      })), showSeparator &&\n      /**\n       * Separators should not be announced by narrators.\n       * We add aria-hidden on the span so that this applies\n       * to any custom separators too.\n       */\n      h(\"span\", {\n        key: '97d646c37c4c41ad6b12c3a543d1146fde06fc9a',\n        class: \"breadcrumb-separator\",\n        part: \"separator\",\n        \"aria-hidden\": \"true\"\n      }, h(\"slot\", {\n        key: '0429f671a986f2d7be1b1b69fc879e80806d2916',\n        name: \"separator\"\n      }, mode === 'ios' ? h(\"ion-icon\", {\n        icon: chevronForwardOutline,\n        lazy: false,\n        \"flip-rtl\": true\n      }) : h(\"span\", null, \"/\"))));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n}();\n\nBreadcrumb.style = {\n  ios: IonBreadcrumbIosStyle0,\n  md: IonBreadcrumbMdStyle0\n};\nvar breadcrumbsIosCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:0;padding-bottom:0;-ms-flex-pack:center;justify-content:center}\";\nvar IonBreadcrumbsIosStyle0 = breadcrumbsIosCss;\nvar breadcrumbsMdCss = \":host{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center}:host(.in-toolbar-color),:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon{color:var(--ion-color-contrast)}:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator{background:rgba(var(--ion-color-contrast-rgb), 0.11)}:host(.in-toolbar){-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0}\";\nvar IonBreadcrumbsMdStyle0 = breadcrumbsMdCss;\n\nvar Breadcrumbs = /*#__PURE__*/function () {\n  function Breadcrumbs(hostRef) {\n    var _this3 = this;\n\n    _classCallCheck(this, Breadcrumbs);\n\n    registerInstance(this, hostRef);\n    this.ionCollapsedClick = createEvent(this, \"ionCollapsedClick\", 7);\n\n    this.breadcrumbsInit = function () {\n      _this3.setBreadcrumbSeparator();\n\n      _this3.setMaxItems();\n    };\n\n    this.resetActiveBreadcrumb = function () {\n      var breadcrumbs = _this3.getBreadcrumbs(); // Only reset the active breadcrumb if we were the ones to change it\n      // otherwise use the one set on the component\n\n\n      var activeBreadcrumb = breadcrumbs.find(function (breadcrumb) {\n        return breadcrumb.active;\n      });\n\n      if (activeBreadcrumb && _this3.activeChanged) {\n        activeBreadcrumb.active = false;\n      }\n    };\n\n    this.setMaxItems = function () {\n      var itemsAfterCollapse = _this3.itemsAfterCollapse,\n          itemsBeforeCollapse = _this3.itemsBeforeCollapse,\n          maxItems = _this3.maxItems;\n\n      var breadcrumbs = _this3.getBreadcrumbs();\n\n      var _iterator = _createForOfIteratorHelper(breadcrumbs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var breadcrumb = _step.value;\n          breadcrumb.showCollapsedIndicator = false;\n          breadcrumb.collapsed = false;\n        } // If the number of breadcrumbs exceeds the maximum number of items\n        // that should show and the items before / after collapse do not\n        // exceed the maximum items then we need to collapse the breadcrumbs\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n\n      if (shouldCollapse) {\n        // Show the collapsed indicator in the first breadcrumb that collapses\n        breadcrumbs.forEach(function (breadcrumb, index) {\n          if (index === itemsBeforeCollapse) {\n            breadcrumb.showCollapsedIndicator = true;\n          } // Collapse all breadcrumbs that have an index greater than or equal to\n          // the number before collapse and an index less than the total number\n          // of breadcrumbs minus the items that should show after the collapse\n\n\n          if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n            breadcrumb.collapsed = true;\n          }\n        });\n      }\n    };\n\n    this.setBreadcrumbSeparator = function () {\n      var itemsAfterCollapse = _this3.itemsAfterCollapse,\n          itemsBeforeCollapse = _this3.itemsBeforeCollapse,\n          maxItems = _this3.maxItems;\n\n      var breadcrumbs = _this3.getBreadcrumbs(); // Check if an active breadcrumb exists already\n\n\n      var active = breadcrumbs.find(function (breadcrumb) {\n        return breadcrumb.active;\n      }); // Set the separator on all but the last breadcrumb\n\n      var _iterator2 = _createForOfIteratorHelper(breadcrumbs),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var breadcrumb = _step2.value;\n          // The only time the last breadcrumb changes is when\n          // itemsAfterCollapse is set to 0, in this case the\n          // last breadcrumb will be the collapsed indicator\n          var last = maxItems !== undefined && itemsAfterCollapse === 0 ? breadcrumb === breadcrumbs[itemsBeforeCollapse] : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n          breadcrumb.last = last; // If the breadcrumb has defined whether or not to show the\n          // separator then use that value, otherwise check if it's the\n          // last breadcrumb\n\n          var separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n          breadcrumb.separator = separator; // If there is not an active breadcrumb already\n          // set the last one to active\n\n          if (!active && last) {\n            breadcrumb.active = true;\n            _this3.activeChanged = true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n\n    this.getBreadcrumbs = function () {\n      return Array.from(_this3.el.querySelectorAll('ion-breadcrumb'));\n    };\n\n    this.slotChanged = function () {\n      _this3.resetActiveBreadcrumb();\n\n      _this3.breadcrumbsInit();\n    };\n\n    this.collapsed = undefined;\n    this.activeChanged = undefined;\n    this.color = undefined;\n    this.maxItems = undefined;\n    this.itemsBeforeCollapse = 1;\n    this.itemsAfterCollapse = 1;\n  }\n\n  return _createClass(Breadcrumbs, [{\n    key: \"onCollapsedClick\",\n    value: function onCollapsedClick(ev) {\n      var breadcrumbs = this.getBreadcrumbs();\n      var collapsedBreadcrumbs = breadcrumbs.filter(function (breadcrumb) {\n        return breadcrumb.collapsed;\n      });\n      this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), {\n        collapsedBreadcrumbs: collapsedBreadcrumbs\n      }));\n    }\n  }, {\n    key: \"maxItemsChanged\",\n    value: function maxItemsChanged() {\n      this.resetActiveBreadcrumb();\n      this.breadcrumbsInit();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.breadcrumbsInit();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var color = this.color,\n          collapsed = this.collapsed;\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '18ffba1642f10cc2bc31440e84f23aa6f042e501',\n        class: createColorClasses(color, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'in-toolbar', hostContext('ion-toolbar', this.el)), 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), 'breadcrumbs-collapsed', collapsed))\n      }, h(\"slot\", {\n        key: '3db6d31590e3047889ce554d57d155c8ea2e1455',\n        onSlotchange: this.slotChanged\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"maxItems\": [\"maxItemsChanged\"],\n        \"itemsBeforeCollapse\": [\"maxItemsChanged\"],\n        \"itemsAfterCollapse\": [\"maxItemsChanged\"]\n      };\n    }\n  }]);\n}();\n\nBreadcrumbs.style = {\n  ios: IonBreadcrumbsIosStyle0,\n  md: IonBreadcrumbsMdStyle0\n};\nexport { Breadcrumb as ion_breadcrumb, Breadcrumbs as ion_breadcrumbs };","map":null,"metadata":{},"sourceType":"module"}