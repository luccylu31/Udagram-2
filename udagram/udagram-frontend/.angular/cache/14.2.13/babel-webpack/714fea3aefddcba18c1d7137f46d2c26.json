{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { d as doc } from './index-a5d50daf.js';\nimport { r as raf, g as getElementRoot } from './helpers-da915de8.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-ac164e4c.js';\nimport { a as isPlatform, b as getIonMode } from './ionic-global-81a1064f.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport './capacitor-59395cbd.js';\nvar pickerColumnCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;max-width:100%;height:200px;font-size:22px;text-align:center}.assistive-focusable{left:0;right:0;top:0;bottom:0;position:absolute;z-index:1;pointer-events:none}.assistive-focusable:focus{outline:none}.picker-opts{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;min-width:26px;max-height:200px;outline:none;text-align:inherit;-webkit-scroll-snap-type:y mandatory;-ms-scroll-snap-type:y mandatory;scroll-snap-type:y mandatory;overflow-x:hidden;overflow-y:scroll;scrollbar-width:none}.picker-item-empty{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:block;width:100%;height:34px;border:0px;outline:none;background:transparent;color:inherit;font-family:var(--ion-font-family, inherit);font-size:inherit;line-height:34px;text-align:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.picker-opts::-webkit-scrollbar{display:none}::slotted(ion-picker-column-option){display:block;scroll-snap-align:center}.picker-item-empty,:host(:not([disabled])) ::slotted(ion-picker-column-option.option-disabled){scroll-snap-align:none}::slotted([slot=prefix]),::slotted([slot=suffix]){max-width:200px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}::slotted([slot=prefix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:end;justify-content:end}::slotted([slot=suffix]){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-ms-flex-pack:start;justify-content:start}:host(.picker-column-disabled) .picker-opts{overflow-y:hidden}:host(.picker-column-disabled) ::slotted(ion-picker-column-option){cursor:default;opacity:0.4;pointer-events:none}@media (any-hover: hover){:host(:focus) .picker-opts{outline:none;background:rgba(var(--ion-color-base-rgb), 0.2)}}\";\nvar IonPickerColumnStyle0 = pickerColumnCss;\n\nvar PickerColumn = /*#__PURE__*/function () {\n  function PickerColumn(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, PickerColumn);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.isScrolling = false;\n    this.isColumnVisible = false;\n    this.canExitInputMode = true;\n    this.updateValueTextOnScroll = false;\n\n    this.centerPickerItemInView = function (target) {\n      var smooth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var canExitInputMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var isColumnVisible = _this.isColumnVisible,\n          scrollEl = _this.scrollEl;\n\n      if (isColumnVisible && scrollEl) {\n        // (Vertical offset from parent) - (three empty picker rows) + (half the height of the target to ensure the scroll triggers)\n        var top = target.offsetTop - 3 * target.clientHeight + target.clientHeight / 2;\n\n        if (scrollEl.scrollTop !== top) {\n          /**\n           * Setting this flag prevents input\n           * mode from exiting in the picker column's\n           * scroll callback. This is useful when the user manually\n           * taps an item or types on the keyboard as both\n           * of these can cause a scroll to occur.\n           */\n          _this.canExitInputMode = canExitInputMode;\n          _this.updateValueTextOnScroll = false;\n          scrollEl.scroll({\n            top: top,\n            left: 0,\n            behavior: smooth ? 'smooth' : undefined\n          });\n        }\n      }\n    };\n\n    this.setPickerItemActiveState = function (item, isActive) {\n      if (isActive) {\n        item.classList.add(PICKER_ITEM_ACTIVE_CLASS);\n      } else {\n        item.classList.remove(PICKER_ITEM_ACTIVE_CLASS);\n      }\n    };\n    /**\n     * When ionInputModeChange is emitted, each column\n     * needs to check if it is the one being made available\n     * for text entry.\n     */\n\n\n    this.inputModeChange = function (ev) {\n      if (!_this.numericInput) {\n        return;\n      }\n\n      var _ev$detail = ev.detail,\n          useInputMode = _ev$detail.useInputMode,\n          inputModeColumn = _ev$detail.inputModeColumn;\n      /**\n       * If inputModeColumn is undefined then this means\n       * all numericInput columns are being selected.\n       */\n\n      var isColumnActive = inputModeColumn === undefined || inputModeColumn === _this.el;\n\n      if (!useInputMode || !isColumnActive) {\n        _this.setInputModeActive(false);\n\n        return;\n      }\n\n      _this.setInputModeActive(true);\n    };\n    /**\n     * Setting isActive will cause a re-render.\n     * As a result, we do not want to cause the\n     * re-render mid scroll as this will cause\n     * the picker column to jump back to\n     * whatever value was selected at the\n     * start of the scroll interaction.\n     */\n\n\n    this.setInputModeActive = function (state) {\n      if (_this.isScrolling) {\n        _this.scrollEndCallback = function () {\n          _this.isActive = state;\n        };\n\n        return;\n      }\n\n      _this.isActive = state;\n    };\n    /**\n     * When the column scrolls, the component\n     * needs to determine which item is centered\n     * in the view and will emit an ionChange with\n     * the item object.\n     */\n\n\n    this.initializeScrollListener = function () {\n      /**\n       * The haptics for the wheel picker are\n       * an iOS-only feature. As a result, they should\n       * be disabled on Android.\n       */\n      var enableHaptics = isPlatform('ios');\n      var el = _this.el,\n          scrollEl = _this.scrollEl;\n      var timeout;\n      var activeEl = _this.activeItem;\n\n      var scrollCallback = function scrollCallback() {\n        raf(function () {\n          var _a;\n\n          if (!scrollEl) return;\n\n          if (timeout) {\n            clearTimeout(timeout);\n            timeout = undefined;\n          }\n\n          if (!_this.isScrolling) {\n            enableHaptics && hapticSelectionStart();\n            _this.isScrolling = true;\n          }\n          /**\n           * Select item in the center of the column\n           * which is the month/year that we want to select\n           */\n\n\n          var bbox = scrollEl.getBoundingClientRect();\n          var centerX = bbox.x + bbox.width / 2;\n          var centerY = bbox.y + bbox.height / 2;\n          /**\n           * elementFromPoint returns the top-most element.\n           * This means that if an ion-backdrop is overlaying the\n           * picker then the appropriate picker column option will\n           * not be selected. To account for this, we use elementsFromPoint\n           * and use an Array.find to find the appropriate column option\n           * at that point.\n           *\n           * Additionally, the picker column could be used in the\n           * Shadow DOM (i.e. in ion-datetime) so we need to make\n           * sure we are choosing the correct host otherwise\n           * the elements returns by elementsFromPoint will be\n           * retargeted. To account for this, we check to see\n           * if the picker column has a parent shadow root. If\n           * so, we use that shadow root when doing elementsFromPoint.\n           * Otherwise, we just use the document.\n           */\n\n          var rootNode = el.getRootNode();\n          var hasParentShadow = rootNode instanceof ShadowRoot;\n          var referenceNode = hasParentShadow ? rootNode : doc;\n          /**\n           * If the reference node is undefined\n           * then it's likely that doc is undefined\n           * due to being in an SSR environment.\n           */\n\n          if (referenceNode === undefined) {\n            return;\n          }\n\n          var elementsAtPoint = referenceNode.elementsFromPoint(centerX, centerY);\n          /**\n           * elementsFromPoint can returns multiple elements\n           * so find the relevant picker column option if one exists.\n           */\n\n          var newActiveElement = elementsAtPoint.find(function (el) {\n            return el.tagName === 'ION-PICKER-COLUMN-OPTION';\n          });\n\n          if (activeEl !== undefined) {\n            _this.setPickerItemActiveState(activeEl, false);\n          }\n\n          if (newActiveElement === undefined || newActiveElement.disabled) {\n            return;\n          }\n          /**\n           * If we are selecting a new value,\n           * we need to run haptics again.\n           */\n\n\n          if (newActiveElement !== activeEl) {\n            enableHaptics && hapticSelectionChanged();\n\n            if (_this.canExitInputMode) {\n              /**\n               * The native iOS wheel picker\n               * only dismisses the keyboard\n               * once the selected item has changed\n               * as a result of a swipe\n               * from the user. If `canExitInputMode` is\n               * `false` then this means that the\n               * scroll is happening as a result of\n               * the `value` property programmatically changing\n               * either by an application or by the user via the keyboard.\n               */\n              _this.exitInputMode();\n            }\n          }\n\n          activeEl = newActiveElement;\n\n          _this.setPickerItemActiveState(newActiveElement, true);\n          /**\n           * Set the aria-valuetext even though the value prop has not been updated yet.\n           * This enables some screen readers to announce the value as the users drag\n           * as opposed to when their release their pointer from the screen.\n           *\n           * When the value is programmatically updated, we will smoothly scroll\n           * to the new option. However, we do not want to update aria-valuetext mid-scroll\n           * as that can cause the old value to be briefly set before being set to the\n           * correct option. This will cause some screen readers to announce the old value\n           * again before announcing the new value. The correct valuetext will be set on render.\n           */\n\n\n          if (_this.updateValueTextOnScroll) {\n            (_a = _this.assistiveFocusable) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-valuetext', _this.getOptionValueText(newActiveElement));\n          }\n\n          timeout = setTimeout(function () {\n            _this.isScrolling = false;\n            _this.updateValueTextOnScroll = true;\n            enableHaptics && hapticSelectionEnd();\n            /**\n             * Certain tasks (such as those that\n             * cause re-renders) should only be done\n             * once scrolling has finished, otherwise\n             * flickering may occur.\n             */\n\n            var scrollEndCallback = _this.scrollEndCallback;\n\n            if (scrollEndCallback) {\n              scrollEndCallback();\n              _this.scrollEndCallback = undefined;\n            }\n            /**\n             * Reset this flag as the\n             * next scroll interaction could\n             * be a scroll from the user. In this\n             * case, we should exit input mode.\n             */\n\n\n            _this.canExitInputMode = true;\n\n            _this.setValue(newActiveElement.value);\n          }, 250);\n        });\n      };\n      /**\n       * Wrap this in an raf so that the scroll callback\n       * does not fire when component is initially shown.\n       */\n\n\n      raf(function () {\n        if (!scrollEl) return;\n        scrollEl.addEventListener('scroll', scrollCallback);\n\n        _this.destroyScrollListener = function () {\n          scrollEl.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Tells the parent picker to\n     * exit text entry mode. This is only called\n     * when the selected item changes during scroll, so\n     * we know that the user likely wants to scroll\n     * instead of type.\n     */\n\n\n    this.exitInputMode = function () {\n      var parentEl = _this.parentEl;\n      if (parentEl == null) return;\n      parentEl.exitInputMode();\n      /**\n       * setInputModeActive only takes\n       * effect once scrolling stops to avoid\n       * a component re-render while scrolling.\n       * However, we want the visual active\n       * indicator to go away immediately, so\n       * we call classList.remove here.\n       */\n\n      _this.el.classList.remove('picker-column-active');\n    };\n    /**\n     * Find the next enabled option after the active option.\n     * @param stride - How many options to \"jump\" over in order to select the next option.\n     * This can be used to implement PageUp/PageDown behaviors where pressing these keys\n     * scrolls the picker by more than 1 option. For example, a stride of 5 means select\n     * the enabled option 5 options after the active one. Note that the actual option selected\n     * may be past the stride if the option at the stride is disabled.\n     */\n\n\n    this.findNextOption = function () {\n      var stride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var activeItem = _this.activeItem;\n      if (!activeItem) return null;\n      var prevNode = activeItem;\n      var node = activeItem.nextElementSibling;\n\n      while (node != null) {\n        if (stride > 0) {\n          stride--;\n        }\n\n        if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\n          return node;\n        }\n\n        prevNode = node; // Use nextElementSibling instead of nextSibling to avoid text/comment nodes\n\n        node = node.nextElementSibling;\n      }\n\n      return prevNode;\n    };\n    /**\n     * Find the next enabled option after the active option.\n     * @param stride - How many options to \"jump\" over in order to select the next option.\n     * This can be used to implement PageUp/PageDown behaviors where pressing these keys\n     * scrolls the picker by more than 1 option. For example, a stride of 5 means select\n     * the enabled option 5 options before the active one. Note that the actual option selected\n     *  may be past the stride if the option at the stride is disabled.\n     */\n\n\n    this.findPreviousOption = function () {\n      var stride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var activeItem = _this.activeItem;\n      if (!activeItem) return null;\n      var nextNode = activeItem;\n      var node = activeItem.previousElementSibling;\n\n      while (node != null) {\n        if (stride > 0) {\n          stride--;\n        }\n\n        if (node.tagName === 'ION-PICKER-COLUMN-OPTION' && !node.disabled && stride === 0) {\n          return node;\n        }\n\n        nextNode = node; // Use previousElementSibling instead of previousSibling to avoid text/comment nodes\n\n        node = node.previousElementSibling;\n      }\n\n      return nextNode;\n    };\n\n    this.onKeyDown = function (ev) {\n      /**\n       * The below operations should be inverted when running on a mobile device.\n       * For example, swiping up will dispatch an \"ArrowUp\" event. On desktop,\n       * this should cause the previous option to be selected. On mobile, swiping\n       * up causes a view to scroll down. As a result, swiping up on mobile should\n       * cause the next option to be selected. The Home/End operations remain\n       * unchanged because those always represent the first/last options, respectively.\n       */\n      var mobile = isPlatform('mobile');\n      var newOption = null;\n\n      switch (ev.key) {\n        case 'ArrowDown':\n          newOption = mobile ? _this.findPreviousOption() : _this.findNextOption();\n          break;\n\n        case 'ArrowUp':\n          newOption = mobile ? _this.findNextOption() : _this.findPreviousOption();\n          break;\n\n        case 'PageUp':\n          newOption = mobile ? _this.findNextOption(5) : _this.findPreviousOption(5);\n          break;\n\n        case 'PageDown':\n          newOption = mobile ? _this.findPreviousOption(5) : _this.findNextOption(5);\n          break;\n\n        case 'Home':\n          /**\n           * There is no guarantee that the first child will be an ion-picker-column-option,\n           * so we do not use firstElementChild.\n           */\n          newOption = _this.el.querySelector('ion-picker-column-option:first-of-type');\n          break;\n\n        case 'End':\n          /**\n           * There is no guarantee that the last child will be an ion-picker-column-option,\n           * so we do not use lastElementChild.\n           */\n          newOption = _this.el.querySelector('ion-picker-column-option:last-of-type');\n          break;\n      }\n\n      if (newOption !== null) {\n        _this.setValue(newOption.value); // This stops any default browser behavior such as scrolling\n\n\n        ev.preventDefault();\n      }\n    };\n    /**\n     * Utility to generate the correct text for aria-valuetext.\n     */\n\n\n    this.getOptionValueText = function (el) {\n      var _a;\n\n      return el ? (_a = el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : el.innerText : '';\n    };\n    /**\n     * Render an element that overlays the column. This element is for assistive\n     * tech to allow users to navigate the column up/down. This element should receive\n     * focus as it listens for synthesized keyboard events as required by the\n     * slider role: https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/slider_role\n     */\n\n\n    this.renderAssistiveFocusable = function () {\n      var activeItem = _this.activeItem;\n\n      var valueText = _this.getOptionValueText(activeItem);\n      /**\n       * When using the picker, the valuetext provides important context that valuenow\n       * does not. Additionally, using non-zero valuemin/valuemax values can cause\n       * WebKit to incorrectly announce numeric valuetext values (such as a year\n       * like \"2024\") as percentages: https://bugs.webkit.org/show_bug.cgi?id=273126\n       */\n\n\n      return h(\"div\", {\n        ref: function ref(el) {\n          return _this.assistiveFocusable = el;\n        },\n        class: \"assistive-focusable\",\n        role: \"slider\",\n        tabindex: _this.disabled ? undefined : 0,\n        \"aria-label\": _this.ariaLabel,\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 0,\n        \"aria-valuenow\": 0,\n        \"aria-valuetext\": valueText,\n        \"aria-orientation\": \"vertical\",\n        onKeyDown: function onKeyDown(ev) {\n          return _this.onKeyDown(ev);\n        }\n      });\n    };\n\n    this.ariaLabel = null;\n    this.isActive = false;\n    this.disabled = false;\n    this.value = undefined;\n    this.color = 'primary';\n    this.numericInput = false;\n  }\n\n  return _createClass(PickerColumn, [{\n    key: \"ariaLabelChanged\",\n    value: function ariaLabelChanged(newValue) {\n      this.ariaLabel = newValue;\n    }\n  }, {\n    key: \"valueChange\",\n    value: function valueChange() {\n      if (this.isColumnVisible) {\n        /**\n         * Only scroll the active item into view when the picker column\n         * is actively visible to the user.\n         */\n        this.scrollActiveItemIntoView(true);\n      }\n    }\n    /**\n     * Only setup scroll listeners\n     * when the picker is visible, otherwise\n     * the container will have a scroll\n     * height of 0px.\n     */\n\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      var _this2 = this;\n\n      /**\n       * We cache parentEl in a local variable\n       * so we don't need to keep accessing\n       * the class variable (which comes with\n       * a small performance hit)\n       */\n      var parentEl = this.parentEl = this.el.closest('ion-picker');\n\n      var visibleCallback = function visibleCallback(entries) {\n        /**\n         * Browsers will sometimes group multiple IO events into a single callback.\n         * As a result, we want to grab the last/most recent event in case there are multiple events.\n         */\n        var ev = entries[entries.length - 1];\n\n        if (ev.isIntersecting) {\n          var activeItem = _this2.activeItem,\n              el = _this2.el;\n          _this2.isColumnVisible = true;\n          /**\n           * Because this initial call to scrollActiveItemIntoView has to fire before\n           * the scroll listener is set up, we need to manage the active class manually.\n           */\n\n          var oldActive = getElementRoot(el).querySelector(\".\".concat(PICKER_ITEM_ACTIVE_CLASS));\n\n          if (oldActive) {\n            _this2.setPickerItemActiveState(oldActive, false);\n          }\n\n          _this2.scrollActiveItemIntoView();\n\n          if (activeItem) {\n            _this2.setPickerItemActiveState(activeItem, true);\n          }\n\n          _this2.initializeScrollListener();\n        } else {\n          _this2.isColumnVisible = false;\n\n          if (_this2.destroyScrollListener) {\n            _this2.destroyScrollListener();\n\n            _this2.destroyScrollListener = undefined;\n          }\n        }\n      };\n      /**\n       * Set the root to be the parent picker element\n       * This causes the IO callback\n       * to be fired in WebKit as soon as the element\n       * is visible. If we used the default root value\n       * then WebKit would only fire the IO callback\n       * after any animations (such as a modal transition)\n       * finished, and there would potentially be a flicker.\n       */\n\n\n      new IntersectionObserver(visibleCallback, {\n        threshold: 0.001,\n        root: this.parentEl\n      }).observe(this.el);\n\n      if (parentEl !== null) {\n        // TODO(FW-2832): type\n        parentEl.addEventListener('ionInputModeChange', function (ev) {\n          return _this2.inputModeChange(ev);\n        });\n      }\n    }\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      var el = this.el,\n          activeItem = this.activeItem,\n          isColumnVisible = this.isColumnVisible,\n          value = this.value;\n\n      if (isColumnVisible && !activeItem) {\n        var firstOption = el.querySelector('ion-picker-column-option');\n        /**\n         * If the picker column does not have an active item and the current value\n         * does not match the first item in the picker column, that means\n         * the value is out of bounds. In this case, we assign the value to the\n         * first item to match the scroll position of the column.\n         *\n         */\n\n        if (firstOption !== null && firstOption.value !== value) {\n          this.setValue(firstOption.value);\n        }\n      }\n    }\n    /** @internal  */\n\n  }, {\n    key: \"scrollActiveItemIntoView\",\n    value: function () {\n      var _scrollActiveItemIntoView = _asyncToGenerator(function () {\n        var _this3 = this;\n\n        var smooth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var activeEl;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                activeEl = _this3.activeItem;\n\n                if (activeEl) {\n                  _this3.centerPickerItemInView(activeEl, smooth, false);\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        })();\n      });\n\n      function scrollActiveItemIntoView() {\n        return _scrollActiveItemIntoView.apply(this, arguments);\n      }\n\n      return scrollActiveItemIntoView;\n    }()\n    /**\n     * Sets the value prop and fires the ionChange event.\n     * This is used when we need to fire ionChange from\n     * user-generated events that cannot be caught with normal\n     * input/change event listeners.\n     * @internal\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function () {\n      var _setValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this.disabled === true || this.value === value)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              this.value = value;\n              this.ionChange.emit({\n                value: value\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function setValue(_x) {\n        return _setValue.apply(this, arguments);\n      }\n\n      return setValue;\n    }()\n    /**\n     * Sets focus on the scrollable container within the picker column.\n     * Use this method instead of the global `pickerColumn.focus()`.\n     */\n\n  }, {\n    key: \"setFocus\",\n    value: function () {\n      var _setFocus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.assistiveFocusable) {\n                this.assistiveFocusable.focus();\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n\n      function setFocus() {\n        return _setFocus.apply(this, arguments);\n      }\n\n      return setFocus;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _a;\n\n      this.ariaLabel = (_a = this.el.getAttribute('aria-label')) !== null && _a !== void 0 ? _a : 'Select a value';\n    }\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      var _this4 = this;\n\n      var value = this.value;\n      var options = Array.from(this.el.querySelectorAll('ion-picker-column-option'));\n      return options.find(function (option) {\n        /**\n         * If the whole picker column is disabled, the current value should appear active\n         * If the current value item is specifically disabled, it should not appear active\n         */\n        if (!_this4.disabled && option.disabled) {\n          return false;\n        }\n\n        return option.value === value;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var color = this.color,\n          disabled = this.disabled,\n          isActive = this.isActive,\n          numericInput = this.numericInput;\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: 'd60736ce74c0e8c774a163272b78fbad32993ec2',\n        class: createColorClasses(color, _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'picker-column-active', isActive), 'picker-column-numeric-input', numericInput), 'picker-column-disabled', disabled))\n      }, this.renderAssistiveFocusable(), h(\"slot\", {\n        key: '74611112ef154b343ae29a773f8cd8a01cc1447d',\n        name: \"prefix\"\n      }), h(\"div\", {\n        key: 'af772d2b61b7eb41a567593d290b80a50b7caa72',\n        \"aria-hidden\": \"true\",\n        class: \"picker-opts\",\n        ref: function ref(el) {\n          _this5.scrollEl = el;\n        },\n\n        /**\n         * When an element has an overlay scroll style and\n         * a fixed height, Firefox will focus the scrollable\n         * container if the content exceeds the container's\n         * dimensions.\n         *\n         * This causes keyboard navigation to focus to this\n         * element instead of going to the next element in\n         * the tab order.\n         *\n         * The desired behavior is for the user to be able to\n         * focus the assistive focusable element and tab to\n         * the next element in the tab order. Instead of tabbing\n         * to this element.\n         *\n         * To prevent this, we set the tabIndex to -1. This\n         * will match the behavior of the other browsers.\n         */\n        tabIndex: -1\n      }, h(\"div\", {\n        key: '4b646ee97bcf8ed541b9798c91dff189eec41dd1',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\"), h(\"div\", {\n        key: 'a44d1a10d20a13aeb47f9871b09e291aa7f216bd',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\"), h(\"div\", {\n        key: '6a481715bd68fa68dc2a76c2e867ce771ea680b0',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\"), h(\"slot\", {\n        key: '23236e731b1ad432c104761ebeec91697a6b7643'\n      }), h(\"div\", {\n        key: '58a6c1f35a3ff0b26acaceebfd477d74b6dcfd6d',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\"), h(\"div\", {\n        key: 'ea864872dec6dc363406d1bd9101b1bf21944db6',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\"), h(\"div\", {\n        key: '28cc4c570d0dd59f491eef2b15a5ed706d28b7bb',\n        class: \"picker-item-empty\",\n        \"aria-hidden\": \"true\"\n      }, \"\\xA0\")), h(\"slot\", {\n        key: 'cff1cc0bea732a5ce22bb451c5ea404a84af1993',\n        name: \"suffix\"\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"aria-label\": [\"ariaLabelChanged\"],\n        \"value\": [\"valueChange\"]\n      };\n    }\n  }]);\n}();\n\nvar PICKER_ITEM_ACTIVE_CLASS = 'option-active';\nPickerColumn.style = IonPickerColumnStyle0;\nexport { PickerColumn as ion_picker_column };","map":null,"metadata":{},"sourceType":"module"}