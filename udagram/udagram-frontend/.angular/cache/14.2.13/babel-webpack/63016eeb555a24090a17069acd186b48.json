{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, h, f as Host, i as getElement, j as forceUpdate } from './index-7a952e7a.js';\nimport { r as raf, a as addEventListener, b as removeEventListener, h as inheritAttributes } from './helpers-da915de8.js';\nimport { i as isRTL } from './dir-babeabeb.js';\nimport { c as createColorClasses, h as hostContext } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nvar segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nvar IonSegmentIosStyle0 = segmentIosCss;\nvar segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:grid;grid-auto-columns:1fr;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto;grid-auto-columns:minmax(-webkit-min-content, 1fr);grid-auto-columns:minmax(min-content, 1fr)}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent;grid-auto-columns:minmax(auto, 360px)}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nvar IonSegmentMdStyle0 = segmentMdCss;\n\nvar Segment = /*#__PURE__*/function () {\n  function Segment(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Segment);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n\n    this.onClick = function (ev) {\n      var current = ev.target;\n      var previous = _this.checked; // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n\n      _this.value = current.value;\n\n      if (current !== previous) {\n        _this.emitValueChange();\n      }\n\n      if (_this.scrollable || !_this.swipeGesture) {\n        if (previous) {\n          _this.checkButton(previous, current);\n        } else {\n          _this.setCheckedClasses();\n        }\n      }\n    };\n\n    this.onSlottedItemsChange = function () {\n      /**\n       * When the slotted segment buttons change we need to\n       * ensure that the new segment buttons are checked if\n       * the value matches the segment button value.\n       */\n      _this.valueChanged(_this.value);\n    };\n\n    this.getSegmentButton = function (selector) {\n      var _a, _b;\n\n      var buttons = _this.getButtons().filter(function (button) {\n        return !button.disabled;\n      });\n\n      var currIndex = buttons.findIndex(function (button) {\n        return button === document.activeElement;\n      });\n\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n\n        case 'last':\n          return buttons[buttons.length - 1];\n\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n\n        default:\n          return null;\n      }\n    };\n\n    this.activated = false;\n    this.color = undefined;\n    this.disabled = false;\n    this.scrollable = false;\n    this.swipeGesture = true;\n    this.value = undefined;\n    this.selectOnFocus = false;\n  }\n\n  return _createClass(Segment, [{\n    key: \"colorChanged\",\n    value: function colorChanged(value, oldValue) {\n      /**\n       * If color is set after not having\n       * previously been set (or vice versa),\n       * we need to emit style so the segment-buttons\n       * can apply their color classes properly.\n       */\n      if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n        this.emitStyle();\n      }\n    }\n  }, {\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      this.gestureChanged();\n    }\n  }, {\n    key: \"valueChanged\",\n    value: function valueChanged(value) {\n      /**\n       * `ionSelect` is emitted every time the value changes (internal or external changes).\n       * Used by `ion-segment-button` to determine if the button should be checked.\n       */\n      this.ionSelect.emit({\n        value: value\n      });\n      this.scrollActiveButtonIntoView();\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.gestureChanged();\n      var buttons = this.getButtons();\n\n      var _iterator = _createForOfIteratorHelper(buttons),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          button.disabled = this.disabled;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"gestureChanged\",\n    value: function gestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.setCheckedClasses();\n              /**\n               * We need to wait for the buttons to all be rendered\n               * before we can scroll.\n               */\n\n              raf(function () {\n                /**\n                 * When the segment loads for the first\n                 * time we just want to snap the active button into\n                 * place instead of scroll. Smooth scrolling should only\n                 * happen when the user interacts with the segment.\n                 */\n                _this2.scrollActiveButtonIntoView(false);\n              });\n              _context.next = 4;\n              return import('./index-39782642.js');\n\n            case 4:\n              this.gesture = _context.sent.createGesture({\n                el: this.el,\n                gestureName: 'segment',\n                gesturePriority: 100,\n                threshold: 0,\n                passive: false,\n                onStart: function onStart(ev) {\n                  return _this2.onStart(ev);\n                },\n                onMove: function onMove(ev) {\n                  return _this2.onMove(ev);\n                },\n                onEnd: function onEnd(ev) {\n                  return _this2.onEnd(ev);\n                }\n              });\n              this.gestureChanged();\n\n              if (this.disabled) {\n                this.disabledChanged();\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"onStart\",\n    value: function onStart(detail) {\n      this.valueBeforeGesture = this.value;\n      this.activate(detail);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      this.setNextIndex(detail);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(detail) {\n      this.setActivated(false);\n      this.setNextIndex(detail, true);\n      detail.event.stopImmediatePropagation();\n      var value = this.value;\n\n      if (value !== undefined) {\n        if (this.valueBeforeGesture !== value) {\n          this.emitValueChange();\n        }\n      }\n\n      this.valueBeforeGesture = undefined;\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n\n  }, {\n    key: \"emitValueChange\",\n    value: function emitValueChange() {\n      var value = this.value;\n      this.ionChange.emit({\n        value: value\n      });\n    }\n  }, {\n    key: \"getButtons\",\n    value: function getButtons() {\n      return Array.from(this.el.querySelectorAll('ion-segment-button'));\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      var _this3 = this;\n\n      return this.getButtons().find(function (button) {\n        return button.value === _this3.value;\n      });\n    }\n    /*\n     * Activate both the segment and the buttons\n     * due to a bug with ::slotted in Safari\n     */\n\n  }, {\n    key: \"setActivated\",\n    value: function setActivated(activated) {\n      var buttons = this.getButtons();\n      buttons.forEach(function (button) {\n        if (activated) {\n          button.classList.add('segment-button-activated');\n        } else {\n          button.classList.remove('segment-button-activated');\n        }\n      });\n      this.activated = activated;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(detail) {\n      var _this4 = this;\n\n      var clicked = detail.event.target;\n      var buttons = this.getButtons();\n      var checked = buttons.find(function (button) {\n        return button.value === _this4.value;\n      }); // Make sure we are only checking for activation on a segment button\n      // since disabled buttons will get the click on the segment\n\n      if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n        return;\n      } // If there are no checked buttons, set the current button to checked\n\n\n      if (!checked) {\n        this.value = clicked.value;\n        this.setCheckedClasses();\n      } // If the gesture began on the clicked button with the indicator\n      // then we should activate the indicator\n\n\n      if (this.value === clicked.value) {\n        this.setActivated(true);\n      }\n    }\n  }, {\n    key: \"getIndicator\",\n    value: function getIndicator(button) {\n      var root = button.shadowRoot || button;\n      return root.querySelector('.segment-button-indicator');\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(previous, current) {\n      var previousIndicator = this.getIndicator(previous);\n      var currentIndicator = this.getIndicator(current);\n\n      if (previousIndicator === null || currentIndicator === null) {\n        return;\n      }\n\n      var previousClientRect = previousIndicator.getBoundingClientRect();\n      var currentClientRect = currentIndicator.getBoundingClientRect();\n      var widthDelta = previousClientRect.width / currentClientRect.width;\n      var xPosition = previousClientRect.left - currentClientRect.left; // Scale the indicator width to match the previous indicator width\n      // and translate it on top of the previous indicator\n\n      var transform = \"translate3d(\".concat(xPosition, \"px, 0, 0) scaleX(\").concat(widthDelta, \")\");\n      writeTask(function () {\n        // Remove the transition before positioning on top of the previous indicator\n        currentIndicator.classList.remove('segment-button-indicator-animated');\n        currentIndicator.style.setProperty('transform', transform); // Force a repaint to ensure the transform happens\n\n        currentIndicator.getBoundingClientRect(); // Add the transition to move the indicator into place\n\n        currentIndicator.classList.add('segment-button-indicator-animated'); // Remove the transform to slide the indicator back to the button clicked\n\n        currentIndicator.style.setProperty('transform', '');\n      });\n      this.value = current.value;\n      this.setCheckedClasses();\n    }\n  }, {\n    key: \"setCheckedClasses\",\n    value: function setCheckedClasses() {\n      var _this5 = this;\n\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this5.value;\n      });\n      var next = index + 1;\n\n      var _iterator2 = _createForOfIteratorHelper(buttons),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var button = _step2.value;\n          button.classList.remove('segment-button-after-checked');\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (next < buttons.length) {\n        buttons[next].classList.add('segment-button-after-checked');\n      }\n    }\n  }, {\n    key: \"scrollActiveButtonIntoView\",\n    value: function scrollActiveButtonIntoView() {\n      var smoothScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var scrollable = this.scrollable,\n          value = this.value,\n          el = this.el;\n\n      if (scrollable) {\n        var buttons = this.getButtons();\n        var activeButton = buttons.find(function (button) {\n          return button.value === value;\n        });\n\n        if (activeButton !== undefined) {\n          var scrollContainerBox = el.getBoundingClientRect();\n          var activeButtonBox = activeButton.getBoundingClientRect();\n          /**\n           * Subtract the active button x position from the scroll\n           * container x position. This will give us the x position\n           * of the active button within the scroll container.\n           */\n\n          var activeButtonLeft = activeButtonBox.x - scrollContainerBox.x;\n          /**\n           * If we just used activeButtonLeft, then the active button\n           * would be aligned with the left edge of the scroll container.\n           * Instead, we want the segment button to be centered. As a result,\n           * we subtract half of the scroll container width. This will position\n           * the left edge of the active button at the midpoint of the scroll container.\n           * We then add half of the active button width. This will position the active\n           * button such that the midpoint of the active button is at the midpoint of the\n           * scroll container.\n           */\n\n          var centeredX = activeButtonLeft - scrollContainerBox.width / 2 + activeButtonBox.width / 2;\n          /**\n           * We intentionally use scrollBy here instead of scrollIntoView\n           * to avoid a WebKit bug where accelerated animations break\n           * when using scrollIntoView. Using scrollIntoView will cause the\n           * segment container to jump during the transition and then snap into place.\n           * This is because scrollIntoView can potentially cause parent element\n           * containers to also scroll. scrollBy does not have this same behavior, so\n           * we use this API instead.\n           *\n           * Note that if there is not enough scrolling space to center the element\n           * within the scroll container, the browser will attempt\n           * to center by as much as it can.\n           */\n\n          el.scrollBy({\n            top: 0,\n            left: centeredX,\n            behavior: smoothScroll ? 'smooth' : 'instant'\n          });\n        }\n      }\n    }\n  }, {\n    key: \"setNextIndex\",\n    value: function setNextIndex(detail) {\n      var _this6 = this;\n\n      var isEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var rtl = isRTL(this.el);\n      var activated = this.activated;\n      var buttons = this.getButtons();\n      var index = buttons.findIndex(function (button) {\n        return button.value === _this6.value;\n      });\n      var previous = buttons[index];\n      var current;\n      var nextIndex;\n\n      if (index === -1) {\n        return;\n      } // Get the element that the touch event started on in case\n      // it was the checked button, then we will move the indicator\n\n\n      var rect = previous.getBoundingClientRect();\n      var left = rect.left;\n      var width = rect.width; // Get the element that the gesture is on top of based on the currentX of the\n      // gesture event and the Y coordinate of the starting element, since the gesture\n      // can move up and down off of the segment\n\n      var currentX = detail.currentX;\n      var previousY = rect.top + rect.height / 2;\n      /**\n       * Segment can be used inside the shadow dom\n       * so doing document.elementFromPoint would never\n       * return a segment button in that instance.\n       * We use getRootNode to which will return the parent\n       * shadow root if used inside a shadow component and\n       * returns document otherwise.\n       */\n\n      var root = this.el.getRootNode();\n      var nextEl = root.elementFromPoint(currentX, previousY);\n      var decreaseIndex = rtl ? currentX > left + width : currentX < left;\n      var increaseIndex = rtl ? currentX < left : currentX > left + width; // If the indicator is currently activated then we have started the gesture\n      // on top of the checked button so we need to slide the indicator\n      // by checking the button next to it as we move\n\n      if (activated && !isEnd) {\n        // Decrease index, move left in LTR & right in RTL\n        if (decreaseIndex) {\n          var newIndex = index - 1;\n\n          if (newIndex >= 0) {\n            nextIndex = newIndex;\n          } // Increase index, moves right in LTR & left in RTL\n\n        } else if (increaseIndex) {\n          if (activated && !isEnd) {\n            var _newIndex = index + 1;\n\n            if (_newIndex < buttons.length) {\n              nextIndex = _newIndex;\n            }\n          }\n        }\n\n        if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n          current = buttons[nextIndex];\n        }\n      } // If the indicator is not activated then we will just set the indicator\n      // to the element where the gesture ended\n\n\n      if (!activated && isEnd) {\n        current = nextEl;\n      }\n\n      if (current != null) {\n        /**\n         * If current element is ion-segment then that means\n         * user tried to select a disabled ion-segment-button,\n         * and we should not update the ripple.\n         */\n        if (current.tagName === 'ION-SEGMENT') {\n          return false;\n        }\n\n        if (previous !== current) {\n          this.checkButton(previous, current);\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        segment: true\n      });\n    }\n  }, {\n    key: \"onKeyDown\",\n    value: function onKeyDown(ev) {\n      var rtl = isRTL(this.el);\n      var keyDownSelectsButton = this.selectOnFocus;\n      var current;\n\n      switch (ev.key) {\n        case 'ArrowRight':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n          break;\n\n        case 'ArrowLeft':\n          ev.preventDefault();\n          current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n          break;\n\n        case 'Home':\n          ev.preventDefault();\n          current = this.getSegmentButton('first');\n          break;\n\n        case 'End':\n          ev.preventDefault();\n          current = this.getSegmentButton('last');\n          break;\n\n        case ' ':\n        case 'Enter':\n          ev.preventDefault();\n          current = document.activeElement;\n          keyDownSelectsButton = true;\n      }\n\n      if (!current) {\n        return;\n      }\n\n      if (keyDownSelectsButton) {\n        var previous = this.checked;\n        this.checkButton(previous || current, current);\n\n        if (current !== previous) {\n          this.emitValueChange();\n        }\n      }\n\n      current.setFocus();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: 'ad0946134c8d465b760ad792655f1cb9922db520',\n        role: \"tablist\",\n        onClick: this.onClick,\n        class: createColorClasses(this.color, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'in-toolbar', hostContext('ion-toolbar', this.el)), 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), 'segment-activated', this.activated), 'segment-disabled', this.disabled), 'segment-scrollable', this.scrollable))\n      }, h(\"slot\", {\n        key: 'dcdb425bcda0d60acb7c317e5e671ed462715b4a',\n        onSlotchange: this.onSlottedItemsChange\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"color\": [\"colorChanged\"],\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n}();\n\nSegment.style = {\n  ios: IonSegmentIosStyle0,\n  md: IonSegmentMdStyle0\n};\nvar segmentButtonIosCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\\\"\\\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}.segment-button-indicator{-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px;left:0;right:0;top:0;bottom:0}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff)))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color-step-350, var(--ion-background-color, #fff))))}:host(.in-toolbar-color) .segment-button-indicator-background{background:var(--ion-color-contrast)}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}\";\nvar IonSegmentButtonIosStyle0 = segmentButtonIosCss;\nvar segmentButtonMdCss = \":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;grid-row:1;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;max-width:100%;line-height:22px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #0054e9));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}:host(.segment-button-layout-icon-end) ::slotted(ion-label){-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}\";\nvar IonSegmentButtonMdStyle0 = segmentButtonMdCss;\nvar ids = 0;\n\nvar SegmentButton = /*#__PURE__*/function () {\n  function SegmentButton(hostRef) {\n    var _this7 = this;\n\n    _classCallCheck(this, SegmentButton);\n\n    registerInstance(this, hostRef);\n    this.segmentEl = null;\n    this.inheritedAttributes = {};\n\n    this.updateStyle = function () {\n      forceUpdate(_this7);\n    };\n\n    this.updateState = function () {\n      var segmentEl = _this7.segmentEl;\n\n      if (segmentEl) {\n        _this7.checked = segmentEl.value === _this7.value;\n\n        if (segmentEl.disabled) {\n          _this7.disabled = true;\n        }\n      }\n    };\n\n    this.checked = false;\n    this.disabled = false;\n    this.layout = 'icon-top';\n    this.type = 'button';\n    this.value = 'ion-sb-' + ids++;\n  }\n\n  return _createClass(SegmentButton, [{\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      this.updateState();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var segmentEl = this.segmentEl = this.el.closest('ion-segment');\n\n      if (segmentEl) {\n        this.updateState();\n        addEventListener(segmentEl, 'ionSelect', this.updateState);\n        addEventListener(segmentEl, 'ionStyle', this.updateStyle);\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var segmentEl = this.segmentEl;\n\n      if (segmentEl) {\n        removeEventListener(segmentEl, 'ionSelect', this.updateState);\n        removeEventListener(segmentEl, 'ionStyle', this.updateStyle);\n        this.segmentEl = null;\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['aria-label']));\n    }\n  }, {\n    key: \"hasLabel\",\n    get: function get() {\n      return !!this.el.querySelector('ion-label');\n    }\n  }, {\n    key: \"hasIcon\",\n    get: function get() {\n      return !!this.el.querySelector('ion-icon');\n    }\n    /**\n     * @internal\n     * Focuses the native <button> element\n     * inside of ion-segment-button.\n     */\n\n  }, {\n    key: \"setFocus\",\n    value: function () {\n      var _setFocus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var nativeEl;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              nativeEl = this.nativeEl;\n\n              if (nativeEl !== undefined) {\n                nativeEl.focus();\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function setFocus() {\n        return _setFocus.apply(this, arguments);\n      }\n\n      return setFocus;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _class,\n          _this8 = this;\n\n      var checked = this.checked,\n          type = this.type,\n          disabled = this.disabled,\n          hasIcon = this.hasIcon,\n          hasLabel = this.hasLabel,\n          layout = this.layout,\n          segmentEl = this.segmentEl;\n      var mode = getIonMode(this);\n\n      var hasSegmentColor = function hasSegmentColor() {\n        return (segmentEl === null || segmentEl === void 0 ? void 0 : segmentEl.color) !== undefined;\n      };\n\n      return h(Host, {\n        key: '70cf5c7a3ae2620222c5250c644faf3cfc3b3e4e',\n        class: (_class = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_class, mode, true), 'in-toolbar', hostContext('ion-toolbar', this.el)), 'in-toolbar-color', hostContext('ion-toolbar[color]', this.el)), 'in-segment', hostContext('ion-segment', this.el)), 'in-segment-color', hasSegmentColor()), 'segment-button-has-label', hasLabel), 'segment-button-has-icon', hasIcon), 'segment-button-has-label-only', hasLabel && !hasIcon), 'segment-button-has-icon-only', hasIcon && !hasLabel), 'segment-button-disabled', disabled), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_class, 'segment-button-checked', checked), \"segment-button-layout-\".concat(layout), true), 'ion-activatable', true), 'ion-activatable-instant', true), 'ion-focusable', true))\n      }, h(\"button\", Object.assign({\n        key: 'a53c9f1e360934e8d2e90476642ba4507fc38ebd',\n        \"aria-selected\": checked ? 'true' : 'false',\n        role: \"tab\",\n        ref: function ref(el) {\n          return _this8.nativeEl = el;\n        },\n        type: type,\n        class: \"button-native\",\n        part: \"native\",\n        disabled: disabled\n      }, this.inheritedAttributes), h(\"span\", {\n        key: '7d8feda840d389941cc693f500b5eba0b39b41da',\n        class: \"button-inner\"\n      }, h(\"slot\", {\n        key: 'd9ae1eec45db253cbf573d29cd545658dd595d87'\n      })), mode === 'md' && h(\"ion-ripple-effect\", {\n        key: '49e6a16968709dc9b3fc77bc9fb99acb42fda88c'\n      })), h(\"div\", {\n        key: '4e3ea0989ed5205dbb03586e4facb439b05a92de',\n        part: \"indicator\",\n        class: {\n          'segment-button-indicator': true,\n          'segment-button-indicator-animated': true\n        }\n      }, h(\"div\", {\n        key: '65c72a151080998c1e548c87d4d4ebd5c7dda72f',\n        part: \"indicator-background\",\n        class: \"segment-button-indicator-background\"\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n}();\n\nSegmentButton.style = {\n  ios: IonSegmentButtonIosStyle0,\n  md: IonSegmentButtonMdStyle0\n};\nexport { Segment as ion_segment, SegmentButton as ion_segment_button };","map":null,"metadata":{},"sourceType":"module"}