{"ast":null,"code":"import _toConsumableArray from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as componentOnReady } from './helpers-da915de8.js'; // TODO(FW-2832): types\n\nvar attachComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(delegate, container, component, cssClasses, componentProps, inline) {\n    var _a, el;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!delegate) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", delegate.attachViewToDom(container, component, componentProps, cssClasses));\n\n        case 2:\n          if (!(!inline && typeof component !== 'string' && !(component instanceof HTMLElement))) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new Error('framework delegate is missing');\n\n        case 4:\n          el = typeof component === 'string' ? (_a = container.ownerDocument) === null || _a === void 0 ? void 0 : _a.createElement(component) : component;\n\n          if (cssClasses) {\n            cssClasses.forEach(function (c) {\n              return el.classList.add(c);\n            });\n          }\n\n          if (componentProps) {\n            Object.assign(el, componentProps);\n          }\n\n          container.appendChild(el);\n          _context.next = 10;\n          return new Promise(function (resolve) {\n            return componentOnReady(el, resolve);\n          });\n\n        case 10:\n          return _context.abrupt(\"return\", el);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function attachComponent(_x, _x2, _x3, _x4, _x5, _x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar detachComponent = function detachComponent(delegate, element) {\n  if (element) {\n    if (delegate) {\n      var container = element.parentElement;\n      return delegate.removeViewFromDom(container, element);\n    }\n\n    element.remove();\n  }\n\n  return Promise.resolve();\n};\n\nvar CoreDelegate = function CoreDelegate() {\n  var BaseComponent;\n  var Reference;\n\n  var attachViewToDom = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function (parentElement, userComponent) {\n      var userComponentProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var cssClasses = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, _b, ChildComponent, el, root, _el, app;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              BaseComponent = parentElement;\n\n              if (!userComponent) {\n                _context2.next = 11;\n                break;\n              }\n\n              /**\n               * If passing in the tag name, create\n               * the element otherwise just get a reference\n               * to the component.\n               */\n              el = typeof userComponent === 'string' ? (_a = BaseComponent.ownerDocument) === null || _a === void 0 ? void 0 : _a.createElement(userComponent) : userComponent;\n              /**\n               * Add any css classes passed in\n               * via the cssClasses prop on the overlay.\n               */\n\n              cssClasses.forEach(function (c) {\n                return el.classList.add(c);\n              });\n              /**\n               * Add any props passed in\n               * via the componentProps prop on the overlay.\n               */\n\n              Object.assign(el, userComponentProps);\n              /**\n               * Finally, append the component\n               * inside of the overlay component.\n               */\n\n              BaseComponent.appendChild(el);\n              ChildComponent = el;\n              _context2.next = 9;\n              return new Promise(function (resolve) {\n                return componentOnReady(el, resolve);\n              });\n\n            case 9:\n              _context2.next = 12;\n              break;\n\n            case 11:\n              if (BaseComponent.children.length > 0 && (BaseComponent.tagName === 'ION-MODAL' || BaseComponent.tagName === 'ION-POPOVER')) {\n                /**\n                 * The delegate host wrapper el is only needed for modals and popovers\n                 * because they allow the dev to provide custom content to the overlay.\n                 */\n                root = ChildComponent = BaseComponent.children[0];\n\n                if (!root.classList.contains('ion-delegate-host')) {\n                  /**\n                   * If the root element is not a delegate host, it means\n                   * that the overlay has not been presented yet and we need\n                   * to create the containing element with the specified classes.\n                   */\n                  _el = (_b = BaseComponent.ownerDocument) === null || _b === void 0 ? void 0 : _b.createElement('div'); // Add a class to track if the root element was created by the delegate.\n\n                  _el.classList.add('ion-delegate-host');\n\n                  cssClasses.forEach(function (c) {\n                    return _el.classList.add(c);\n                  }); // Move each child from the original template to the new parent element.\n\n                  _el.append.apply(_el, _toConsumableArray(BaseComponent.children)); // Append the new parent element to the original parent element.\n\n\n                  BaseComponent.appendChild(_el);\n                  /**\n                   * Update the ChildComponent to be the\n                   * newly created div in the event that one\n                   * does not already exist.\n                   */\n\n                  ChildComponent = _el;\n                }\n              }\n\n            case 12:\n              /**\n               * Get the root of the app and\n               * add the overlay there.\n               */\n              app = document.querySelector('ion-app') || document.body;\n              /**\n               * Create a placeholder comment so that\n               * we can return this component to where\n               * it was previously.\n               */\n\n              Reference = document.createComment('ionic teleport');\n              BaseComponent.parentNode.insertBefore(Reference, BaseComponent);\n              app.appendChild(BaseComponent);\n              /**\n               * We return the child component rather than the overlay\n               * reference itself since modal and popover will\n               * use this to wait for any Ionic components in the child view\n               * to be ready (i.e. componentOnReady) when using the\n               * lazy loaded component bundle.\n               *\n               * However, we fall back to returning BaseComponent\n               * in the event that a modal or popover is presented\n               * with no child content.\n               */\n\n              return _context2.abrupt(\"return\", ChildComponent !== null && ChildComponent !== void 0 ? ChildComponent : BaseComponent);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      })();\n    });\n\n    return function attachViewToDom(_x7, _x8) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var removeViewFromDom = function removeViewFromDom() {\n    /**\n     * Return component to where it was previously in the DOM.\n     */\n    if (BaseComponent && Reference) {\n      Reference.parentNode.insertBefore(BaseComponent, Reference);\n      Reference.remove();\n    }\n\n    return Promise.resolve();\n  };\n\n  return {\n    attachViewToDom: attachViewToDom,\n    removeViewFromDom: removeViewFromDom\n  };\n};\n\nexport { CoreDelegate as C, attachComponent as a, detachComponent as d };","map":null,"metadata":{},"sourceType":"module"}