{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as writeTask, r as registerInstance, d as createEvent, e as readTask, h, i as getElement, f as Host } from './index-7a952e7a.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-fe2083dc.js';\nimport { I as ION_CONTENT_CLASS_SELECTOR, b as ION_CONTENT_ELEMENT_SELECTOR, p as printIonContentErrorMsg, g as getScrollElement } from './index-5cc724f3.js';\nimport { t as transitionEndAsync, c as componentOnReady, j as clamp, g as getElementRoot, r as raf } from './helpers-da915de8.js';\nimport { d as hapticImpact, I as ImpactStyle } from './haptic-ac164e4c.js';\nimport { b as getIonMode, c as config } from './ionic-global-81a1064f.js';\nimport { c as createAnimation } from './animation-eab5a4ca.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-49c88215.js';\nimport { h as caretBackSharp, i as arrowDown } from './index-e2cf2ceb.js';\nimport { S as SPINNERS } from './spinner-configs-964f7cf3.js';\nimport './index-9b0d46f4.js';\nimport './capacitor-59395cbd.js';\nimport './index-a5d50daf.js';\n\nvar getRefresherAnimationType = function getRefresherAnimationType(contentEl) {\n  var previousSibling = contentEl.previousElementSibling;\n  var hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\n  return hasHeader ? 'translate' : 'scale';\n};\n\nvar createPullingAnimation = function createPullingAnimation(type, pullingSpinner, refresherEl) {\n  return type === 'scale' ? createScaleAnimation(pullingSpinner, refresherEl) : createTranslateAnimation(pullingSpinner, refresherEl);\n};\n\nvar createBaseAnimation = function createBaseAnimation(pullingRefresherIcon) {\n  var spinner = pullingRefresherIcon.querySelector('ion-spinner');\n  var circle = spinner.shadowRoot.querySelector('circle');\n  var spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\n  var arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\n  var arrow = arrowContainer ? arrowContainer.querySelector('ion-icon') : null;\n  var baseAnimation = createAnimation().duration(1000).easing('ease-out');\n  var spinnerArrowContainerAnimation = createAnimation().addElement(spinnerArrowContainer).keyframes([{\n    offset: 0,\n    opacity: '0.3'\n  }, {\n    offset: 0.45,\n    opacity: '0.3'\n  }, {\n    offset: 0.55,\n    opacity: '1'\n  }, {\n    offset: 1,\n    opacity: '1'\n  }]);\n  var circleInnerAnimation = createAnimation().addElement(circle).keyframes([{\n    offset: 0,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.2,\n    strokeDasharray: '1px, 200px'\n  }, {\n    offset: 0.55,\n    strokeDasharray: '100px, 200px'\n  }, {\n    offset: 1,\n    strokeDasharray: '100px, 200px'\n  }]);\n  var circleOuterAnimation = createAnimation().addElement(spinner).keyframes([{\n    offset: 0,\n    transform: 'rotate(-90deg)'\n  }, {\n    offset: 1,\n    transform: 'rotate(210deg)'\n  }]);\n  /**\n   * Only add arrow animation if present\n   * this allows users to customize the spinners\n   * without errors being thrown\n   */\n\n  if (arrowContainer && arrow) {\n    var arrowContainerAnimation = createAnimation().addElement(arrowContainer).keyframes([{\n      offset: 0,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.3,\n      transform: 'rotate(0deg)'\n    }, {\n      offset: 0.55,\n      transform: 'rotate(280deg)'\n    }, {\n      offset: 1,\n      transform: 'rotate(400deg)'\n    }]);\n    var arrowAnimation = createAnimation().addElement(arrow).keyframes([{\n      offset: 0,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.3,\n      transform: 'translateX(2px) scale(0)'\n    }, {\n      offset: 0.55,\n      transform: 'translateX(-1.5px) scale(1)'\n    }, {\n      offset: 1,\n      transform: 'translateX(-1.5px) scale(1)'\n    }]);\n    baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\n  }\n\n  return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\n};\n\nvar createScaleAnimation = function createScaleAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"scale(0) translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'scale(1) translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\n\nvar createTranslateAnimation = function createTranslateAnimation(pullingRefresherIcon, refresherEl) {\n  /**\n   * Do not take the height of the refresher icon\n   * because at this point the DOM has not updated,\n   * so the refresher icon is still hidden with\n   * display: none.\n   * The `ion-refresher` container height\n   * is roughly the amount we need to offset\n   * the icon by when pulling down.\n   */\n  var height = refresherEl.clientHeight;\n  var spinnerAnimation = createAnimation().addElement(pullingRefresherIcon).keyframes([{\n    offset: 0,\n    transform: \"translateY(-\".concat(height, \"px)\")\n  }, {\n    offset: 1,\n    transform: 'translateY(100px)'\n  }]);\n  return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\n};\n\nvar createSnapBackAnimation = function createSnapBackAnimation(pullingRefresherIcon) {\n  return createAnimation().duration(125).addElement(pullingRefresherIcon).fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\n}; // iOS Native Refresher\n// -----------------------------\n\n\nvar setSpinnerOpacity = function setSpinnerOpacity(spinner, opacity) {\n  spinner.style.setProperty('opacity', opacity.toString());\n};\n\nvar handleScrollWhilePulling = function handleScrollWhilePulling(ticks, numTicks, pullAmount) {\n  var max = 1;\n  writeTask(function () {\n    ticks.forEach(function (el, i) {\n      /**\n       * Compute the opacity of each tick\n       * mark as a percentage of the pullAmount\n       * offset by max / numTicks so\n       * the tick marks are shown staggered.\n       */\n      var min = i * (max / numTicks);\n      var range = max - min;\n      var start = pullAmount - min;\n      var progression = clamp(0, start / range, 1);\n      el.style.setProperty('opacity', progression.toString());\n    });\n  });\n};\n\nvar handleScrollWhileRefreshing = function handleScrollWhileRefreshing(spinner, lastVelocityY) {\n  writeTask(function () {\n    // If user pulls down quickly, the spinner should spin faster\n    spinner.style.setProperty('--refreshing-rotation-duration', lastVelocityY >= 1.0 ? '0.5s' : '2s');\n    spinner.style.setProperty('opacity', '1');\n  });\n};\n\nvar translateElement = function translateElement(el, value) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n  if (!el) {\n    return Promise.resolve();\n  }\n\n  var trans = transitionEndAsync(el, duration);\n  writeTask(function () {\n    el.style.setProperty('transition', \"\".concat(duration, \"ms all ease-out\"));\n\n    if (value === undefined) {\n      el.style.removeProperty('transform');\n    } else {\n      el.style.setProperty('transform', \"translate3d(0px, \".concat(value, \", 0px)\"));\n    }\n  });\n  return trans;\n}; // Utils\n// -----------------------------\n\n/**\n * In order to use the native iOS refresher the device must support rubber band scrolling.\n * As part of this, we need to exclude Desktop Safari because it has a slightly different rubber band effect that is not compatible with the native refresher in Ionic.\n *\n * We also need to be careful not to include devices that spoof their user agent.\n * For example, when using iOS emulation in Chrome the user agent will be spoofed such that\n * navigator.maxTouchPointer > 0. To work around this,\n * we check to see if the apple-pay-logo is supported as a named image which is only\n * true on Apple devices.\n *\n * We previously checked referencEl.style.webkitOverflowScrolling to explicitly check\n * for rubber band support. However, this property was removed on iPadOS and it's possible\n * that this will be removed on iOS in the future too.\n *\n */\n\n\nvar supportsRubberBandScrolling = function supportsRubberBandScrolling() {\n  return navigator.maxTouchPoints > 0 && CSS.supports('background: -webkit-named-image(apple-pay-logo-black)');\n};\n\nvar shouldUseNativeRefresher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(referenceEl, mode) {\n    var refresherContent, pullingSpinner, refreshingSpinner;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          refresherContent = referenceEl.querySelector('ion-refresher-content');\n\n          if (refresherContent) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Promise.resolve(false));\n\n        case 3:\n          _context.next = 5;\n          return new Promise(function (resolve) {\n            return componentOnReady(refresherContent, resolve);\n          });\n\n        case 5:\n          pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n          refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n          return _context.abrupt(\"return\", pullingSpinner !== null && refreshingSpinner !== null && (mode === 'ios' && supportsRubberBandScrolling() || mode === 'md'));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function shouldUseNativeRefresher(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar refresherIosCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native ion-spinner{width:32px;height:32px;color:var(--ion-color-step-450, var(--ion-background-color-step-450, #747577))}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0) rotate(180deg);transform:scale(0) rotate(180deg);-webkit-transition:300ms;transition:300ms}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\nvar IonRefresherIosStyle0 = refresherIosCss;\nvar refresherMdCss = \"ion-refresher{top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}ion-refresher{inset-inline-start:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}@supports selector(:dir(rtl)){.refresher-pulling-icon:dir(rtl),.refresher-refreshing-icon:dir(rtl){-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #0054e9)}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #0054e9);font-size:12px}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;border-radius:100%;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #ececec));background:var(--ion-color-step-250, var(--ion-background-color-step-250, #ffffff));-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}\";\nvar IonRefresherMdStyle0 = refresherMdCss;\n\nvar Refresher = /*#__PURE__*/function () {\n  function Refresher(hostRef) {\n    _classCallCheck(this, Refresher);\n\n    registerInstance(this, hostRef);\n    this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n    this.ionPull = createEvent(this, \"ionPull\", 7);\n    this.ionStart = createEvent(this, \"ionStart\", 7);\n    this.appliedStyles = false;\n    this.didStart = false;\n    this.progress = 0;\n    this.pointerDown = false;\n    this.needsCompletion = false;\n    this.didRefresh = false;\n    this.contentFullscreen = false;\n    this.lastVelocityY = 0;\n    this.animations = [];\n    this.nativeRefresher = false;\n    this.state = 1\n    /* RefresherState.Inactive */\n    ;\n    this.pullMin = 60;\n    this.pullMax = this.pullMin + 60;\n    this.closeDuration = '280ms';\n    this.snapbackDuration = '280ms';\n    this.pullFactor = 1;\n    this.disabled = false;\n  }\n\n  return _createClass(Refresher, [{\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      if (this.gesture) {\n        this.gesture.enable(!this.disabled);\n      }\n    }\n  }, {\n    key: \"checkNativeRefresher\",\n    value: function () {\n      var _checkNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var useNativeRefresher, contentEl;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return shouldUseNativeRefresher(this.el, getIonMode(this));\n\n            case 2:\n              useNativeRefresher = _context2.sent;\n\n              if (useNativeRefresher && !this.nativeRefresher) {\n                contentEl = this.el.closest('ion-content');\n                this.setupNativeRefresher(contentEl);\n              } else if (!useNativeRefresher) {\n                this.destroyNativeRefresher();\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function checkNativeRefresher() {\n        return _checkNativeRefresher.apply(this, arguments);\n      }\n\n      return checkNativeRefresher;\n    }()\n  }, {\n    key: \"destroyNativeRefresher\",\n    value: function destroyNativeRefresher() {\n      if (this.scrollEl && this.scrollListenerCallback) {\n        this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\n        this.scrollListenerCallback = undefined;\n      }\n\n      this.nativeRefresher = false;\n    }\n  }, {\n    key: \"resetNativeRefresher\",\n    value: function () {\n      var _resetNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(el, state) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this.state = state;\n\n              if (!(getIonMode(this) === 'ios')) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 4;\n              return translateElement(el, undefined, 300);\n\n            case 4:\n              _context3.next = 8;\n              break;\n\n            case 6:\n              _context3.next = 8;\n              return transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'), 200);\n\n            case 8:\n              this.didRefresh = false;\n              this.needsCompletion = false;\n              this.pointerDown = false;\n              this.animations.forEach(function (ani) {\n                return ani.destroy();\n              });\n              this.animations = [];\n              this.progress = 0;\n              this.state = 1\n              /* RefresherState.Inactive */\n              ;\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n\n      function resetNativeRefresher(_x3, _x4) {\n        return _resetNativeRefresher.apply(this, arguments);\n      }\n\n      return resetNativeRefresher;\n    }()\n  }, {\n    key: \"setupiOSNativeRefresher\",\n    value: function () {\n      var _setupiOSNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(pullingSpinner, refreshingSpinner) {\n        var _this = this;\n\n        var ticks, MAX_PULL, NUM_TICKS;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this.elementToTransform = this.scrollEl;\n              ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\n              MAX_PULL = this.scrollEl.clientHeight * 0.16;\n              NUM_TICKS = ticks.length;\n              writeTask(function () {\n                return ticks.forEach(function (el) {\n                  return el.style.setProperty('animation', 'none');\n                });\n              });\n\n              this.scrollListenerCallback = function () {\n                // If pointer is not on screen or refresher is not active, ignore scroll\n                if (!_this.pointerDown && _this.state === 1\n                /* RefresherState.Inactive */\n                ) {\n                  return;\n                }\n\n                readTask(function () {\n                  // PTR should only be active when overflow scrolling at the top\n                  var scrollTop = _this.scrollEl.scrollTop;\n                  var refresherHeight = _this.el.clientHeight;\n\n                  if (scrollTop > 0) {\n                    /**\n                     * If refresher is refreshing and user tries to scroll\n                     * progressively fade refresher out/in\n                     */\n                    if (_this.state === 8\n                    /* RefresherState.Refreshing */\n                    ) {\n                      var ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\n                      writeTask(function () {\n                        return setSpinnerOpacity(refreshingSpinner, 1 - ratio);\n                      });\n                      return;\n                    }\n\n                    return;\n                  }\n\n                  if (_this.pointerDown) {\n                    if (!_this.didStart) {\n                      _this.didStart = true;\n\n                      _this.ionStart.emit();\n                    } // emit \"pulling\" on every move\n\n\n                    if (_this.pointerDown) {\n                      _this.ionPull.emit();\n                    }\n                  }\n                  /**\n                   * We want to delay the start of this gesture by ~30px\n                   * when initially pulling down so the refresher does not\n                   * overlap with the content. But when letting go of the\n                   * gesture before the refresher completes, we want the\n                   * refresher tick marks to quickly fade out.\n                   */\n\n\n                  var offset = _this.didStart ? 30 : 0;\n                  var pullAmount = _this.progress = clamp(0, (Math.abs(scrollTop) - offset) / MAX_PULL, 1);\n                  var shouldShowRefreshingSpinner = _this.state === 8\n                  /* RefresherState.Refreshing */\n                  || pullAmount === 1;\n\n                  if (shouldShowRefreshingSpinner) {\n                    if (_this.pointerDown) {\n                      handleScrollWhileRefreshing(refreshingSpinner, _this.lastVelocityY);\n                    }\n\n                    if (!_this.didRefresh) {\n                      _this.beginRefresh();\n\n                      _this.didRefresh = true;\n                      hapticImpact({\n                        style: ImpactStyle.Light\n                      });\n                      /**\n                       * Translate the content element otherwise when pointer is removed\n                       * from screen the scroll content will bounce back over the refresher\n                       */\n\n                      if (!_this.pointerDown) {\n                        translateElement(_this.elementToTransform, \"\".concat(refresherHeight, \"px\"));\n                      }\n                    }\n                  } else {\n                    _this.state = 2\n                    /* RefresherState.Pulling */\n                    ;\n                    handleScrollWhilePulling(ticks, NUM_TICKS, pullAmount);\n                  }\n                });\n              };\n\n              this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\n              _context4.next = 9;\n              return import('./index-39782642.js');\n\n            case 9:\n              this.gesture = _context4.sent.createGesture({\n                el: this.scrollEl,\n                gestureName: 'refresher',\n                gesturePriority: 31,\n                direction: 'y',\n                threshold: 5,\n                onStart: function onStart() {\n                  _this.pointerDown = true;\n\n                  if (!_this.didRefresh) {\n                    translateElement(_this.elementToTransform, '0px');\n                  }\n                  /**\n                   * If the content had `display: none` when\n                   * the refresher was initialized, its clientHeight\n                   * will be 0. When the gesture starts, the content\n                   * will be visible, so try to get the correct\n                   * client height again. This is most common when\n                   * using the refresher in an ion-menu.\n                   */\n\n\n                  if (MAX_PULL === 0) {\n                    MAX_PULL = _this.scrollEl.clientHeight * 0.16;\n                  }\n                },\n                onMove: function onMove(ev) {\n                  _this.lastVelocityY = ev.velocityY;\n                },\n                onEnd: function onEnd() {\n                  _this.pointerDown = false;\n                  _this.didStart = false;\n\n                  if (_this.needsCompletion) {\n                    _this.resetNativeRefresher(_this.elementToTransform, 32\n                    /* RefresherState.Completing */\n                    );\n\n                    _this.needsCompletion = false;\n                  } else if (_this.didRefresh) {\n                    readTask(function () {\n                      return translateElement(_this.elementToTransform, \"\".concat(_this.el.clientHeight, \"px\"));\n                    });\n                  }\n                }\n              });\n              this.disabledChanged();\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n\n      function setupiOSNativeRefresher(_x5, _x6) {\n        return _setupiOSNativeRefresher.apply(this, arguments);\n      }\n\n      return setupiOSNativeRefresher;\n    }()\n  }, {\n    key: \"setupMDNativeRefresher\",\n    value: function () {\n      var _setupMDNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(contentEl, pullingSpinner, refreshingSpinner) {\n        var _this2 = this;\n\n        var circle, pullingRefresherIcon, refreshingCircle;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              circle = getElementRoot(pullingSpinner).querySelector('circle');\n              pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\n              refreshingCircle = getElementRoot(refreshingSpinner).querySelector('circle');\n\n              if (circle !== null && refreshingCircle !== null) {\n                writeTask(function () {\n                  circle.style.setProperty('animation', 'none'); // This lines up the animation on the refreshing spinner with the pulling spinner\n\n                  refreshingSpinner.style.setProperty('animation-delay', '-655ms');\n                  refreshingCircle.style.setProperty('animation-delay', '-655ms');\n                });\n              }\n\n              _context6.next = 6;\n              return import('./index-39782642.js');\n\n            case 6:\n              this.gesture = _context6.sent.createGesture({\n                el: this.scrollEl,\n                gestureName: 'refresher',\n                gesturePriority: 31,\n                direction: 'y',\n                threshold: 5,\n                canStart: function canStart() {\n                  return _this2.state !== 8\n                  /* RefresherState.Refreshing */\n                  && _this2.state !== 32\n                  /* RefresherState.Completing */\n                  && _this2.scrollEl.scrollTop === 0;\n                },\n                onStart: function onStart(ev) {\n                  _this2.progress = 0;\n                  ev.data = {\n                    animation: undefined,\n                    didStart: false,\n                    cancelled: false\n                  };\n                },\n                onMove: function onMove(ev) {\n                  if (ev.velocityY < 0 && _this2.progress === 0 && !ev.data.didStart || ev.data.cancelled) {\n                    ev.data.cancelled = true;\n                    return;\n                  }\n\n                  if (!ev.data.didStart) {\n                    ev.data.didStart = true;\n                    _this2.state = 2\n                    /* RefresherState.Pulling */\n                    ; // When ion-refresher is being used with a custom scroll target, the overflow styles need to be applied directly instead of via a css variable\n\n                    var scrollEl = _this2.scrollEl;\n                    var overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                    writeTask(function () {\n                      return scrollEl.style.setProperty(overflowProperty, 'hidden');\n                    });\n                    var animationType = getRefresherAnimationType(contentEl);\n                    var animation = createPullingAnimation(animationType, pullingRefresherIcon, _this2.el);\n                    ev.data.animation = animation;\n                    animation.progressStart(false, 0);\n\n                    _this2.ionStart.emit();\n\n                    _this2.animations.push(animation);\n\n                    return;\n                  } // Since we are using an easing curve, slow the gesture tracking down a bit\n\n\n                  _this2.progress = clamp(0, ev.deltaY / 180 * 0.5, 1);\n                  ev.data.animation.progressStep(_this2.progress);\n\n                  _this2.ionPull.emit();\n                },\n                onEnd: function onEnd(ev) {\n                  if (!ev.data.didStart) {\n                    return;\n                  }\n\n                  _this2.gesture.enable(false);\n\n                  var scrollEl = _this2.scrollEl;\n                  var overflowProperty = scrollEl.matches(ION_CONTENT_CLASS_SELECTOR) ? 'overflow' : '--overflow';\n                  writeTask(function () {\n                    return scrollEl.style.removeProperty(overflowProperty);\n                  });\n\n                  if (_this2.progress <= 0.4) {\n                    ev.data.animation.progressEnd(0, _this2.progress, 500).onFinish(function () {\n                      _this2.animations.forEach(function (ani) {\n                        return ani.destroy();\n                      });\n\n                      _this2.animations = [];\n\n                      _this2.gesture.enable(true);\n\n                      _this2.state = 1\n                      /* RefresherState.Inactive */\n                      ;\n                    });\n                    return;\n                  }\n\n                  var progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], _this2.progress)[0];\n                  var snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\n\n                  _this2.animations.push(snapBackAnimation);\n\n                  writeTask( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) switch (_context5.prev = _context5.next) {\n                        case 0:\n                          pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', \"\".concat(progress * 100, \"px\"));\n                          ev.data.animation.progressEnd();\n                          _context5.next = 4;\n                          return snapBackAnimation.play();\n\n                        case 4:\n                          _this2.beginRefresh();\n\n                          ev.data.animation.destroy();\n\n                          _this2.gesture.enable(true);\n\n                        case 7:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }, _callee5);\n                  })));\n                }\n              });\n              this.disabledChanged();\n\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n\n      function setupMDNativeRefresher(_x7, _x8, _x9) {\n        return _setupMDNativeRefresher.apply(this, arguments);\n      }\n\n      return setupMDNativeRefresher;\n    }()\n  }, {\n    key: \"setupNativeRefresher\",\n    value: function () {\n      var _setupNativeRefresher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(contentEl) {\n        var pullingSpinner, refreshingSpinner;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl)) {\n                _context7.next = 2;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 2:\n              /**\n               * If using non-native refresher before make sure\n               * we clean up any old CSS. This can happen when\n               * a user manually calls the refresh method in a\n               * component create callback before the native\n               * refresher is setup.\n               */\n              this.setCss(0, '', false, '');\n              this.nativeRefresher = true;\n              pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\n              refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\n\n              if (getIonMode(this) === 'ios') {\n                this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\n              } else {\n                this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\n              }\n\n            case 7:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n\n      function setupNativeRefresher(_x10) {\n        return _setupNativeRefresher.apply(this, arguments);\n      }\n\n      return setupNativeRefresher;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.checkNativeRefresher();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this3 = this;\n\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.el.getAttribute('slot') !== 'fixed')) {\n                _context9.next = 3;\n                break;\n              }\n\n              console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n              return _context9.abrupt(\"return\");\n\n            case 3:\n              contentEl = this.el.closest(ION_CONTENT_ELEMENT_SELECTOR);\n\n              if (contentEl) {\n                _context9.next = 7;\n                break;\n              }\n\n              printIonContentErrorMsg(this.el);\n              return _context9.abrupt(\"return\");\n\n            case 7:\n              /**\n               * Waits for the content to be ready before querying the scroll\n               * or the background content element.\n               */\n              componentOnReady(contentEl, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n                var customScrollTarget;\n                return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                  while (1) switch (_context8.prev = _context8.next) {\n                    case 0:\n                      customScrollTarget = contentEl.querySelector(ION_CONTENT_CLASS_SELECTOR);\n                      /**\n                       * Query the custom scroll target (if available), first. In refresher implementations,\n                       * the ion-refresher element will always be a direct child of ion-content (slot=\"fixed\"). By\n                       * querying the custom scroll target first and falling back to the ion-content element,\n                       * the correct scroll element will be returned by the implementation.\n                       */\n\n                      _context8.next = 3;\n                      return getScrollElement(customScrollTarget !== null && customScrollTarget !== void 0 ? customScrollTarget : contentEl);\n\n                    case 3:\n                      _this3.scrollEl = _context8.sent;\n                      _context8.next = 6;\n                      return contentEl.getBackgroundElement();\n\n                    case 6:\n                      _this3.backgroundContentEl = _context8.sent;\n\n                      /**\n                       * Check if the content element is fullscreen to apply the correct styles\n                       * when the refresher is refreshing. Otherwise, the refresher will be\n                       * hidden because it is positioned behind the background content element.\n                       */\n                      _this3.contentFullscreen = contentEl.fullscreen;\n                      _context8.next = 10;\n                      return shouldUseNativeRefresher(_this3.el, getIonMode(_this3));\n\n                    case 10:\n                      if (!_context8.sent) {\n                        _context8.next = 14;\n                        break;\n                      }\n\n                      _this3.setupNativeRefresher(contentEl);\n\n                      _context8.next = 18;\n                      break;\n\n                    case 14:\n                      _context8.next = 16;\n                      return import('./index-39782642.js');\n\n                    case 16:\n                      _this3.gesture = _context8.sent.createGesture({\n                        el: contentEl,\n                        gestureName: 'refresher',\n                        gesturePriority: 31,\n                        direction: 'y',\n                        threshold: 20,\n                        passive: false,\n                        canStart: function canStart() {\n                          return _this3.canStart();\n                        },\n                        onStart: function onStart() {\n                          return _this3.onStart();\n                        },\n                        onMove: function onMove(ev) {\n                          return _this3.onMove(ev);\n                        },\n                        onEnd: function onEnd() {\n                          return _this3.onEnd();\n                        }\n                      });\n\n                      _this3.disabledChanged();\n\n                    case 18:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }, _callee8);\n              })));\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.destroyNativeRefresher();\n      this.scrollEl = undefined;\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function () {\n      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this4 = this;\n\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (this.nativeRefresher) {\n                this.needsCompletion = true; // Do not reset scroll el until user removes pointer from screen\n\n                if (!this.pointerDown) {\n                  raf(function () {\n                    return raf(function () {\n                      return _this4.resetNativeRefresher(_this4.elementToTransform, 32\n                      /* RefresherState.Completing */\n                      );\n                    });\n                  });\n                }\n              } else {\n                this.close(32\n                /* RefresherState.Completing */\n                , '120ms');\n              }\n\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n\n      function complete() {\n        return _complete.apply(this, arguments);\n      }\n\n      return complete;\n    }()\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _this5 = this;\n\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (this.nativeRefresher) {\n                // Do not reset scroll el until user removes pointer from screen\n                if (!this.pointerDown) {\n                  raf(function () {\n                    return raf(function () {\n                      return _this5.resetNativeRefresher(_this5.elementToTransform, 16\n                      /* RefresherState.Cancelling */\n                      );\n                    });\n                  });\n                }\n              } else {\n                this.close(16\n                /* RefresherState.Cancelling */\n                , '');\n              }\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      return Promise.resolve(this.progress);\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      if (!this.scrollEl) {\n        return false;\n      }\n\n      if (this.state !== 1\n      /* RefresherState.Inactive */\n      ) {\n        return false;\n      } // if the scrollTop is greater than zero then it's\n      // not possible to pull the content down yet\n\n\n      if (this.scrollEl.scrollTop > 0) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.progress = 0;\n      this.state = 1\n      /* RefresherState.Inactive */\n      ;\n      this.memoizeOverflowStyle();\n      /**\n       * If the content is fullscreen, then we need to\n       * set the offset-top style on the background content\n       * element to ensure that the refresher is shown.\n       */\n\n      if (this.contentFullscreen && this.backgroundContentEl) {\n        this.backgroundContentEl.style.setProperty('--offset-top', '0px');\n      }\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      if (!this.scrollEl) {\n        return;\n      } // this method can get called like a bazillion times per second,\n      // so it's built to be as efficient as possible, and does its\n      // best to do any DOM read/writes only when absolutely necessary\n      // if multi-touch then get out immediately\n\n\n      var ev = detail.event;\n\n      if (ev.touches !== undefined && ev.touches.length > 1) {\n        return;\n      } // do nothing if it's actively refreshing\n      // or it's in the way of closing\n      // or this was never a startY\n\n\n      if ((this.state & 56\n      /* RefresherState._BUSY_ */\n      ) !== 0) {\n        return;\n      }\n\n      var pullFactor = Number.isNaN(this.pullFactor) || this.pullFactor < 0 ? 1 : this.pullFactor;\n      var deltaY = detail.deltaY * pullFactor; // don't bother if they're scrolling up\n      // and have not already started dragging\n\n      if (deltaY <= 0) {\n        // the current Y is higher than the starting Y\n        // so they scrolled up enough to be ignored\n        this.progress = 0;\n        this.state = 1\n        /* RefresherState.Inactive */\n        ;\n\n        if (this.appliedStyles) {\n          // reset the styles only if they were applied\n          this.setCss(0, '', false, '');\n          return;\n        }\n\n        return;\n      }\n\n      if (this.state === 1\n      /* RefresherState.Inactive */\n      ) {\n        // this refresh is not already actively pulling down\n        // get the content's scrollTop\n        var scrollHostScrollTop = this.scrollEl.scrollTop; // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n\n        if (scrollHostScrollTop > 0) {\n          this.progress = 0;\n          return;\n        } // content scrolled all the way to the top, and dragging down\n\n\n        this.state = 2\n        /* RefresherState.Pulling */\n        ;\n      } // prevent native scroll events\n\n\n      if (ev.cancelable) {\n        ev.preventDefault();\n      } // the refresher is actively pulling at this point\n      // move the scroll element within the content element\n\n\n      this.setCss(deltaY, '0ms', true, '');\n\n      if (deltaY === 0) {\n        // don't continue if there's no delta yet\n        this.progress = 0;\n        return;\n      }\n\n      var pullMin = this.pullMin; // set pull progress\n\n      this.progress = deltaY / pullMin; // emit \"start\" if it hasn't started yet\n\n      if (!this.didStart) {\n        this.didStart = true;\n        this.ionStart.emit();\n      } // emit \"pulling\" on every move\n\n\n      this.ionPull.emit(); // do nothing if the delta is less than the pull threshold\n\n      if (deltaY < pullMin) {\n        // ensure it stays in the pulling state, cuz its not ready yet\n        this.state = 2\n        /* RefresherState.Pulling */\n        ;\n        return;\n      }\n\n      if (deltaY > this.pullMax) {\n        // they pulled farther than the max, so kick off the refresh\n        this.beginRefresh();\n        return;\n      } // pulled farther than the pull min!!\n      // it is now in the `ready` state!!\n      // if they let go then it'll refresh, kerpow!!\n\n\n      this.state = 4\n      /* RefresherState.Ready */\n      ;\n      return;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      // only run in a zone when absolutely necessary\n      if (this.state === 4\n      /* RefresherState.Ready */\n      ) {\n        // they pulled down far enough, so it's ready to refresh\n        this.beginRefresh();\n      } else if (this.state === 2\n      /* RefresherState.Pulling */\n      ) {\n        // they were pulling down, but didn't pull down far enough\n        // set the content back to it's original location\n        // and close the refresher\n        // set that the refresh is actively cancelling\n        this.cancel();\n      } else if (this.state === 1\n      /* RefresherState.Inactive */\n      ) {\n        /**\n         * The pull to refresh gesture was aborted\n         * so we should immediately restore any overflow styles\n         * that have been modified. Do not call this.cancel\n         * because the styles will only be reset after a timeout.\n         * If the gesture is aborted then scrolling should be\n         * available right away.\n         */\n        this.restoreOverflowStyle();\n      }\n    }\n  }, {\n    key: \"beginRefresh\",\n    value: function beginRefresh() {\n      // assumes we're already back in a zone\n      // they pulled down far enough, so it's ready to refresh\n      this.state = 8\n      /* RefresherState.Refreshing */\n      ; // place the content in a hangout position while it thinks\n\n      this.setCss(this.pullMin, this.snapbackDuration, true, ''); // emit \"refresh\" because it was pulled down far enough\n      // and they let go to begin refreshing\n\n      this.ionRefresh.emit({\n        complete: this.complete.bind(this)\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close(state, delay) {\n      var _this6 = this;\n\n      // create fallback timer incase something goes wrong with transitionEnd event\n      setTimeout(function () {\n        var _a;\n\n        _this6.state = 1\n        /* RefresherState.Inactive */\n        ;\n        _this6.progress = 0;\n        _this6.didStart = false;\n        /**\n         * Reset any overflow styles so the\n         * user can scroll again.\n         */\n\n        _this6.setCss(0, '0ms', false, '', true);\n        /**\n         * Reset the offset-top style on the background content\n         * when the refresher is no longer refreshing and the\n         * content is fullscreen.\n         *\n         * This ensures that the behavior of background content\n         * does not change when refreshing is complete.\n         */\n\n\n        if (_this6.contentFullscreen && _this6.backgroundContentEl) {\n          (_a = _this6.backgroundContentEl) === null || _a === void 0 ? void 0 : _a.style.removeProperty('--offset-top');\n        }\n      }, 600); // reset the styles on the scroll element\n      // set that the refresh is actively cancelling/completing\n\n      this.state = state;\n      this.setCss(0, this.closeDuration, true, delay);\n    }\n  }, {\n    key: \"setCss\",\n    value: function setCss(y, duration, overflowVisible, delay) {\n      var _this7 = this;\n\n      var shouldRestoreOverflowStyle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (this.nativeRefresher) {\n        return;\n      }\n\n      this.appliedStyles = y > 0;\n      writeTask(function () {\n        if (_this7.scrollEl && _this7.backgroundContentEl) {\n          var scrollStyle = _this7.scrollEl.style;\n          var backgroundStyle = _this7.backgroundContentEl.style;\n          scrollStyle.transform = backgroundStyle.transform = y > 0 ? \"translateY(\".concat(y, \"px) translateZ(0px)\") : '';\n          scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\n          scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\n          scrollStyle.overflow = overflowVisible ? 'hidden' : '';\n        }\n        /**\n         * Reset the overflow styles only once\n         * the pull to refresh effect has been closed.\n         * This ensures that the gesture is done\n         * and the refresh operation has either\n         * been aborted or has completed.\n         */\n\n\n        if (shouldRestoreOverflowStyle) {\n          _this7.restoreOverflowStyle();\n        }\n      });\n    }\n  }, {\n    key: \"memoizeOverflowStyle\",\n    value: function memoizeOverflowStyle() {\n      if (this.scrollEl) {\n        var _this$scrollEl$style = this.scrollEl.style,\n            overflow = _this$scrollEl$style.overflow,\n            overflowX = _this$scrollEl$style.overflowX,\n            overflowY = _this$scrollEl$style.overflowY;\n        this.overflowStyles = {\n          overflow: overflow !== null && overflow !== void 0 ? overflow : '',\n          overflowX: overflowX !== null && overflowX !== void 0 ? overflowX : '',\n          overflowY: overflowY !== null && overflowY !== void 0 ? overflowY : ''\n        };\n      }\n    }\n  }, {\n    key: \"restoreOverflowStyle\",\n    value: function restoreOverflowStyle() {\n      if (this.overflowStyles !== undefined && this.scrollEl !== undefined) {\n        var _this$overflowStyles = this.overflowStyles,\n            overflow = _this$overflowStyles.overflow,\n            overflowX = _this$overflowStyles.overflowX,\n            overflowY = _this$overflowStyles.overflowY;\n        this.scrollEl.style.overflow = overflow;\n        this.scrollEl.style.overflowX = overflowX;\n        this.scrollEl.style.overflowY = overflowY;\n        this.overflowStyles = undefined;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '3270f181a5141e7d886ec554a3e892974446b90e',\n        slot: \"fixed\",\n        class: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), \"refresher-\".concat(mode), true), 'refresher-native', this.nativeRefresher), 'refresher-active', this.state !== 1), 'refresher-pulling', this.state === 2), 'refresher-ready', this.state === 4), 'refresher-refreshing', this.state === 8), 'refresher-cancelling', this.state === 16), 'refresher-completing', this.state === 32)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n}();\n\nRefresher.style = {\n  ios: IonRefresherIosStyle0,\n  md: IonRefresherMdStyle0\n};\n\nvar RefresherContent = /*#__PURE__*/function () {\n  function RefresherContent(hostRef) {\n    _classCallCheck(this, RefresherContent);\n\n    registerInstance(this, hostRef);\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.pullingIcon = undefined;\n    this.pullingText = undefined;\n    this.refreshingSpinner = undefined;\n    this.refreshingText = undefined;\n  }\n\n  return _createClass(RefresherContent, [{\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      if (this.pullingIcon === undefined) {\n        /**\n         * The native iOS refresher uses a spinner instead of\n         * an icon, so we need to see if this device supports\n         * the native iOS refresher.\n         */\n        var hasRubberBandScrolling = supportsRubberBandScrolling();\n        var mode = getIonMode(this);\n        var overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n        this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n      }\n\n      if (this.refreshingSpinner === undefined) {\n        var _mode = getIonMode(this);\n\n        this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', _mode === 'ios' ? 'lines' : 'circular'));\n      }\n    }\n  }, {\n    key: \"renderPullingText\",\n    value: function renderPullingText() {\n      var customHTMLEnabled = this.customHTMLEnabled,\n          pullingText = this.pullingText;\n\n      if (customHTMLEnabled) {\n        return h(\"div\", {\n          class: \"refresher-pulling-text\",\n          innerHTML: sanitizeDOMString(pullingText)\n        });\n      }\n\n      return h(\"div\", {\n        class: \"refresher-pulling-text\"\n      }, pullingText);\n    }\n  }, {\n    key: \"renderRefreshingText\",\n    value: function renderRefreshingText() {\n      var customHTMLEnabled = this.customHTMLEnabled,\n          refreshingText = this.refreshingText;\n\n      if (customHTMLEnabled) {\n        return h(\"div\", {\n          class: \"refresher-refreshing-text\",\n          innerHTML: sanitizeDOMString(refreshingText)\n        });\n      }\n\n      return h(\"div\", {\n        class: \"refresher-refreshing-text\"\n      }, refreshingText);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var pullingIcon = this.pullingIcon;\n      var hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '1bec5b4da221c69d856f3f5ddf40f2e03ebf2a4c',\n        class: mode\n      }, h(\"div\", {\n        key: '4fcc526c4f1881e9368d9cd16bd7030919bd3841',\n        class: \"refresher-pulling\"\n      }, this.pullingIcon && hasSpinner && h(\"div\", {\n        key: 'a4e9e2e12c2d7faefc8303ec8c021f999ddf308e',\n        class: \"refresher-pulling-icon\"\n      }, h(\"div\", {\n        key: '5a2d215feb7fb4b64d540d3a65c0f24b415a2433',\n        class: \"spinner-arrow-container\"\n      }, h(\"ion-spinner\", {\n        key: 'abef2621d671ac6ff0abac43a702cbd825b7f127',\n        name: this.pullingIcon,\n        paused: true\n      }), mode === 'md' && this.pullingIcon === 'circular' && h(\"div\", {\n        key: '30087d672c3780672a05874cd93cd099b2855462',\n        class: \"arrow-container\"\n      }, h(\"ion-icon\", {\n        key: '5e30333dee469aec0d8efc8c4e6dabb619c6f363',\n        icon: caretBackSharp,\n        \"aria-hidden\": \"true\"\n      })))), this.pullingIcon && !hasSpinner && h(\"div\", {\n        key: '48fe72b5ce8ded633c6ee799cebb520b9c8be528',\n        class: \"refresher-pulling-icon\"\n      }, h(\"ion-icon\", {\n        key: 'd8dfd5d42056b1c0a436c5006affb255407816c0',\n        icon: this.pullingIcon,\n        lazy: false,\n        \"aria-hidden\": \"true\"\n      })), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", {\n        key: 'c2cbfb94f157c82601ffe7bb815ff82ebc7c0a49',\n        class: \"refresher-refreshing\"\n      }, this.refreshingSpinner && h(\"div\", {\n        key: '17f3ebe6a31768d5e389f45a2c12f68600185db9',\n        class: \"refresher-refreshing-icon\"\n      }, h(\"ion-spinner\", {\n        key: 'e8e61f8d7189c9939bba184201c9509d1d5b0fad',\n        name: this.refreshingSpinner\n      })), this.refreshingText !== undefined && this.renderRefreshingText()));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }]);\n}();\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };","map":null,"metadata":{},"sourceType":"module"}