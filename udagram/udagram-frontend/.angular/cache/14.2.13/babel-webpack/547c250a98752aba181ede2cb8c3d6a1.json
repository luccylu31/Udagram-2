{"ast":null,"code":"import _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-a5d50daf.js';\nimport { c as config } from './ionic-global-81a1064f.js';\nimport './index-7a952e7a.js';\n/**\n * CloseWatcher is a newer API that lets\n * use detect the hardware back button event\n * in a web browser: https://caniuse.com/?search=closewatcher\n * However, not every browser supports it yet.\n *\n * This needs to be a function so that we can\n * check the config once it has been set.\n * Otherwise, this code would be evaluated the\n * moment this file is evaluated which could be\n * before the config is set.\n */\n\nvar shouldUseCloseWatcher = function shouldUseCloseWatcher() {\n  return config.get('experimentalCloseWatcher', false) && win !== undefined && 'CloseWatcher' in win;\n};\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\n\n\nvar blockHardwareBackButton = function blockHardwareBackButton() {\n  document.addEventListener('backbutton', function () {}); // eslint-disable-line\n};\n\nvar startHardwareBackButton = function startHardwareBackButton() {\n  var doc = document;\n  var busy = false;\n\n  var backButtonCallback = function backButtonCallback() {\n    if (busy) {\n      return;\n    }\n\n    var index = 0;\n    var handlers = [];\n    var ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register: function register(priority, handler) {\n          handlers.push({\n            priority: priority,\n            handler: handler,\n            id: index++\n          });\n        }\n      }\n    });\n    doc.dispatchEvent(ev);\n\n    var executeAction = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(handlerRegister) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!(handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler)) {\n                _context.next = 6;\n                break;\n              }\n\n              result = handlerRegister.handler(processHandlers);\n\n              if (!(result != null)) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 6;\n              return result;\n\n            case 6:\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      return function executeAction(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var processHandlers = function processHandlers() {\n      if (handlers.length > 0) {\n        var selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: function handler() {\n            return undefined;\n          },\n          id: -1\n        };\n        handlers.forEach(function (handler) {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter(function (handler) {\n          return handler.id !== selectedHandler.id;\n        });\n        executeAction(selectedHandler).then(function () {\n          return busy = false;\n        });\n      }\n    };\n\n    processHandlers();\n  };\n  /**\n   * If the CloseWatcher is defined then\n   * we don't want to also listen for the native\n   * backbutton event otherwise we may get duplicate\n   * events firing.\n   */\n\n\n  if (shouldUseCloseWatcher()) {\n    var watcher;\n\n    var configureWatcher = function configureWatcher() {\n      watcher === null || watcher === void 0 ? void 0 : watcher.destroy();\n      watcher = new win.CloseWatcher();\n      /**\n       * Once a close request happens\n       * the watcher gets destroyed.\n       * As a result, we need to re-configure\n       * the watcher so we can respond to other\n       * close requests.\n       */\n\n      watcher.onclose = function () {\n        backButtonCallback();\n        configureWatcher();\n      };\n    };\n\n    configureWatcher();\n  } else {\n    doc.addEventListener('backbutton', backButtonCallback);\n  }\n};\n\nvar OVERLAY_BACK_BUTTON_PRIORITY = 100;\nvar MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, shouldUseCloseWatcher, startHardwareBackButton };","map":null,"metadata":{},"sourceType":"module"}