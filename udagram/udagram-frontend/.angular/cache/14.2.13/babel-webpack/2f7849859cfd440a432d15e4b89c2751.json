{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, e as readTask, h, i as getElement, f as Host } from './index-7a952e7a.js';\nimport { f as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index-5cc724f3.js';\nimport { b as getIonMode, c as config } from './ionic-global-81a1064f.js';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config-49c88215.js';\nimport './helpers-da915de8.js';\nimport './index-9b0d46f4.js';\nvar infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nvar IonInfiniteScrollStyle0 = infiniteScrollCss;\n\nvar InfiniteScroll = /*#__PURE__*/function () {\n  function InfiniteScroll(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, InfiniteScroll);\n\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    /**\n     * didFire exists so that ionInfinite\n     * does not fire multiple times if\n     * users continue to scroll after\n     * scrolling into the infinite\n     * scroll threshold.\n     */\n\n    this.didFire = false;\n    this.isBusy = false;\n\n    this.onScroll = function () {\n      var scrollEl = _this.scrollEl;\n\n      if (!scrollEl || !_this.canStart()) {\n        return 1;\n      }\n\n      var infiniteHeight = _this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      var scrollTop = scrollEl.scrollTop;\n      var scrollHeight = scrollEl.scrollHeight;\n      var height = scrollEl.offsetHeight;\n      var threshold = _this.thrPc !== 0 ? height * _this.thrPc : _this.thrPx;\n      var distanceFromInfinite = _this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!_this.didFire) {\n          _this.isLoading = true;\n          _this.didFire = true;\n\n          _this.ionInfinite.emit();\n\n          return 3;\n        }\n      }\n\n      return 4;\n    };\n\n    this.isLoading = false;\n    this.threshold = '15%';\n    this.disabled = false;\n    this.position = 'bottom';\n  }\n\n  return _createClass(InfiniteScroll, [{\n    key: \"thresholdChanged\",\n    value: function thresholdChanged() {\n      var val = this.threshold;\n\n      if (val.lastIndexOf('%') > -1) {\n        this.thrPx = 0;\n        this.thrPc = parseFloat(val) / 100;\n      } else {\n        this.thrPx = parseFloat(val);\n        this.thrPc = 0;\n      }\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      var disabled = this.disabled;\n\n      if (disabled) {\n        this.isLoading = false;\n        this.isBusy = false;\n      }\n\n      this.enableScrollEvents(!disabled);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n\n        var contentEl;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              contentEl = findClosestIonContent(this.el);\n\n              if (contentEl) {\n                _context.next = 4;\n                break;\n              }\n\n              printIonContentErrorMsg(this.el);\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _context.next = 6;\n              return getScrollElement(contentEl);\n\n            case 6:\n              this.scrollEl = _context.sent;\n              this.thresholdChanged();\n              this.disabledChanged();\n\n              if (this.position === 'top') {\n                writeTask(function () {\n                  if (_this2.scrollEl) {\n                    _this2.scrollEl.scrollTop = _this2.scrollEl.scrollHeight - _this2.scrollEl.clientHeight;\n                  }\n                });\n              }\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.enableScrollEvents(false);\n      this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n\n  }, {\n    key: \"complete\",\n    value: function () {\n      var _complete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n\n        var scrollEl, prev;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              scrollEl = this.scrollEl;\n\n              if (!(!this.isLoading || !scrollEl)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              this.isLoading = false;\n\n              if (this.position === 'top') {\n                /**\n                 * New content is being added at the top, but the scrollTop position stays the same,\n                 * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                 * (Frame 1)\n                 *    - complete() is called, but the UI hasn't had time to update yet.\n                 *    - Save the current content dimensions.\n                 *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                 * (Frame 2)\n                 *    - Read the new content dimensions.\n                 *    - Calculate the height difference and the new scroll position.\n                 *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                 * (Still frame 2, if I'm correct)\n                 *    - Change the scroll position (= visually maintain the scroll position).\n                 *    - Change the state to re-enable the InfiniteScroll.\n                 *    - This should be after changing the scroll position, or it could\n                 *    cause the InfiniteScroll to be triggered again immediately.\n                 * (Frame 3)\n                 *    Done.\n                 */\n                this.isBusy = true; // ******** DOM READ ****************\n                // Save the current content dimensions before the UI updates\n\n                prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n                requestAnimationFrame(function () {\n                  readTask(function () {\n                    // UI has updated, save the new content dimensions\n                    var scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n                    var newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n                    requestAnimationFrame(function () {\n                      writeTask(function () {\n                        scrollEl.scrollTop = newScrollTop;\n                        _this3.isBusy = false;\n                        _this3.didFire = false;\n                      });\n                    });\n                  });\n                });\n              } else {\n                this.didFire = false;\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function complete() {\n        return _complete.apply(this, arguments);\n      }\n\n      return complete;\n    }()\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n    }\n  }, {\n    key: \"enableScrollEvents\",\n    value: function enableScrollEvents(shouldListen) {\n      if (this.scrollEl) {\n        if (shouldListen) {\n          this.scrollEl.addEventListener('scroll', this.onScroll);\n        } else {\n          this.scrollEl.removeEventListener('scroll', this.onScroll);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      var disabled = this.disabled;\n      return h(Host, {\n        key: '1444429a86950c449953cbf578436cc8cabf40ec',\n        class: _defineProperty(_defineProperty(_defineProperty({}, mode, true), 'infinite-scroll-loading', this.isLoading), 'infinite-scroll-enabled', !disabled)\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n      };\n    }\n  }]);\n}();\n\nInfiniteScroll.style = IonInfiniteScrollStyle0;\nvar infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px;margin-top:4px;margin-bottom:0}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nvar IonInfiniteScrollContentIosStyle0 = infiniteScrollContentIosCss;\nvar infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px;margin-top:4px;margin-bottom:0}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nvar IonInfiniteScrollContentMdStyle0 = infiniteScrollContentMdCss;\n\nvar InfiniteScrollContent = /*#__PURE__*/function () {\n  function InfiniteScrollContent(hostRef) {\n    _classCallCheck(this, InfiniteScrollContent);\n\n    registerInstance(this, hostRef);\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.loadingSpinner = undefined;\n    this.loadingText = undefined;\n  }\n\n  return _createClass(InfiniteScrollContent, [{\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      if (this.loadingSpinner === undefined) {\n        var mode = getIonMode(this);\n        this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n      }\n    }\n  }, {\n    key: \"renderLoadingText\",\n    value: function renderLoadingText() {\n      var customHTMLEnabled = this.customHTMLEnabled,\n          loadingText = this.loadingText;\n\n      if (customHTMLEnabled) {\n        return h(\"div\", {\n          class: \"infinite-loading-text\",\n          innerHTML: sanitizeDOMString(loadingText)\n        });\n      }\n\n      return h(\"div\", {\n        class: \"infinite-loading-text\"\n      }, this.loadingText);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '060278bf9cb0321e182352f9613be4ebbb028259',\n        class: _defineProperty(_defineProperty({}, mode, true), \"infinite-scroll-content-\".concat(mode), true)\n      }, h(\"div\", {\n        key: '07d3cada920145f979ad315bd187fb878e0c3da3',\n        class: \"infinite-loading\"\n      }, this.loadingSpinner && h(\"div\", {\n        key: '6254f175d7543d09f3dd47cd0589a2809182cd8c',\n        class: \"infinite-loading-spinner\"\n      }, h(\"ion-spinner\", {\n        key: 'a6a816d1c65b60b786333b209b63492aa716a283',\n        name: this.loadingSpinner\n      })), this.loadingText !== undefined && this.renderLoadingText()));\n    }\n  }]);\n}();\n\nInfiniteScrollContent.style = {\n  ios: IonInfiniteScrollContentIosStyle0,\n  md: IonInfiniteScrollContentMdStyle0\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };","map":null,"metadata":{},"sourceType":"module"}