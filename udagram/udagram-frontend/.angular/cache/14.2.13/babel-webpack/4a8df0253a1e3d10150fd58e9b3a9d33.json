{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { p as printIonWarning } from './index-9b0d46f4.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { x as eye, y as eyeOff } from './index-e2cf2ceb.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nvar iosInputPasswordToggleCss = \"\";\nvar IonInputPasswordToggleIosStyle0 = iosInputPasswordToggleCss;\nvar mdInputPasswordToggleCss = \"\";\nvar IonInputPasswordToggleMdStyle0 = mdInputPasswordToggleCss;\n\nvar InputPasswordToggle = /*#__PURE__*/function () {\n  function InputPasswordToggle(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, InputPasswordToggle);\n\n    registerInstance(this, hostRef);\n\n    this.togglePasswordVisibility = function () {\n      var inputElRef = _this.inputElRef;\n\n      if (!inputElRef) {\n        return;\n      }\n\n      inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n    };\n\n    this.color = undefined;\n    this.showIcon = undefined;\n    this.hideIcon = undefined;\n    this.type = 'password';\n  }\n  /**\n   * Whenever the input type changes we need to re-run validation to ensure the password\n   * toggle is being used with the correct input type. If the application changes the type\n   * outside of this component we also need to re-render so the correct icon is shown.\n   */\n\n\n  return _createClass(InputPasswordToggle, [{\n    key: \"onTypeChange\",\n    value: function onTypeChange(newValue) {\n      if (newValue !== 'text' && newValue !== 'password') {\n        printIonWarning(\"ion-input-password-toggle only supports inputs of type \\\"text\\\" or \\\"password\\\". Input of type \\\"\".concat(newValue, \"\\\" is not compatible.\"), this.el);\n        return;\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var el = this.el;\n      var inputElRef = this.inputElRef = el.closest('ion-input');\n\n      if (!inputElRef) {\n        printIonWarning('No ancestor ion-input found for ion-input-password-toggle. This component must be slotted inside of an ion-input.', el);\n        return;\n      }\n      /**\n       * Important: Set the type in connectedCallback because the default value\n       * of this.type may not always be accurate. Usually inputs have the \"password\" type\n       * but it is possible to have the input to initially have the \"text\" type. In that scenario\n       * the wrong icon will show briefly before switching to the correct icon. Setting the\n       * type here allows us to avoid that flicker.\n       */\n\n\n      this.type = inputElRef.type;\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.inputElRef = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a, _b;\n\n      var color = this.color,\n          type = this.type;\n      var mode = getIonMode(this);\n      var showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n      var hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n      var isPasswordVisible = type === 'text';\n      return h(Host, {\n        key: 'ed1c29726ce0c91548f0e2ada61e3f8b5c813d2d',\n        class: createColorClasses(color, _defineProperty({}, mode, true))\n      }, h(\"ion-button\", {\n        key: '9698eccdaedb86cf12d20acc53660371b3af3c55',\n        mode: mode,\n        color: color,\n        fill: \"clear\",\n        shape: \"round\",\n        \"aria-checked\": isPasswordVisible ? 'true' : 'false',\n        \"aria-label\": \"show password\",\n        role: \"switch\",\n        type: \"button\",\n        onPointerDown: function onPointerDown(ev) {\n          /**\n           * This prevents mobile browsers from\n           * blurring the input when the password toggle\n           * button is activated.\n           */\n          ev.preventDefault();\n        },\n        onClick: this.togglePasswordVisibility\n      }, h(\"ion-icon\", {\n        key: '1f2119c30b56c800d9af44e6499445a0ebb466cf',\n        slot: \"icon-only\",\n        \"aria-hidden\": \"true\",\n        icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon\n      })));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"type\": [\"onTypeChange\"]\n      };\n    }\n  }]);\n}();\n\nInputPasswordToggle.style = {\n  ios: IonInputPasswordToggleIosStyle0,\n  md: IonInputPasswordToggleMdStyle0\n};\nexport { InputPasswordToggle as ion_input_password_toggle };","map":null,"metadata":{},"sourceType":"module"}