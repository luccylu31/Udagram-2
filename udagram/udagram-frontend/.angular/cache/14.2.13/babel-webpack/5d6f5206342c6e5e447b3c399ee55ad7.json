{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { g as getCapacitor } from './capacitor-59395cbd.js';\nvar ImpactStyle = /*#__PURE__*/(function () {\n  (function (ImpactStyle) {\n    /**\n     * A collision between large, heavy user interface elements\n     *\n     * @since 1.0.0\n     */\n    ImpactStyle[\"Heavy\"] = \"HEAVY\";\n    /**\n     * A collision between moderately sized user interface elements\n     *\n     * @since 1.0.0\n     */\n\n    ImpactStyle[\"Medium\"] = \"MEDIUM\";\n    /**\n     * A collision between small, light user interface elements\n     *\n     * @since 1.0.0\n     */\n\n    ImpactStyle[\"Light\"] = \"LIGHT\";\n  })(ImpactStyle || (ImpactStyle = {}));\n\n  return ImpactStyle;\n})();\nvar NotificationType = /*#__PURE__*/(function () {\n  (function (NotificationType) {\n    /**\n     * A notification feedback type indicating that a task has completed successfully\n     *\n     * @since 1.0.0\n     */\n    NotificationType[\"Success\"] = \"SUCCESS\";\n    /**\n     * A notification feedback type indicating that a task has produced a warning\n     *\n     * @since 1.0.0\n     */\n\n    NotificationType[\"Warning\"] = \"WARNING\";\n    /**\n     * A notification feedback type indicating that a task has failed\n     *\n     * @since 1.0.0\n     */\n\n    NotificationType[\"Error\"] = \"ERROR\";\n  })(NotificationType || (NotificationType = {}));\n\n  return NotificationType;\n})();\nvar HapticEngine = {\n  getEngine: function getEngine() {\n    var capacitor = getCapacitor();\n\n    if (capacitor === null || capacitor === void 0 ? void 0 : capacitor.isPluginAvailable('Haptics')) {\n      // Capacitor\n      return capacitor.Plugins.Haptics;\n    }\n\n    return undefined;\n  },\n  available: function available() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return false;\n    }\n\n    var capacitor = getCapacitor();\n    /**\n     * Developers can manually import the\n     * Haptics plugin in their app which will cause\n     * getEngine to return the Haptics engine. However,\n     * the Haptics engine will throw an error if\n     * used in a web browser that does not support\n     * the Vibrate API. This check avoids that error\n     * if the browser does not support the Vibrate API.\n     */\n\n    if ((capacitor === null || capacitor === void 0 ? void 0 : capacitor.getPlatform()) === 'web') {\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n      return typeof navigator !== 'undefined' && navigator.vibrate !== undefined;\n    }\n\n    return true;\n  },\n  impact: function impact(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    engine.impact({\n      style: options.style\n    });\n  },\n  notification: function notification(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    engine.notification({\n      type: options.type\n    });\n  },\n  selection: function selection() {\n    this.impact({\n      style: ImpactStyle.Light\n    });\n  },\n  selectionStart: function selectionStart() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    engine.selectionStart();\n  },\n  selectionChanged: function selectionChanged() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    engine.selectionChanged();\n  },\n  selectionEnd: function selectionEnd() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    engine.selectionEnd();\n  }\n};\n/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\n\nvar hapticAvailable = function hapticAvailable() {\n  return HapticEngine.available();\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\n\nvar hapticSelection = function hapticSelection() {\n  hapticAvailable() && HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nvar hapticSelectionStart = function hapticSelectionStart() {\n  hapticAvailable() && HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nvar hapticSelectionChanged = function hapticSelectionChanged() {\n  hapticAvailable() && HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nvar hapticSelectionEnd = function hapticSelectionEnd() {\n  hapticAvailable() && HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: ImpactStyle.LIGHT }` (or `MEDIUM`/`HEAVY`)\n */\n\n\nvar hapticImpact = function hapticImpact(options) {\n  hapticAvailable() && HapticEngine.impact(options);\n};\n\nexport { ImpactStyle as I, hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":null,"metadata":{},"sourceType":"module"}