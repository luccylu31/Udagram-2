{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, w as writeTask, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { startFocusVisible } from './focus-visible-dd40d69f.js';\nimport { r as raf, d as renderHiddenInput, g as getElementRoot, j as clamp } from './helpers-da915de8.js';\nimport { a as printIonError, p as printIonWarning } from './index-9b0d46f4.js';\nimport { i as isRTL } from './dir-babeabeb.js';\nimport { c as createColorClasses, g as getClassMap } from './theme-01f3f29c.js';\nimport { c as chevronBack, o as chevronForward, l as chevronDown, p as caretUpSharp, q as caretDownSharp } from './index-e2cf2ceb.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nimport { g as generateDayAriaLabel, a as getDay, i as isBefore, b as isAfter, c as isSameDay, d as getPreviousMonth, e as getNextMonth, v as validateParts, f as getPartsFromCalendarDay, h as getNextYear, j as getPreviousYear, k as getEndOfWeek, l as getStartOfWeek, m as getPreviousDay, n as getNextDay, o as getPreviousWeek, p as getNextWeek, q as parseMinParts, r as parseMaxParts, s as parseDate, w as warnIfValueOutOfBounds, t as convertToArrayOfNumbers, u as convertDataToISO, x as getToday, y as getClosestValidDate, z as generateMonths, A as getNumDaysInMonth, B as getCombinedDateColumnData, C as getMonthColumnData, D as getDayColumnData, E as getYearColumnData, F as isMonthFirstLocale, G as getTimeColumnsData, H as isLocaleDayPeriodRTL, I as getDaysOfWeek, J as getMonthAndYear, K as getDaysOfMonth, L as getHourCycle, M as getLocalizedTime, N as getLocalizedDateTime, O as formatValue, P as clampDate, Q as parseAmPm, R as calculateHourFromAMPM } from './data-ae11fd43.js';\nimport { c as createLockController } from './lock-controller-316928be.js';\nimport { d as createDelegateController, e as createTriggerController, B as BACKDROP, i as isCancel, j as prepareOverlay, k as setOverlayId, f as _present, g as _dismiss, h as eventMethod, s as safeCall } from './overlays-e1bad9cd.js';\nimport { c as createAnimation } from './animation-eab5a4ca.js';\nimport { b as hapticSelectionChanged, h as hapticSelectionEnd, a as hapticSelectionStart } from './haptic-ac164e4c.js';\nimport './index-a5d50daf.js';\nimport './hardware-back-button-2e99752e.js';\nimport './framework-delegate-63d1a679.js';\nimport './gesture-controller-314a54f6.js';\nimport './capacitor-59395cbd.js';\n\nvar isYearDisabled = function isYearDisabled(refYear, minParts, maxParts) {\n  if (minParts && minParts.year > refYear) {\n    return true;\n  }\n\n  if (maxParts && maxParts.year < refYear) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Returns true if a given day should\n * not be interactive according to its value,\n * or the max/min dates.\n */\n\n\nvar isDayDisabled = function isDayDisabled(refParts, minParts, maxParts, dayValues) {\n  /**\n   * If this is a filler date (i.e. padding)\n   * then the date is disabled.\n   */\n  if (refParts.day === null) {\n    return true;\n  }\n  /**\n   * If user passed in a list of acceptable day values\n   * check to make sure that the date we are looking\n   * at is in this array.\n   */\n\n\n  if (dayValues !== undefined && !dayValues.includes(refParts.day)) {\n    return true;\n  }\n  /**\n   * Given a min date, perform the following\n   * checks. If any of them are true, then the\n   * day should be disabled:\n   * 1. Is the current year < the min allowed year?\n   * 2. Is the current year === min allowed year,\n   * but the current month < the min allowed month?\n   * 3. Is the current year === min allowed year, the\n   * current month === min allow month, but the current\n   * day < the min allowed day?\n   */\n\n\n  if (minParts && isBefore(refParts, minParts)) {\n    return true;\n  }\n  /**\n   * Given a max date, perform the following\n   * checks. If any of them are true, then the\n   * day should be disabled:\n   * 1. Is the current year > the max allowed year?\n   * 2. Is the current year === max allowed year,\n   * but the current month > the max allowed month?\n   * 3. Is the current year === max allowed year, the\n   * current month === max allow month, but the current\n   * day > the max allowed day?\n   */\n\n\n  if (maxParts && isAfter(refParts, maxParts)) {\n    return true;\n  }\n  /**\n   * If none of these checks\n   * passed then the date should\n   * be interactive.\n   */\n\n\n  return false;\n};\n/**\n * Given a locale, a date, the selected date(s), and today's date,\n * generate the state for a given calendar day button.\n */\n\n\nvar getCalendarDayState = function getCalendarDayState(locale, refParts, activeParts, todayParts, minParts, maxParts, dayValues) {\n  /**\n   * activeParts signals what day(s) are currently selected in the datetime.\n   * If multiple=\"true\", this will be an array, but the logic in this util\n   * is the same whether we have one selected day or many because we're only\n   * calculating the state for one button. So, we treat a single activeParts value\n   * the same as an array of length one.\n   */\n  var activePartsArray = Array.isArray(activeParts) ? activeParts : [activeParts];\n  /**\n   * The day button is active if it is selected, or in other words, if refParts\n   * matches at least one selected date.\n   */\n\n  var isActive = activePartsArray.find(function (parts) {\n    return isSameDay(refParts, parts);\n  }) !== undefined;\n  var isToday = isSameDay(refParts, todayParts);\n  var disabled = isDayDisabled(refParts, minParts, maxParts, dayValues);\n  /**\n   * Note that we always return one object regardless of whether activeParts\n   * was an array, since we pare down to one value for isActive.\n   */\n\n  return {\n    disabled: disabled,\n    isActive: isActive,\n    isToday: isToday,\n    ariaSelected: isActive ? 'true' : null,\n    ariaLabel: generateDayAriaLabel(locale, isToday, refParts),\n    text: refParts.day != null ? getDay(locale, refParts) : null\n  };\n};\n/**\n * Returns `true` if the month is disabled given the\n * current date value and min/max date constraints.\n */\n\n\nvar isMonthDisabled = function isMonthDisabled(refParts, _ref) {\n  var minParts = _ref.minParts,\n      maxParts = _ref.maxParts;\n\n  // If the year is disabled then the month is disabled.\n  if (isYearDisabled(refParts.year, minParts, maxParts)) {\n    return true;\n  } // If the date value is before the min date, then the month is disabled.\n  // If the date value is after the max date, then the month is disabled.\n\n\n  if (minParts && isBefore(refParts, minParts) || maxParts && isAfter(refParts, maxParts)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Given a working date, an optional minimum date range,\n * and an optional maximum date range; determine if the\n * previous navigation button is disabled.\n */\n\n\nvar isPrevMonthDisabled = function isPrevMonthDisabled(refParts, minParts, maxParts) {\n  var prevMonth = Object.assign(Object.assign({}, getPreviousMonth(refParts)), {\n    day: null\n  });\n  return isMonthDisabled(prevMonth, {\n    minParts: minParts,\n    maxParts: maxParts\n  });\n};\n/**\n * Given a working date and a maximum date range,\n * determine if the next navigation button is disabled.\n */\n\n\nvar isNextMonthDisabled = function isNextMonthDisabled(refParts, maxParts) {\n  var nextMonth = Object.assign(Object.assign({}, getNextMonth(refParts)), {\n    day: null\n  });\n  return isMonthDisabled(nextMonth, {\n    maxParts: maxParts\n  });\n};\n/**\n * Given the value of the highlightedDates property\n * and an ISO string, return the styles to use for\n * that date, or undefined if none are found.\n */\n\n\nvar getHighlightStyles = function getHighlightStyles(highlightedDates, dateIsoString, el) {\n  if (Array.isArray(highlightedDates)) {\n    var dateStringWithoutTime = dateIsoString.split('T')[0];\n    var matchingHighlight = highlightedDates.find(function (hd) {\n      return hd.date === dateStringWithoutTime;\n    });\n\n    if (matchingHighlight) {\n      return {\n        textColor: matchingHighlight.textColor,\n        backgroundColor: matchingHighlight.backgroundColor\n      };\n    }\n  } else {\n    /**\n     * Wrap in a try-catch to prevent exceptions in the user's function\n     * from interrupting the calendar's rendering.\n     */\n    try {\n      return highlightedDates(dateIsoString);\n    } catch (e) {\n      printIonError('Exception thrown from provided `highlightedDates` callback. Please check your function and try again.', el, e);\n    }\n  }\n\n  return undefined;\n};\n/**\n * If a time zone is provided in the format options, the rendered text could\n * differ from what was selected in the Datetime, which could cause\n * confusion.\n */\n\n\nvar warnIfTimeZoneProvided = function warnIfTimeZoneProvided(el, formatOptions) {\n  var _a, _b, _c, _d;\n\n  if (((_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) === null || _a === void 0 ? void 0 : _a.timeZone) || ((_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) === null || _b === void 0 ? void 0 : _b.timeZoneName) || ((_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) === null || _c === void 0 ? void 0 : _c.timeZone) || ((_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) === null || _d === void 0 ? void 0 : _d.timeZoneName)) {\n    printIonWarning('Datetime: \"timeZone\" and \"timeZoneName\" are not supported in \"formatOptions\".', el);\n  }\n};\n\nvar checkForPresentationFormatMismatch = function checkForPresentationFormatMismatch(el, presentation, formatOptions) {\n  // formatOptions is not required\n  if (!formatOptions) return; // If formatOptions is provided, the date and/or time objects are required, depending on the presentation\n\n  switch (presentation) {\n    case 'date':\n    case 'month-year':\n    case 'month':\n    case 'year':\n      if (formatOptions.date === undefined) {\n        printIonWarning(\"Datetime: The '\".concat(presentation, \"' presentation requires a date object in formatOptions.\"), el);\n      }\n\n      break;\n\n    case 'time':\n      if (formatOptions.time === undefined) {\n        printIonWarning(\"Datetime: The 'time' presentation requires a time object in formatOptions.\", el);\n      }\n\n      break;\n\n    case 'date-time':\n    case 'time-date':\n      if (formatOptions.date === undefined && formatOptions.time === undefined) {\n        printIonWarning(\"Datetime: The '\".concat(presentation, \"' presentation requires either a date or time object (or both) in formatOptions.\"), el);\n      }\n\n      break;\n  }\n};\n\nvar datetimeIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled) .calendar-days-of-week,:host(.datetime-disabled) .datetime-time{opacity:0.4}:host(.datetime-readonly){pointer-events:none;}:host(.datetime-readonly) .calendar-action-buttons,:host(.datetime-readonly) .calendar-body,:host(.datetime-readonly) .datetime-year{pointer-events:initial}:host(.datetime-readonly) .calendar-day[disabled]:not(.calendar-day-constrained),:host(.datetime-readonly) .datetime-action-buttons ion-button[disabled]{opacity:1}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}.datetime-action-buttons .datetime-action-buttons-container{display:-ms-flexbox;display:flex}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-button{--background:transparent}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}.calendar-days-of-week .day-of-week{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr)}:host .calendar-day-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:0;min-height:0;overflow:visible}.calendar-day{border-radius:50%;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px;padding-top:0px;padding-bottom:0px;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;font-family:var(--ion-font-family, inherit);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}.calendar-day:focus{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons .calendar-month-year-toggle{color:var(--ion-color-base)}.calendar-month-year{min-width:0}.calendar-month-year-toggle{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;position:relative;border:0;outline:none;background:transparent;cursor:pointer;z-index:1}.calendar-month-year-toggle::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0;-webkit-transition:opacity 15ms linear, background-color 15ms linear;transition:opacity 15ms linear, background-color 15ms linear;z-index:-1}.calendar-month-year-toggle.ion-focused::after{background:currentColor}.calendar-month-year-toggle:disabled{opacity:0.3;pointer-events:none}.calendar-month-year-toggle ion-icon{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0;padding-top:0;padding-bottom:0;-ms-flex-negative:0;flex-shrink:0}.calendar-month-year-toggle #toggle-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}ion-picker{--highlight-background:var(--wheel-highlight-background);--highlight-border-radius:var(--wheel-highlight-border-radius);--fade-background-rgb:var(--wheel-fade-background-rgb)}:host{--background:var(--ion-color-light, #f4f5f8);--background-rgb:var(--ion-color-light-rgb, 244, 245, 248);--title-color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}:host(.datetime-presentation-date-time:not(.datetime-prefer-wheel)),:host(.datetime-presentation-time-date:not(.datetime-prefer-wheel)),:host(.datetime-presentation-date:not(.datetime-prefer-wheel)){min-height:350px}:host .datetime-header{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:16px;padding-bottom:16px;border-bottom:0.55px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #cccccc));font-size:min(0.875rem, 22.4px)}:host .datetime-header .datetime-title{color:var(--title-color)}:host .datetime-header .datetime-selected-date{margin-top:10px}.calendar-month-year-toggle{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0px;padding-bottom:0px;min-height:44px;font-size:min(1rem, 25.6px);font-weight:600}.calendar-month-year-toggle.ion-focused::after{opacity:0.15}.calendar-month-year-toggle #toggle-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px;margin-top:10px;margin-bottom:10px}:host .calendar-action-buttons .calendar-month-year-toggle ion-icon,:host .calendar-action-buttons ion-buttons ion-button{color:var(--ion-color-base)}:host .calendar-action-buttons ion-buttons{padding-left:0;padding-right:0;padding-top:8px;padding-bottom:0}:host .calendar-action-buttons ion-buttons ion-button{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}:host .calendar-days-of-week{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0;color:var(--ion-color-step-300, var(--ion-text-color-step-700, #b3b3b3));font-size:min(0.75rem, 19.2px);font-weight:600;line-height:24px;text-transform:uppercase}@supports (border-radius: mod(1px, 1px)){.calendar-days-of-week .day-of-week{width:clamp(20px, calc(mod(min(1rem, 24px), 24px) * 10), 100%);height:24px;overflow:hidden}.calendar-day{border-radius:max(8px, mod(min(1rem, 24px), 24px) * 10)}}@supports ((border-radius: mod(1px, 1px)) and (background: -webkit-named-image(apple-pay-logo-black)) and (not (contain-intrinsic-size: none))) or (not (border-radius: mod(1px, 1px))){.calendar-days-of-week .day-of-week{width:auto;height:auto;overflow:initial}.calendar-day{border-radius:32px}}:host .calendar-body .calendar-month .calendar-month-grid{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;-ms-flex-align:center;align-items:center;height:calc(100% - 16px)}:host .calendar-day-wrapper{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px;padding-top:4px;padding-bottom:4px;height:0;min-height:1rem}:host .calendar-day{width:40px;min-width:40px;height:40px;font-size:min(1.25rem, 32px)}.calendar-day.calendar-day-active{background:rgba(var(--ion-color-base-rgb), 0.2);font-size:min(1.375rem, 35.2px)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-base);font-weight:600}:host .calendar-day.calendar-day-today.calendar-day-active{background:var(--ion-color-base);color:var(--ion-color-contrast)}:host .datetime-time{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:8px;padding-bottom:16px;font-size:min(1rem, 25.6px)}:host .datetime-time .time-header{font-weight:600}:host .datetime-buttons{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:8px;padding-bottom:8px;border-top:0.55px solid var(--ion-color-step-200, var(--ion-background-color-step-200, #cccccc))}:host .datetime-buttons ::slotted(ion-buttons),:host .datetime-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}:host .datetime-action-buttons{width:100%}\";\nvar IonDatetimeIosStyle0 = datetimeIosCss;\nvar datetimeMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}:host(.datetime-size-fixed){width:auto;height:auto}:host(.datetime-size-fixed:not(.datetime-prefer-wheel)){max-width:350px}:host(.datetime-size-fixed.datetime-prefer-wheel){min-width:350px;max-width:-webkit-max-content;max-width:-moz-max-content;max-width:max-content}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .wheel-order-year-first .day-column{-ms-flex-order:3;order:3;text-align:end}:host .wheel-order-year-first .month-column{-ms-flex-order:2;order:2;text-align:end}:host .wheel-order-year-first .year-column{-ms-flex-order:1;order:1;text-align:start}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{display:none}:host(.month-year-picker-open) .datetime-footer{display:none}:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled) .calendar-days-of-week,:host(.datetime-disabled) .datetime-time{opacity:0.4}:host(.datetime-readonly){pointer-events:none;}:host(.datetime-readonly) .calendar-action-buttons,:host(.datetime-readonly) .calendar-body,:host(.datetime-readonly) .datetime-year{pointer-events:initial}:host(.datetime-readonly) .calendar-day[disabled]:not(.calendar-day-constrained),:host(.datetime-readonly) .datetime-action-buttons ion-button[disabled]{opacity:1}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}.datetime-action-buttons .datetime-action-buttons-container{display:-ms-flexbox;display:flex}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-button{--background:transparent}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}.calendar-days-of-week .day-of-week{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body .calendar-month-disabled{scroll-snap-align:none}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr)}:host .calendar-day-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;min-width:0;min-height:0;overflow:visible}.calendar-day{border-radius:50%;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px;padding-top:0px;padding-bottom:0px;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;font-family:var(--ion-font-family, inherit);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}.calendar-day:focus{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons .calendar-month-year-toggle{color:var(--ion-color-base)}.calendar-month-year{min-width:0}.calendar-month-year-toggle{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;position:relative;border:0;outline:none;background:transparent;cursor:pointer;z-index:1}.calendar-month-year-toggle::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\\\"\\\";opacity:0;-webkit-transition:opacity 15ms linear, background-color 15ms linear;transition:opacity 15ms linear, background-color 15ms linear;z-index:-1}.calendar-month-year-toggle.ion-focused::after{background:currentColor}.calendar-month-year-toggle:disabled{opacity:0.3;pointer-events:none}.calendar-month-year-toggle ion-icon{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0;padding-top:0;padding-bottom:0;-ms-flex-negative:0;flex-shrink:0}.calendar-month-year-toggle #toggle-wrapper{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-align:center;align-items:center}ion-picker{--highlight-background:var(--wheel-highlight-background);--highlight-border-radius:var(--wheel-highlight-border-radius);--fade-background-rgb:var(--wheel-fade-background-rgb)}:host{--background:var(--ion-color-step-100, var(--ion-background-color-step-100, #ffffff));--title-color:var(--ion-color-contrast)}:host .datetime-header{-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:20px;padding-bottom:20px;background:var(--ion-color-base);color:var(--title-color)}:host .datetime-header .datetime-title{font-size:0.75rem;text-transform:uppercase}:host .datetime-header .datetime-selected-date{margin-top:30px;font-size:2.125rem}:host .calendar-action-buttons ion-button{--color:var(--ion-color-step-650, var(--ion-text-color-step-350, #595959))}.calendar-month-year-toggle{-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:12px;padding-bottom:12px;min-height:48px;background:transparent;color:var(--ion-color-step-650, var(--ion-text-color-step-350, #595959));z-index:1}.calendar-month-year-toggle.ion-focused::after{opacity:0.04}.calendar-month-year-toggle ion-ripple-effect{color:currentColor}@media (any-hover: hover){.calendar-month-year-toggle.ion-activatable:not(.ion-focused):hover::after{background:currentColor;opacity:0.04}}:host .calendar-days-of-week{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:0px;padding-bottom:0px;color:var(--ion-color-step-500, var(--ion-text-color-step-500, gray));font-size:0.875rem;line-height:36px}:host .calendar-body .calendar-month .calendar-month-grid{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:4px;padding-bottom:4px;grid-template-rows:repeat(6, 1fr)}:host .calendar-day{width:42px;min-width:42px;height:42px;font-size:0.875rem}:host .calendar-day.calendar-day-today{border:1px solid var(--ion-color-base);color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-contrast)}.calendar-day.calendar-day-active{border:1px solid var(--ion-color-base);background:var(--ion-color-base)}:host .datetime-time{-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:8px;padding-bottom:8px}:host .time-header{color:var(--ion-color-step-650, var(--ion-text-color-step-350, #595959))}:host(.datetime-presentation-month) .datetime-year,:host(.datetime-presentation-year) .datetime-year,:host(.datetime-presentation-month-year) .datetime-year{margin-top:20px;margin-bottom:20px}:host .datetime-buttons{-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px;padding-top:10px;padding-bottom:10px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end}\";\nvar IonDatetimeMdStyle0 = datetimeMdCss;\n\nvar Datetime = /*#__PURE__*/function () {\n  function Datetime(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Datetime);\n\n    registerInstance(this, hostRef);\n    this.ionCancel = createEvent(this, \"ionCancel\", 7);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.ionRender = createEvent(this, \"ionRender\", 7);\n    this.inputId = \"ion-dt-\".concat(datetimeIds++);\n    this.prevPresentation = null;\n\n    this.warnIfIncorrectValueUsage = function () {\n      var multiple = _this.multiple,\n          value = _this.value;\n\n      if (!multiple && Array.isArray(value)) {\n        /**\n         * We do some processing on the `value` array so\n         * that it looks more like an array when logged to\n         * the console.\n         * Example given ['a', 'b']\n         * Default toString() behavior: a,b\n         * Custom behavior: ['a', 'b']\n         */\n        printIonWarning(\"ion-datetime was passed an array of values, but multiple=\\\"false\\\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \\\"value\\\" property when multiple=\\\"false\\\".\\n\\n  Value Passed: [\".concat(value.map(function (v) {\n          return \"'\".concat(v, \"'\");\n        }).join(', '), \"]\\n\"), _this.el);\n      }\n    };\n\n    this.setValue = function (value) {\n      _this.value = value;\n\n      _this.ionChange.emit({\n        value: value\n      });\n    };\n    /**\n     * Returns the DatetimePart interface\n     * to use when rendering an initial set of\n     * data. This should be used when rendering an\n     * interface in an environment where the `value`\n     * may not be set. This function works\n     * by returning the first selected date and then\n     * falling back to defaultParts if no active date\n     * is selected.\n     */\n\n\n    this.getActivePartsWithFallback = function () {\n      var _a;\n\n      var defaultParts = _this.defaultParts;\n      return (_a = _this.getActivePart()) !== null && _a !== void 0 ? _a : defaultParts;\n    };\n\n    this.getActivePart = function () {\n      var activeParts = _this.activeParts;\n      return Array.isArray(activeParts) ? activeParts[0] : activeParts;\n    };\n\n    this.closeParentOverlay = function (role) {\n      var popoverOrModal = _this.el.closest('ion-modal, ion-popover');\n\n      if (popoverOrModal) {\n        popoverOrModal.dismiss(undefined, role);\n      }\n    };\n\n    this.setWorkingParts = function (parts) {\n      _this.workingParts = Object.assign({}, parts);\n    };\n\n    this.setActiveParts = function (parts) {\n      var removeDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      /** if the datetime component is in readonly mode,\n       * allow browsing of the calendar without changing\n       * the set value\n       */\n      if (_this.readonly) {\n        return;\n      }\n\n      var multiple = _this.multiple,\n          minParts = _this.minParts,\n          maxParts = _this.maxParts,\n          activeParts = _this.activeParts;\n      /**\n       * When setting the active parts, it is possible\n       * to set invalid data. For example,\n       * when updating January 31 to February,\n       * February 31 does not exist. As a result\n       * we need to validate the active parts and\n       * ensure that we are only setting valid dates.\n       * Additionally, we need to update the working parts\n       * too in the event that the validated parts are different.\n       */\n\n      var validatedParts = validateParts(parts, minParts, maxParts);\n\n      _this.setWorkingParts(validatedParts);\n\n      if (multiple) {\n        var activePartsArray = Array.isArray(activeParts) ? activeParts : [activeParts];\n\n        if (removeDate) {\n          _this.activeParts = activePartsArray.filter(function (p) {\n            return !isSameDay(p, validatedParts);\n          });\n        } else {\n          _this.activeParts = [].concat(_toConsumableArray(activePartsArray), [validatedParts]);\n        }\n      } else {\n        _this.activeParts = Object.assign({}, validatedParts);\n      }\n\n      var hasSlottedButtons = _this.el.querySelector('[slot=\"buttons\"]') !== null;\n\n      if (hasSlottedButtons || _this.showDefaultButtons) {\n        return;\n      }\n\n      _this.confirm();\n    };\n\n    this.initializeKeyboardListeners = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n\n      if (!calendarBodyRef) {\n        return;\n      }\n\n      var root = _this.el.shadowRoot;\n      /**\n       * Get a reference to the month\n       * element we are currently viewing.\n       */\n\n      var currentMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(2)');\n      /**\n       * When focusing the calendar body, we want to pass focus\n       * to the working day, but other days should\n       * only be accessible using the arrow keys. Pressing\n       * Tab should jump between bodies of selectable content.\n       */\n\n      var checkCalendarBodyFocus = function checkCalendarBodyFocus(ev) {\n        var _a;\n\n        var record = ev[0];\n        /**\n         * If calendar body was already focused\n         * when this fired or if the calendar body\n         * if not currently focused, we should not re-focus\n         * the inner day.\n         */\n\n        if (((_a = record.oldValue) === null || _a === void 0 ? void 0 : _a.includes('ion-focused')) || !calendarBodyRef.classList.contains('ion-focused')) {\n          return;\n        }\n\n        _this.focusWorkingDay(currentMonth);\n      };\n\n      var mo = new MutationObserver(checkCalendarBodyFocus);\n      mo.observe(calendarBodyRef, {\n        attributeFilter: ['class'],\n        attributeOldValue: true\n      });\n\n      _this.destroyKeyboardMO = function () {\n        mo === null || mo === void 0 ? void 0 : mo.disconnect();\n      };\n      /**\n       * We must use keydown not keyup as we want\n       * to prevent scrolling when using the arrow keys.\n       */\n\n\n      calendarBodyRef.addEventListener('keydown', function (ev) {\n        var activeElement = root.activeElement;\n\n        if (!activeElement || !activeElement.classList.contains('calendar-day')) {\n          return;\n        }\n\n        var parts = getPartsFromCalendarDay(activeElement);\n        var partsToFocus;\n\n        switch (ev.key) {\n          case 'ArrowDown':\n            ev.preventDefault();\n            partsToFocus = getNextWeek(parts);\n            break;\n\n          case 'ArrowUp':\n            ev.preventDefault();\n            partsToFocus = getPreviousWeek(parts);\n            break;\n\n          case 'ArrowRight':\n            ev.preventDefault();\n            partsToFocus = getNextDay(parts);\n            break;\n\n          case 'ArrowLeft':\n            ev.preventDefault();\n            partsToFocus = getPreviousDay(parts);\n            break;\n\n          case 'Home':\n            ev.preventDefault();\n            partsToFocus = getStartOfWeek(parts);\n            break;\n\n          case 'End':\n            ev.preventDefault();\n            partsToFocus = getEndOfWeek(parts);\n            break;\n\n          case 'PageUp':\n            ev.preventDefault();\n            partsToFocus = ev.shiftKey ? getPreviousYear(parts) : getPreviousMonth(parts);\n            break;\n\n          case 'PageDown':\n            ev.preventDefault();\n            partsToFocus = ev.shiftKey ? getNextYear(parts) : getNextMonth(parts);\n            break;\n\n          /**\n           * Do not preventDefault here\n           * as we do not want to override other\n           * browser defaults such as pressing Enter/Space\n           * to select a day.\n           */\n\n          default:\n            return;\n        }\n        /**\n         * If the day we want to move focus to is\n         * disabled, do not do anything.\n         */\n\n\n        if (isDayDisabled(partsToFocus, _this.minParts, _this.maxParts)) {\n          return;\n        }\n\n        _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), partsToFocus));\n        /**\n         * Give view a chance to re-render\n         * then move focus to the new working day\n         */\n\n\n        requestAnimationFrame(function () {\n          return _this.focusWorkingDay(currentMonth);\n        });\n      });\n    };\n\n    this.focusWorkingDay = function (currentMonth) {\n      /**\n       * Get the number of padding days so\n       * we know how much to offset our next selector by\n       * to grab the correct calendar-day element.\n       */\n      var padding = currentMonth.querySelectorAll('.calendar-day-padding');\n      var day = _this.workingParts.day;\n\n      if (day === null) {\n        return;\n      }\n      /**\n       * Get the calendar day element\n       * and focus it.\n       */\n\n\n      var dayEl = currentMonth.querySelector(\".calendar-day-wrapper:nth-of-type(\".concat(padding.length + day, \") .calendar-day\"));\n\n      if (dayEl) {\n        dayEl.focus();\n      }\n    };\n\n    this.processMinParts = function () {\n      var min = _this.min,\n          defaultParts = _this.defaultParts;\n\n      if (min === undefined) {\n        _this.minParts = undefined;\n        return;\n      }\n\n      _this.minParts = parseMinParts(min, defaultParts);\n    };\n\n    this.processMaxParts = function () {\n      var max = _this.max,\n          defaultParts = _this.defaultParts;\n\n      if (max === undefined) {\n        _this.maxParts = undefined;\n        return;\n      }\n\n      _this.maxParts = parseMaxParts(max, defaultParts);\n    };\n\n    this.initializeCalendarListener = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n\n      if (!calendarBodyRef) {\n        return;\n      }\n      /**\n       * For performance reasons, we only render 3\n       * months at a time: The current month, the previous\n       * month, and the next month. We have a scroll listener\n       * on the calendar body to append/prepend new months.\n       *\n       * We can do this because Stencil is smart enough to not\n       * re-create the .calendar-month containers, but rather\n       * update the content within those containers.\n       *\n       * As an added bonus, WebKit has some troubles with\n       * scroll-snap-stop: always, so not rendering all of\n       * the months in a row allows us to mostly sidestep\n       * that issue.\n       */\n\n\n      var months = calendarBodyRef.querySelectorAll('.calendar-month');\n      var startMonth = months[0];\n      var workingMonth = months[1];\n      var endMonth = months[2];\n      var mode = getIonMode(_this);\n      var needsiOSRubberBandFix = mode === 'ios' && typeof navigator !== 'undefined' && navigator.maxTouchPoints > 1;\n      /**\n       * Before setting up the scroll listener,\n       * scroll the middle month into view.\n       * scrollIntoView() will scroll entire page\n       * if element is not in viewport. Use scrollLeft instead.\n       */\n\n      writeTask(function () {\n        calendarBodyRef.scrollLeft = startMonth.clientWidth * (isRTL(_this.el) ? -1 : 1);\n\n        var getChangedMonth = function getChangedMonth(parts) {\n          var box = calendarBodyRef.getBoundingClientRect();\n          /**\n           * If the current scroll position is all the way to the left\n           * then we have scrolled to the previous month.\n           * Otherwise, assume that we have scrolled to the next\n           * month. We have a tolerance of 2px to account for\n           * sub pixel rendering.\n           *\n           * Check below the next line ensures that we did not\n           * swipe and abort (i.e. we swiped but we are still on the current month).\n           */\n\n          var condition = isRTL(_this.el) ? calendarBodyRef.scrollLeft >= -2 : calendarBodyRef.scrollLeft <= 2;\n          var month = condition ? startMonth : endMonth;\n          /**\n           * The edge of the month must be lined up with\n           * the edge of the calendar body in order for\n           * the component to update. Otherwise, it\n           * may be the case that the user has paused their\n           * swipe or the browser has not finished snapping yet.\n           * Rather than check if the x values are equal,\n           * we give it a tolerance of 2px to account for\n           * sub pixel rendering.\n           */\n\n          var monthBox = month.getBoundingClientRect();\n          if (Math.abs(monthBox.x - box.x) > 2) return;\n          /**\n           * If we're force-rendering a month, assume we've\n           * scrolled to that and return it.\n           *\n           * If forceRenderDate is ever used in a context where the\n           * forced month is not immediately auto-scrolled to, this\n           * should be updated to also check whether `month` has the\n           * same month and year as the forced date.\n           */\n\n          var forceRenderDate = _this.forceRenderDate;\n\n          if (forceRenderDate !== undefined) {\n            return {\n              month: forceRenderDate.month,\n              year: forceRenderDate.year,\n              day: forceRenderDate.day\n            };\n          }\n          /**\n           * From here, we can determine if the start\n           * month or the end month was scrolled into view.\n           * If no month was changed, then we can return from\n           * the scroll callback early.\n           */\n\n\n          if (month === startMonth) {\n            return getPreviousMonth(parts);\n          } else if (month === endMonth) {\n            return getNextMonth(parts);\n          } else {\n            return;\n          }\n        };\n\n        var updateActiveMonth = function updateActiveMonth() {\n          if (needsiOSRubberBandFix) {\n            calendarBodyRef.style.removeProperty('pointer-events');\n            appliediOSRubberBandFix = false;\n          }\n          /**\n           * If the month did not change\n           * then we can return early.\n           */\n\n\n          var newDate = getChangedMonth(_this.workingParts);\n          if (!newDate) return;\n          var month = newDate.month,\n              day = newDate.day,\n              year = newDate.year;\n\n          if (isMonthDisabled({\n            month: month,\n            year: year,\n            day: null\n          }, {\n            minParts: Object.assign(Object.assign({}, _this.minParts), {\n              day: null\n            }),\n            maxParts: Object.assign(Object.assign({}, _this.maxParts), {\n              day: null\n            })\n          })) {\n            return;\n          }\n          /**\n           * Prevent scrolling for other browsers\n           * to give the DOM time to update and the container\n           * time to properly snap.\n           */\n\n\n          calendarBodyRef.style.setProperty('overflow', 'hidden');\n          /**\n           * Use a writeTask here to ensure\n           * that the state is updated and the\n           * correct month is scrolled into view\n           * in the same frame. This is not\n           * typically a problem on newer devices\n           * but older/slower device may have a flicker\n           * if we did not do this.\n           */\n\n          writeTask(function () {\n            _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), {\n              month: month,\n              day: day,\n              year: year\n            }));\n\n            calendarBodyRef.scrollLeft = workingMonth.clientWidth * (isRTL(_this.el) ? -1 : 1);\n            calendarBodyRef.style.removeProperty('overflow');\n\n            if (_this.resolveForceDateScrolling) {\n              _this.resolveForceDateScrolling();\n            }\n          });\n        };\n        /**\n         * When the container finishes scrolling we\n         * need to update the DOM with the selected month.\n         */\n\n\n        var scrollTimeout;\n        /**\n         * We do not want to attempt to set pointer-events\n         * multiple times within a single swipe gesture as\n         * that adds unnecessary work to the main thread.\n         */\n\n        var appliediOSRubberBandFix = false;\n\n        var scrollCallback = function scrollCallback() {\n          if (scrollTimeout) {\n            clearTimeout(scrollTimeout);\n          }\n          /**\n           * On iOS it is possible to quickly rubber band\n           * the scroll area before the scroll timeout has fired.\n           * This results in users reaching the end of the scrollable\n           * container before the DOM has updated.\n           * By setting `pointer-events: none` we can ensure that\n           * subsequent swipes do not happen while the container\n           * is snapping.\n           */\n\n\n          if (!appliediOSRubberBandFix && needsiOSRubberBandFix) {\n            calendarBodyRef.style.setProperty('pointer-events', 'none');\n            appliediOSRubberBandFix = true;\n          } // Wait ~3 frames\n\n\n          scrollTimeout = setTimeout(updateActiveMonth, 50);\n        };\n\n        calendarBodyRef.addEventListener('scroll', scrollCallback);\n\n        _this.destroyCalendarListener = function () {\n          calendarBodyRef.removeEventListener('scroll', scrollCallback);\n        };\n      });\n    };\n    /**\n     * Clean up all listeners except for the overlay\n     * listener. This is so that we can re-create the listeners\n     * if the datetime has been hidden/presented by a modal or popover.\n     */\n\n\n    this.destroyInteractionListeners = function () {\n      var destroyCalendarListener = _this.destroyCalendarListener,\n          destroyKeyboardMO = _this.destroyKeyboardMO;\n\n      if (destroyCalendarListener !== undefined) {\n        destroyCalendarListener();\n      }\n\n      if (destroyKeyboardMO !== undefined) {\n        destroyKeyboardMO();\n      }\n    };\n\n    this.processValue = function (value) {\n      var hasValue = value !== null && value !== undefined && (!Array.isArray(value) || value.length > 0);\n      var valueToProcess = hasValue ? parseDate(value) : _this.defaultParts;\n      var minParts = _this.minParts,\n          maxParts = _this.maxParts,\n          workingParts = _this.workingParts,\n          el = _this.el;\n\n      _this.warnIfIncorrectValueUsage();\n      /**\n       * Return early if the value wasn't parsed correctly, such as\n       * if an improperly formatted date string was provided.\n       */\n\n\n      if (!valueToProcess) {\n        return;\n      }\n      /**\n       * Datetime should only warn of out of bounds values\n       * if set by the user. If the `value` is undefined,\n       * we will default to today's date which may be out\n       * of bounds. In this case, the warning makes it look\n       * like the developer did something wrong which is\n       * not true.\n       */\n\n\n      if (hasValue) {\n        warnIfValueOutOfBounds(valueToProcess, minParts, maxParts);\n      }\n      /**\n       * If there are multiple values, pick an arbitrary one to clamp to. This way,\n       * if the values are across months, we always show at least one of them. Note\n       * that the values don't necessarily have to be in order.\n       */\n\n\n      var singleValue = Array.isArray(valueToProcess) ? valueToProcess[0] : valueToProcess;\n      var targetValue = clampDate(singleValue, minParts, maxParts);\n      var month = targetValue.month,\n          day = targetValue.day,\n          year = targetValue.year,\n          hour = targetValue.hour,\n          minute = targetValue.minute;\n      var ampm = parseAmPm(hour);\n      /**\n       * Since `activeParts` indicates a value that\n       * been explicitly selected either by the\n       * user or the app, only update `activeParts`\n       * if the `value` property is set.\n       */\n\n      if (hasValue) {\n        if (Array.isArray(valueToProcess)) {\n          _this.activeParts = _toConsumableArray(valueToProcess);\n        } else {\n          _this.activeParts = {\n            month: month,\n            day: day,\n            year: year,\n            hour: hour,\n            minute: minute,\n            ampm: ampm\n          };\n        }\n      } else {\n        /**\n         * Reset the active parts if the value is not set.\n         * This will clear the selected calendar day when\n         * performing a clear action or using the reset() method.\n         */\n        _this.activeParts = [];\n      }\n      /**\n       * Only animate if:\n       * 1. We're using grid style (wheel style pickers should just jump to new value)\n       * 2. The month and/or year actually changed, and both are defined (otherwise there's nothing to animate to)\n       * 3. The calendar body is visible (prevents animation when in collapsed datetime-button, for example)\n       * 4. The month/year picker is not open (since you wouldn't see the animation anyway)\n       */\n\n\n      var didChangeMonth = month !== undefined && month !== workingParts.month || year !== undefined && year !== workingParts.year;\n      var bodyIsVisible = el.classList.contains('datetime-ready');\n      var isGridStyle = _this.isGridStyle,\n          showMonthAndYear = _this.showMonthAndYear;\n      var areAllSelectedDatesInSameMonth = true;\n\n      if (Array.isArray(valueToProcess)) {\n        var firstMonth = valueToProcess[0].month;\n\n        var _iterator = _createForOfIteratorHelper(valueToProcess),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var date = _step.value;\n\n            if (date.month !== firstMonth) {\n              areAllSelectedDatesInSameMonth = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      /**\n       * If there is more than one date selected\n       * and the dates aren't all in the same month,\n       * then we should neither animate to the date\n       * nor update the working parts because we do\n       * not know which date the user wants to view.\n       */\n\n\n      if (areAllSelectedDatesInSameMonth) {\n        if (isGridStyle && didChangeMonth && bodyIsVisible && !showMonthAndYear) {\n          _this.animateToDate(targetValue);\n        } else {\n          /**\n           * We only need to do this if we didn't just animate to a new month,\n           * since that calls prevMonth/nextMonth which calls setWorkingParts for us.\n           */\n          _this.setWorkingParts({\n            month: month,\n            day: day,\n            year: year,\n            hour: hour,\n            minute: minute,\n            ampm: ampm\n          });\n        }\n      }\n    };\n\n    this.animateToDate = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(targetValue) {\n        var workingParts, forceDateScrollingPromise, targetMonthIsBefore;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              workingParts = _this.workingParts;\n              /**\n               * Tell other render functions that we need to force the\n               * target month to appear in place of the actual next/prev month.\n               * Because this is a State variable, a rerender will be triggered\n               * automatically, updating the rendered months.\n               */\n\n              _this.forceRenderDate = targetValue;\n              /**\n               * Flag that we've started scrolling to the forced date.\n               * The resolve function will be called by the datetime's\n               * scroll listener when it's done updating everything.\n               * This is a replacement for making prev/nextMonth async,\n               * since the logic we're waiting on is in a listener.\n               */\n\n              forceDateScrollingPromise = new Promise(function (resolve) {\n                _this.resolveForceDateScrolling = resolve;\n              });\n              /**\n               * Animate smoothly to the forced month. This will also update\n               * workingParts and correct the surrounding months for us.\n               */\n\n              targetMonthIsBefore = isBefore(targetValue, workingParts);\n              targetMonthIsBefore ? _this.prevMonth() : _this.nextMonth();\n              _context.next = 7;\n              return forceDateScrollingPromise;\n\n            case 7:\n              _this.resolveForceDateScrolling = undefined;\n              _this.forceRenderDate = undefined;\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n\n    this.hasValue = function () {\n      return _this.value != null;\n    };\n\n    this.nextMonth = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n\n      if (!calendarBodyRef) {\n        return;\n      }\n\n      var nextMonth = calendarBodyRef.querySelector('.calendar-month:last-of-type');\n\n      if (!nextMonth) {\n        return;\n      }\n\n      var left = nextMonth.offsetWidth * 2;\n      calendarBodyRef.scrollTo({\n        top: 0,\n        left: left * (isRTL(_this.el) ? -1 : 1),\n        behavior: 'smooth'\n      });\n    };\n\n    this.prevMonth = function () {\n      var calendarBodyRef = _this.calendarBodyRef;\n\n      if (!calendarBodyRef) {\n        return;\n      }\n\n      var prevMonth = calendarBodyRef.querySelector('.calendar-month:first-of-type');\n\n      if (!prevMonth) {\n        return;\n      }\n\n      calendarBodyRef.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: 'smooth'\n      });\n    };\n\n    this.toggleMonthAndYearView = function () {\n      _this.showMonthAndYear = !_this.showMonthAndYear;\n    };\n\n    this.showMonthAndYear = false;\n    this.activeParts = [];\n    this.workingParts = {\n      month: 5,\n      day: 28,\n      year: 2021,\n      hour: 13,\n      minute: 52,\n      ampm: 'pm'\n    };\n    this.isTimePopoverOpen = false;\n    this.forceRenderDate = undefined;\n    this.color = 'primary';\n    this.name = this.inputId;\n    this.disabled = false;\n    this.formatOptions = undefined;\n    this.readonly = false;\n    this.isDateEnabled = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this.presentation = 'date-time';\n    this.cancelText = 'Cancel';\n    this.doneText = 'Done';\n    this.clearText = 'Clear';\n    this.yearValues = undefined;\n    this.monthValues = undefined;\n    this.dayValues = undefined;\n    this.hourValues = undefined;\n    this.minuteValues = undefined;\n    this.locale = 'default';\n    this.firstDayOfWeek = 0;\n    this.titleSelectedDatesFormatter = undefined;\n    this.multiple = false;\n    this.highlightedDates = undefined;\n    this.value = undefined;\n    this.showDefaultTitle = false;\n    this.showDefaultButtons = false;\n    this.showClearButton = false;\n    this.showDefaultTimeLabel = true;\n    this.hourCycle = undefined;\n    this.size = 'fixed';\n    this.preferWheel = false;\n  }\n\n  return _createClass(Datetime, [{\n    key: \"formatOptionsChanged\",\n    value: function formatOptionsChanged() {\n      var el = this.el,\n          formatOptions = this.formatOptions,\n          presentation = this.presentation;\n      checkForPresentationFormatMismatch(el, presentation, formatOptions);\n      warnIfTimeZoneProvided(el, formatOptions);\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function disabledChanged() {\n      this.emitStyle();\n    }\n  }, {\n    key: \"minChanged\",\n    value: function minChanged() {\n      this.processMinParts();\n    }\n  }, {\n    key: \"maxChanged\",\n    value: function maxChanged() {\n      this.processMaxParts();\n    }\n  }, {\n    key: \"presentationChanged\",\n    value: function presentationChanged() {\n      var el = this.el,\n          formatOptions = this.formatOptions,\n          presentation = this.presentation;\n      checkForPresentationFormatMismatch(el, presentation, formatOptions);\n    }\n  }, {\n    key: \"isGridStyle\",\n    get: function get() {\n      var presentation = this.presentation,\n          preferWheel = this.preferWheel;\n      var hasDatePresentation = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n      return hasDatePresentation && !preferWheel;\n    }\n  }, {\n    key: \"yearValuesChanged\",\n    value: function yearValuesChanged() {\n      this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);\n    }\n  }, {\n    key: \"monthValuesChanged\",\n    value: function monthValuesChanged() {\n      this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);\n    }\n  }, {\n    key: \"dayValuesChanged\",\n    value: function dayValuesChanged() {\n      this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);\n    }\n  }, {\n    key: \"hourValuesChanged\",\n    value: function hourValuesChanged() {\n      this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);\n    }\n  }, {\n    key: \"minuteValuesChanged\",\n    value: function minuteValuesChanged() {\n      this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);\n    }\n    /**\n     * Update the datetime value when the value changes\n     */\n\n  }, {\n    key: \"valueChanged\",\n    value: function () {\n      var _valueChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              value = this.value;\n\n              if (this.hasValue()) {\n                this.processValue(value);\n              }\n\n              this.emitStyle();\n              this.ionValueChange.emit({\n                value: value\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function valueChanged() {\n        return _valueChanged.apply(this, arguments);\n      }\n\n      return valueChanged;\n    }()\n    /**\n     * Confirms the selected datetime value, updates the\n     * `value` property, and optionally closes the popover\n     * or modal that the datetime was presented in.\n     */\n\n  }, {\n    key: \"confirm\",\n    value: function () {\n      var _confirm = _asyncToGenerator(function () {\n        var _this2 = this;\n\n        var closeOverlay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var isCalendarPicker, activeParts, preferWheel, workingParts, activePartsIsArray;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                isCalendarPicker = _this2.isCalendarPicker, activeParts = _this2.activeParts, preferWheel = _this2.preferWheel, workingParts = _this2.workingParts;\n                /**\n                 * We only update the value if the presentation is not a calendar picker.\n                 */\n\n                if (activeParts !== undefined || !isCalendarPicker) {\n                  activePartsIsArray = Array.isArray(activeParts);\n\n                  if (activePartsIsArray && activeParts.length === 0) {\n                    if (preferWheel) {\n                      /**\n                       * If the datetime is using a wheel picker, but the\n                       * active parts are empty, then the user has confirmed the\n                       * initial value (working parts) presented to them.\n                       */\n                      _this2.setValue(convertDataToISO(workingParts));\n                    } else {\n                      _this2.setValue(undefined);\n                    }\n                  } else {\n                    _this2.setValue(convertDataToISO(activeParts));\n                  }\n                }\n\n                if (closeOverlay) {\n                  _this2.closeParentOverlay(CONFIRM_ROLE);\n                }\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        })();\n      });\n\n      function confirm() {\n        return _confirm.apply(this, arguments);\n      }\n\n      return confirm;\n    }()\n    /**\n     * Resets the internal state of the datetime but does not update the value.\n     * Passing a valid ISO-8601 string will reset the state of the component to the provided date.\n     * If no value is provided, the internal state will be reset to the clamped value of the min, max and today.\n     */\n\n  }, {\n    key: \"reset\",\n    value: function () {\n      var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(startDate) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this.processValue(startDate);\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n\n      function reset(_x2) {\n        return _reset.apply(this, arguments);\n      }\n\n      return reset;\n    }()\n    /**\n     * Emits the ionCancel event and\n     * optionally closes the popover\n     * or modal that the datetime was\n     * presented in.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator(function () {\n        var _this3 = this;\n\n        var closeOverlay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _this3.ionCancel.emit();\n\n                if (closeOverlay) {\n                  _this3.closeParentOverlay(CANCEL_ROLE);\n                }\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5);\n        })();\n      });\n\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n  }, {\n    key: \"isCalendarPicker\",\n    get: function get() {\n      var presentation = this.presentation;\n      return presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      this.clearFocusVisible = startFocusVisible(this.el).destroy;\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.clearFocusVisible) {\n        this.clearFocusVisible();\n        this.clearFocusVisible = undefined;\n      }\n    }\n  }, {\n    key: \"initializeListeners\",\n    value: function initializeListeners() {\n      this.initializeCalendarListener();\n      this.initializeKeyboardListeners();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this4 = this;\n\n      var el = this.el,\n          intersectionTrackerRef = this.intersectionTrackerRef;\n      /**\n       * If a scrollable element is hidden using `display: none`,\n       * it will not have a scroll height meaning we cannot scroll elements\n       * into view. As a result, we will need to wait for the datetime to become\n       * visible if used inside of a modal or a popover otherwise the scrollable\n       * areas will not have the correct values snapped into place.\n       */\n\n      var visibleCallback = function visibleCallback(entries) {\n        var ev = entries[0];\n\n        if (!ev.isIntersecting) {\n          return;\n        }\n\n        _this4.initializeListeners();\n        /**\n         * TODO FW-2793: Datetime needs a frame to ensure that it\n         * can properly scroll contents into view. As a result\n         * we hide the scrollable content until after that frame\n         * so users do not see the content quickly shifting. The downside\n         * is that the content will pop into view a frame after. Maybe there\n         * is a better way to handle this?\n         */\n\n\n        writeTask(function () {\n          _this4.el.classList.add('datetime-ready');\n        });\n      };\n\n      var visibleIO = new IntersectionObserver(visibleCallback, {\n        threshold: 0.01,\n        root: el\n      });\n      /**\n       * Use raf to avoid a race condition between the component loading and\n       * its display animation starting (such as when shown in a modal). This\n       * could cause the datetime to start at a visibility of 0, erroneously\n       * triggering the `hiddenIO` observer below.\n       */\n\n      raf(function () {\n        return visibleIO === null || visibleIO === void 0 ? void 0 : visibleIO.observe(intersectionTrackerRef);\n      });\n      /**\n       * We need to clean up listeners when the datetime is hidden\n       * in a popover/modal so that we can properly scroll containers\n       * back into view if they are re-presented. When the datetime is hidden\n       * the scroll areas have scroll widths/heights of 0px, so any snapping\n       * we did originally has been lost.\n       */\n\n      var hiddenCallback = function hiddenCallback(entries) {\n        var ev = entries[0];\n\n        if (ev.isIntersecting) {\n          return;\n        }\n\n        _this4.destroyInteractionListeners();\n        /**\n         * When datetime is hidden, we need to make sure that\n         * the month/year picker is closed. Otherwise,\n         * it will be open when the datetime re-appears\n         * and the scroll area of the calendar grid will be 0.\n         * As a result, the wrong month will be shown.\n         */\n\n\n        _this4.showMonthAndYear = false;\n        writeTask(function () {\n          _this4.el.classList.remove('datetime-ready');\n        });\n      };\n\n      var hiddenIO = new IntersectionObserver(hiddenCallback, {\n        threshold: 0,\n        root: el\n      });\n      raf(function () {\n        return hiddenIO === null || hiddenIO === void 0 ? void 0 : hiddenIO.observe(intersectionTrackerRef);\n      });\n      /**\n       * Datetime uses Ionic components that emit\n       * ionFocus and ionBlur. These events are\n       * composed meaning they will cross\n       * the shadow dom boundary. We need to\n       * stop propagation on these events otherwise\n       * developers will see 2 ionFocus or 2 ionBlur\n       * events at a time.\n       */\n\n      var root = getElementRoot(this.el);\n      root.addEventListener('ionFocus', function (ev) {\n        return ev.stopPropagation();\n      });\n      root.addEventListener('ionBlur', function (ev) {\n        return ev.stopPropagation();\n      });\n    }\n    /**\n     * When the presentation is changed, all calendar content is recreated,\n     * so we need to re-init behavior with the new elements.\n     */\n\n  }, {\n    key: \"componentDidRender\",\n    value: function componentDidRender() {\n      var _this5 = this;\n\n      var presentation = this.presentation,\n          prevPresentation = this.prevPresentation,\n          calendarBodyRef = this.calendarBodyRef,\n          minParts = this.minParts,\n          preferWheel = this.preferWheel,\n          forceRenderDate = this.forceRenderDate;\n      /**\n       * TODO(FW-2165)\n       * Remove this when https://bugs.webkit.org/show_bug.cgi?id=235960 is fixed.\n       * When using `min`, we add `scroll-snap-align: none`\n       * to the disabled month so that users cannot scroll to it.\n       * This triggers a bug in WebKit where the scroll position is reset.\n       * Since the month change logic is handled by a scroll listener,\n       * this causes the month to change leading to `scroll-snap-align`\n       * changing again, thus changing the scroll position again and causing\n       * an infinite loop.\n       * This issue only applies to the calendar grid, so we can disable\n       * it if the calendar grid is not being used.\n       */\n\n      var hasCalendarGrid = !preferWheel && ['date-time', 'time-date', 'date'].includes(presentation);\n\n      if (minParts !== undefined && hasCalendarGrid && calendarBodyRef) {\n        var workingMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(1)');\n        /**\n         * We need to make sure the datetime is not in the process\n         * of scrolling to a new datetime value if the value\n         * is updated programmatically.\n         * Otherwise, the datetime will appear to not scroll at all because\n         * we are resetting the scroll position to the center of the view.\n         * Prior to the datetime's value being updated programmatically,\n         * the calendarBodyRef is scrolled such that the middle month is centered\n         * in the view. The below code updates the scroll position so the middle\n         * month is also centered in the view. Since the scroll position did not change,\n         * the scroll callback in this file does not fire,\n         * and the resolveForceDateScrolling promise never resolves.\n         */\n\n        if (workingMonth && forceRenderDate === undefined) {\n          calendarBodyRef.scrollLeft = workingMonth.clientWidth * (isRTL(this.el) ? -1 : 1);\n        }\n      }\n\n      if (prevPresentation === null) {\n        this.prevPresentation = presentation;\n        return;\n      }\n\n      if (presentation === prevPresentation) {\n        return;\n      }\n\n      this.prevPresentation = presentation;\n      this.destroyInteractionListeners();\n      this.initializeListeners();\n      /**\n       * The month/year picker from the date interface\n       * should be closed as it is not available in non-date\n       * interfaces.\n       */\n\n      this.showMonthAndYear = false;\n      raf(function () {\n        _this5.ionRender.emit();\n      });\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      var el = this.el,\n          formatOptions = this.formatOptions,\n          highlightedDates = this.highlightedDates,\n          multiple = this.multiple,\n          presentation = this.presentation,\n          preferWheel = this.preferWheel;\n\n      if (multiple) {\n        if (presentation !== 'date') {\n          printIonWarning('Multiple date selection is only supported for presentation=\"date\".', el);\n        }\n\n        if (preferWheel) {\n          printIonWarning('Multiple date selection is not supported with preferWheel=\"true\".', el);\n        }\n      }\n\n      if (highlightedDates !== undefined) {\n        if (presentation !== 'date' && presentation !== 'date-time' && presentation !== 'time-date') {\n          printIonWarning('The highlightedDates property is only supported with the date, date-time, and time-date presentations.', el);\n        }\n\n        if (preferWheel) {\n          printIonWarning('The highlightedDates property is not supported with preferWheel=\"true\".', el);\n        }\n      }\n\n      if (formatOptions) {\n        checkForPresentationFormatMismatch(el, presentation, formatOptions);\n        warnIfTimeZoneProvided(el, formatOptions);\n      }\n\n      var hourValues = this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);\n      var minuteValues = this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);\n      var monthValues = this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);\n      var yearValues = this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);\n      var dayValues = this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);\n      var todayParts = this.todayParts = parseDate(getToday());\n      this.processMinParts();\n      this.processMaxParts();\n      this.defaultParts = getClosestValidDate({\n        refParts: todayParts,\n        monthValues: monthValues,\n        dayValues: dayValues,\n        yearValues: yearValues,\n        hourValues: hourValues,\n        minuteValues: minuteValues,\n        minParts: this.minParts,\n        maxParts: this.maxParts\n      });\n      this.processValue(this.value);\n      this.emitStyle();\n    }\n  }, {\n    key: \"emitStyle\",\n    value: function emitStyle() {\n      this.ionStyle.emit({\n        interactive: true,\n        datetime: true,\n        'interactive-disabled': this.disabled\n      });\n    }\n    /**\n     * Universal render methods\n     * These are pieces of datetime that\n     * are rendered independently of presentation.\n     */\n\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var _this6 = this;\n\n      var disabled = this.disabled,\n          readonly = this.readonly,\n          showDefaultButtons = this.showDefaultButtons,\n          showClearButton = this.showClearButton;\n      /**\n       * The cancel, clear, and confirm buttons\n       * should not be interactive if the datetime\n       * is disabled or readonly.\n       */\n\n      var isButtonDisabled = disabled || readonly;\n      var hasSlottedButtons = this.el.querySelector('[slot=\"buttons\"]') !== null;\n\n      if (!hasSlottedButtons && !showDefaultButtons && !showClearButton) {\n        return;\n      }\n\n      var clearButtonClick = function clearButtonClick() {\n        _this6.reset();\n\n        _this6.setValue(undefined);\n      };\n      /**\n       * By default we render two buttons:\n       * Cancel - Dismisses the datetime and\n       * does not update the `value` prop.\n       * OK - Dismisses the datetime and\n       * updates the `value` prop.\n       */\n\n\n      return h(\"div\", {\n        class: \"datetime-footer\"\n      }, h(\"div\", {\n        class: \"datetime-buttons\"\n      }, h(\"div\", {\n        class: _defineProperty(_defineProperty({}, 'datetime-action-buttons', true), 'has-clear-button', this.showClearButton)\n      }, h(\"slot\", {\n        name: \"buttons\"\n      }, h(\"ion-buttons\", null, showDefaultButtons && h(\"ion-button\", {\n        id: \"cancel-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return _this6.cancel(true);\n        },\n        disabled: isButtonDisabled\n      }, this.cancelText), h(\"div\", {\n        class: \"datetime-action-buttons-container\"\n      }, showClearButton && h(\"ion-button\", {\n        id: \"clear-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return clearButtonClick();\n        },\n        disabled: isButtonDisabled\n      }, this.clearText), showDefaultButtons && h(\"ion-button\", {\n        id: \"confirm-button\",\n        color: this.color,\n        onClick: function onClick() {\n          return _this6.confirm(true);\n        },\n        disabled: isButtonDisabled\n      }, this.doneText)))))));\n    }\n    /**\n     * Wheel picker render methods\n     */\n\n  }, {\n    key: \"renderWheelPicker\",\n    value: function renderWheelPicker() {\n      var forcePresentation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.presentation;\n\n      /**\n       * If presentation=\"time-date\" we switch the\n       * order of the render array here instead of\n       * manually reordering each date/time picker\n       * column with CSS. This allows for additional\n       * flexibility if we need to render subsets\n       * of the date/time data or do additional ordering\n       * within the child render functions.\n       */\n      var renderArray = forcePresentation === 'time-date' ? [this.renderTimePickerColumns(forcePresentation), this.renderDatePickerColumns(forcePresentation)] : [this.renderDatePickerColumns(forcePresentation), this.renderTimePickerColumns(forcePresentation)];\n      return h(\"ion-picker\", null, renderArray);\n    }\n  }, {\n    key: \"renderDatePickerColumns\",\n    value: function renderDatePickerColumns(forcePresentation) {\n      return forcePresentation === 'date-time' || forcePresentation === 'time-date' ? this.renderCombinedDatePickerColumn() : this.renderIndividualDatePickerColumns(forcePresentation);\n    }\n  }, {\n    key: \"renderCombinedDatePickerColumn\",\n    value: function renderCombinedDatePickerColumn() {\n      var _this7 = this;\n\n      var defaultParts = this.defaultParts,\n          disabled = this.disabled,\n          workingParts = this.workingParts,\n          locale = this.locale,\n          minParts = this.minParts,\n          maxParts = this.maxParts,\n          todayParts = this.todayParts,\n          isDateEnabled = this.isDateEnabled;\n      var activePart = this.getActivePartsWithFallback();\n      /**\n       * By default, generate a range of 3 months:\n       * Previous month, current month, and next month\n       */\n\n      var monthsToRender = generateMonths(workingParts);\n      var lastMonth = monthsToRender[monthsToRender.length - 1];\n      /**\n       * Ensure that users can select the entire window of dates.\n       */\n\n      monthsToRender[0].day = 1;\n      lastMonth.day = getNumDaysInMonth(lastMonth.month, lastMonth.year);\n      /**\n       * Narrow the dates rendered based on min/max dates (if any).\n       * The `min` date is used if the min is after the generated min month.\n       * The `max` date is used if the max is before the generated max month.\n       * This ensures that the sliding window always stays at 3 months\n       * but still allows future dates to be lazily rendered based on any min/max\n       * constraints.\n       */\n\n      var min = minParts !== undefined && isAfter(minParts, monthsToRender[0]) ? minParts : monthsToRender[0];\n      var max = maxParts !== undefined && isBefore(maxParts, lastMonth) ? maxParts : lastMonth;\n      var result = getCombinedDateColumnData(locale, todayParts, min, max, this.parsedDayValues, this.parsedMonthValues);\n      var items = result.items;\n      var parts = result.parts;\n\n      if (isDateEnabled) {\n        items = items.map(function (itemObject, index) {\n          var referenceParts = parts[index];\n          var disabled;\n\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            disabled = !isDateEnabled(convertDataToISO(referenceParts));\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);\n          }\n\n          return Object.assign(Object.assign({}, itemObject), {\n            disabled: disabled\n          });\n        });\n      }\n      /**\n       * If we have selected a day already, then default the column\n       * to that value. Otherwise, set it to the default date.\n       */\n\n\n      var todayString = workingParts.day !== null ? \"\".concat(workingParts.year, \"-\").concat(workingParts.month, \"-\").concat(workingParts.day) : \"\".concat(defaultParts.year, \"-\").concat(defaultParts.month, \"-\").concat(defaultParts.day);\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a date\",\n        class: \"date-column\",\n        color: this.color,\n        disabled: disabled,\n        value: todayString,\n        onIonChange: function onIonChange(ev) {\n          var value = ev.detail.value;\n          var findPart = parts.find(function (_ref3) {\n            var month = _ref3.month,\n                day = _ref3.day,\n                year = _ref3.year;\n            return value === \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n          });\n\n          _this7.setWorkingParts(Object.assign(Object.assign({}, workingParts), findPart));\n\n          _this7.setActiveParts(Object.assign(Object.assign({}, activePart), findPart));\n\n          ev.stopPropagation();\n        }\n      }, items.map(function (item) {\n        return h(\"ion-picker-column-option\", {\n          part: item.value === todayString ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: item.value,\n          disabled: item.disabled,\n          value: item.value\n        }, item.text);\n      }));\n    }\n  }, {\n    key: \"renderIndividualDatePickerColumns\",\n    value: function renderIndividualDatePickerColumns(forcePresentation) {\n      var workingParts = this.workingParts,\n          isDateEnabled = this.isDateEnabled;\n      var shouldRenderMonths = forcePresentation !== 'year' && forcePresentation !== 'time';\n      var months = shouldRenderMonths ? getMonthColumnData(this.locale, workingParts, this.minParts, this.maxParts, this.parsedMonthValues) : [];\n      var shouldRenderDays = forcePresentation === 'date';\n      var days = shouldRenderDays ? getDayColumnData(this.locale, workingParts, this.minParts, this.maxParts, this.parsedDayValues) : [];\n\n      if (isDateEnabled) {\n        days = days.map(function (dayObject) {\n          var value = dayObject.value;\n          var valueNum = typeof value === 'string' ? parseInt(value) : value;\n          var referenceParts = {\n            month: workingParts.month,\n            day: valueNum,\n            year: workingParts.year\n          };\n          var disabled;\n\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            disabled = !isDateEnabled(convertDataToISO(referenceParts));\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', e);\n          }\n\n          return Object.assign(Object.assign({}, dayObject), {\n            disabled: disabled\n          });\n        });\n      }\n\n      var shouldRenderYears = forcePresentation !== 'month' && forcePresentation !== 'time';\n      var years = shouldRenderYears ? getYearColumnData(this.locale, this.defaultParts, this.minParts, this.maxParts, this.parsedYearValues) : [];\n      /**\n       * Certain locales show the day before the month.\n       */\n\n      var showMonthFirst = isMonthFirstLocale(this.locale, {\n        month: 'numeric',\n        day: 'numeric'\n      });\n      var renderArray = [];\n\n      if (showMonthFirst) {\n        renderArray = [this.renderMonthPickerColumn(months), this.renderDayPickerColumn(days), this.renderYearPickerColumn(years)];\n      } else {\n        renderArray = [this.renderDayPickerColumn(days), this.renderMonthPickerColumn(months), this.renderYearPickerColumn(years)];\n      }\n\n      return renderArray;\n    }\n  }, {\n    key: \"renderDayPickerColumn\",\n    value: function renderDayPickerColumn(days) {\n      var _this8 = this;\n\n      var _a;\n\n      if (days.length === 0) {\n        return [];\n      }\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      var pickerColumnValue = (_a = workingParts.day !== null ? workingParts.day : this.defaultParts.day) !== null && _a !== void 0 ? _a : undefined;\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a day\",\n        class: \"day-column\",\n        color: this.color,\n        disabled: disabled,\n        value: pickerColumnValue,\n        onIonChange: function onIonChange(ev) {\n          _this8.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            day: ev.detail.value\n          }));\n\n          _this8.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            day: ev.detail.value\n          }));\n\n          ev.stopPropagation();\n        }\n      }, days.map(function (day) {\n        return h(\"ion-picker-column-option\", {\n          part: day.value === pickerColumnValue ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: day.value,\n          disabled: day.disabled,\n          value: day.value\n        }, day.text);\n      }));\n    }\n  }, {\n    key: \"renderMonthPickerColumn\",\n    value: function renderMonthPickerColumn(months) {\n      var _this9 = this;\n\n      if (months.length === 0) {\n        return [];\n      }\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a month\",\n        class: \"month-column\",\n        color: this.color,\n        disabled: disabled,\n        value: workingParts.month,\n        onIonChange: function onIonChange(ev) {\n          _this9.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            month: ev.detail.value\n          }));\n\n          _this9.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            month: ev.detail.value\n          }));\n\n          ev.stopPropagation();\n        }\n      }, months.map(function (month) {\n        return h(\"ion-picker-column-option\", {\n          part: month.value === workingParts.month ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: month.value,\n          disabled: month.disabled,\n          value: month.value\n        }, month.text);\n      }));\n    }\n  }, {\n    key: \"renderYearPickerColumn\",\n    value: function renderYearPickerColumn(years) {\n      var _this10 = this;\n\n      if (years.length === 0) {\n        return [];\n      }\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a year\",\n        class: \"year-column\",\n        color: this.color,\n        disabled: disabled,\n        value: workingParts.year,\n        onIonChange: function onIonChange(ev) {\n          _this10.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            year: ev.detail.value\n          }));\n\n          _this10.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            year: ev.detail.value\n          }));\n\n          ev.stopPropagation();\n        }\n      }, years.map(function (year) {\n        return h(\"ion-picker-column-option\", {\n          part: year.value === workingParts.year ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: year.value,\n          disabled: year.disabled,\n          value: year.value\n        }, year.text);\n      }));\n    }\n  }, {\n    key: \"renderTimePickerColumns\",\n    value: function renderTimePickerColumns(forcePresentation) {\n      if (['date', 'month', 'month-year', 'year'].includes(forcePresentation)) {\n        return [];\n      }\n      /**\n       * If a user has not selected a date,\n       * then we should show all times. If the\n       * user has selected a date (even if it has\n       * not been confirmed yet), we should apply\n       * the max and min restrictions so that the\n       * time picker shows values that are\n       * appropriate for the selected date.\n       */\n\n\n      var activePart = this.getActivePart();\n      var userHasSelectedDate = activePart !== undefined;\n\n      var _getTimeColumnsData = getTimeColumnsData(this.locale, this.workingParts, this.hourCycle, userHasSelectedDate ? this.minParts : undefined, userHasSelectedDate ? this.maxParts : undefined, this.parsedHourValues, this.parsedMinuteValues),\n          hoursData = _getTimeColumnsData.hoursData,\n          minutesData = _getTimeColumnsData.minutesData,\n          dayPeriodData = _getTimeColumnsData.dayPeriodData;\n\n      return [this.renderHourPickerColumn(hoursData), this.renderMinutePickerColumn(minutesData), this.renderDayPeriodPickerColumn(dayPeriodData)];\n    }\n  }, {\n    key: \"renderHourPickerColumn\",\n    value: function renderHourPickerColumn(hoursData) {\n      var _this11 = this;\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n      if (hoursData.length === 0) return [];\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select an hour\",\n        color: this.color,\n        disabled: disabled,\n        value: activePart.hour,\n        numericInput: true,\n        onIonChange: function onIonChange(ev) {\n          _this11.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            hour: ev.detail.value\n          }));\n\n          _this11.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            hour: ev.detail.value\n          }));\n\n          ev.stopPropagation();\n        }\n      }, hoursData.map(function (hour) {\n        return h(\"ion-picker-column-option\", {\n          part: hour.value === activePart.hour ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: hour.value,\n          disabled: hour.disabled,\n          value: hour.value\n        }, hour.text);\n      }));\n    }\n  }, {\n    key: \"renderMinutePickerColumn\",\n    value: function renderMinutePickerColumn(minutesData) {\n      var _this12 = this;\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n      if (minutesData.length === 0) return [];\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a minute\",\n        color: this.color,\n        disabled: disabled,\n        value: activePart.minute,\n        numericInput: true,\n        onIonChange: function onIonChange(ev) {\n          _this12.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            minute: ev.detail.value\n          }));\n\n          _this12.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            minute: ev.detail.value\n          }));\n\n          ev.stopPropagation();\n        }\n      }, minutesData.map(function (minute) {\n        return h(\"ion-picker-column-option\", {\n          part: minute.value === activePart.minute ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: minute.value,\n          disabled: minute.disabled,\n          value: minute.value\n        }, minute.text);\n      }));\n    }\n  }, {\n    key: \"renderDayPeriodPickerColumn\",\n    value: function renderDayPeriodPickerColumn(dayPeriodData) {\n      var _this13 = this;\n\n      var disabled = this.disabled,\n          workingParts = this.workingParts;\n\n      if (dayPeriodData.length === 0) {\n        return [];\n      }\n\n      var activePart = this.getActivePartsWithFallback();\n      var isDayPeriodRTL = isLocaleDayPeriodRTL(this.locale);\n      return h(\"ion-picker-column\", {\n        \"aria-label\": \"Select a day period\",\n        style: isDayPeriodRTL ? {\n          order: '-1'\n        } : {},\n        color: this.color,\n        disabled: disabled,\n        value: activePart.ampm,\n        onIonChange: function onIonChange(ev) {\n          var hour = calculateHourFromAMPM(workingParts, ev.detail.value);\n\n          _this13.setWorkingParts(Object.assign(Object.assign({}, workingParts), {\n            ampm: ev.detail.value,\n            hour: hour\n          }));\n\n          _this13.setActiveParts(Object.assign(Object.assign({}, activePart), {\n            ampm: ev.detail.value,\n            hour: hour\n          }));\n\n          ev.stopPropagation();\n        }\n      }, dayPeriodData.map(function (dayPeriod) {\n        return h(\"ion-picker-column-option\", {\n          part: dayPeriod.value === activePart.ampm ? \"\".concat(WHEEL_ITEM_PART, \" \").concat(WHEEL_ITEM_ACTIVE_PART) : WHEEL_ITEM_PART,\n          key: dayPeriod.value,\n          disabled: dayPeriod.disabled,\n          value: dayPeriod.value\n        }, dayPeriod.text);\n      }));\n    }\n  }, {\n    key: \"renderWheelView\",\n    value: function renderWheelView(forcePresentation) {\n      var locale = this.locale;\n      var showMonthFirst = isMonthFirstLocale(locale);\n      var columnOrder = showMonthFirst ? 'month-first' : 'year-first';\n      return h(\"div\", {\n        class: _defineProperty({}, \"wheel-order-\".concat(columnOrder), true)\n      }, this.renderWheelPicker(forcePresentation));\n    }\n    /**\n     * Grid Render Methods\n     */\n\n  }, {\n    key: \"renderCalendarHeader\",\n    value: function renderCalendarHeader(mode) {\n      var _this14 = this;\n\n      var disabled = this.disabled;\n      var expandedIcon = mode === 'ios' ? chevronDown : caretUpSharp;\n      var collapsedIcon = mode === 'ios' ? chevronForward : caretDownSharp;\n      var prevMonthDisabled = disabled || isPrevMonthDisabled(this.workingParts, this.minParts, this.maxParts);\n      var nextMonthDisabled = disabled || isNextMonthDisabled(this.workingParts, this.maxParts); // don't use the inheritAttributes util because it removes dir from the host, and we still need that\n\n      var hostDir = this.el.getAttribute('dir') || undefined;\n      return h(\"div\", {\n        class: \"calendar-header\"\n      }, h(\"div\", {\n        class: \"calendar-action-buttons\"\n      }, h(\"div\", {\n        class: \"calendar-month-year\"\n      }, h(\"button\", {\n        class: {\n          'calendar-month-year-toggle': true,\n          'ion-activatable': true,\n          'ion-focusable': true\n        },\n        part: \"month-year-button\",\n        disabled: disabled,\n        \"aria-label\": this.showMonthAndYear ? 'Hide year picker' : 'Show year picker',\n        onClick: function onClick() {\n          return _this14.toggleMonthAndYearView();\n        }\n      }, h(\"span\", {\n        id: \"toggle-wrapper\"\n      }, getMonthAndYear(this.locale, this.workingParts), h(\"ion-icon\", {\n        \"aria-hidden\": \"true\",\n        icon: this.showMonthAndYear ? expandedIcon : collapsedIcon,\n        lazy: false,\n        flipRtl: true\n      })), mode === 'md' && h(\"ion-ripple-effect\", null))), h(\"div\", {\n        class: \"calendar-next-prev\"\n      }, h(\"ion-buttons\", null, h(\"ion-button\", {\n        \"aria-label\": \"Previous month\",\n        disabled: prevMonthDisabled,\n        onClick: function onClick() {\n          return _this14.prevMonth();\n        }\n      }, h(\"ion-icon\", {\n        dir: hostDir,\n        \"aria-hidden\": \"true\",\n        slot: \"icon-only\",\n        icon: chevronBack,\n        lazy: false,\n        flipRtl: true\n      })), h(\"ion-button\", {\n        \"aria-label\": \"Next month\",\n        disabled: nextMonthDisabled,\n        onClick: function onClick() {\n          return _this14.nextMonth();\n        }\n      }, h(\"ion-icon\", {\n        dir: hostDir,\n        \"aria-hidden\": \"true\",\n        slot: \"icon-only\",\n        icon: chevronForward,\n        lazy: false,\n        flipRtl: true\n      }))))), h(\"div\", {\n        class: \"calendar-days-of-week\",\n        \"aria-hidden\": \"true\"\n      }, getDaysOfWeek(this.locale, mode, this.firstDayOfWeek % 7).map(function (d) {\n        return h(\"div\", {\n          class: \"day-of-week\"\n        }, d);\n      })));\n    }\n  }, {\n    key: \"renderMonth\",\n    value: function renderMonth(month, year) {\n      var _this15 = this;\n\n      var disabled = this.disabled,\n          readonly = this.readonly;\n      var yearAllowed = this.parsedYearValues === undefined || this.parsedYearValues.includes(year);\n      var monthAllowed = this.parsedMonthValues === undefined || this.parsedMonthValues.includes(month);\n      var isCalMonthDisabled = !yearAllowed || !monthAllowed;\n      var isDatetimeDisabled = disabled || readonly;\n      var swipeDisabled = disabled || isMonthDisabled({\n        month: month,\n        year: year,\n        day: null\n      }, {\n        // The day is not used when checking if a month is disabled.\n        // Users should be able to access the min or max month, even if the\n        // min/max date is out of bounds (e.g. min is set to Feb 15, Feb should not be disabled).\n        minParts: Object.assign(Object.assign({}, this.minParts), {\n          day: null\n        }),\n        maxParts: Object.assign(Object.assign({}, this.maxParts), {\n          day: null\n        })\n      }); // The working month should never have swipe disabled.\n      // Otherwise the CSS scroll snap will not work and the user\n      // can free-scroll the calendar.\n\n      var isWorkingMonth = this.workingParts.month === month && this.workingParts.year === year;\n      var activePart = this.getActivePartsWithFallback();\n      return h(\"div\", {\n        \"aria-hidden\": !isWorkingMonth ? 'true' : null,\n        class: {\n          'calendar-month': true,\n          // Prevents scroll snap swipe gestures for months outside of the min/max bounds\n          'calendar-month-disabled': !isWorkingMonth && swipeDisabled\n        }\n      }, h(\"div\", {\n        class: \"calendar-month-grid\"\n      }, getDaysOfMonth(month, year, this.firstDayOfWeek % 7).map(function (dateObject, index) {\n        var day = dateObject.day,\n            dayOfWeek = dateObject.dayOfWeek;\n        var el = _this15.el,\n            highlightedDates = _this15.highlightedDates,\n            isDateEnabled = _this15.isDateEnabled,\n            multiple = _this15.multiple;\n        var referenceParts = {\n          month: month,\n          day: day,\n          year: year\n        };\n        var isCalendarPadding = day === null;\n\n        var _getCalendarDayState = getCalendarDayState(_this15.locale, referenceParts, _this15.activeParts, _this15.todayParts, _this15.minParts, _this15.maxParts, _this15.parsedDayValues),\n            isActive = _getCalendarDayState.isActive,\n            isToday = _getCalendarDayState.isToday,\n            ariaLabel = _getCalendarDayState.ariaLabel,\n            ariaSelected = _getCalendarDayState.ariaSelected,\n            isDayDisabled = _getCalendarDayState.disabled,\n            text = _getCalendarDayState.text;\n\n        var dateIsoString = convertDataToISO(referenceParts);\n        var isCalDayDisabled = isCalMonthDisabled || isDayDisabled;\n\n        if (!isCalDayDisabled && isDateEnabled !== undefined) {\n          try {\n            /**\n             * The `isDateEnabled` implementation is try-catch wrapped\n             * to prevent exceptions in the user's function from\n             * interrupting the calendar rendering.\n             */\n            isCalDayDisabled = !isDateEnabled(dateIsoString);\n          } catch (e) {\n            printIonError('Exception thrown from provided `isDateEnabled` function. Please check your function and try again.', el, e);\n          }\n        }\n        /**\n         * Some days are constrained through max & min or allowed dates\n         * and also disabled because the component is readonly or disabled.\n         * These need to be displayed differently.\n         */\n\n\n        var isCalDayConstrained = isCalDayDisabled && isDatetimeDisabled;\n        var isButtonDisabled = isCalDayDisabled || isDatetimeDisabled;\n        var dateStyle = undefined;\n        /**\n         * Custom highlight styles should not override the style for selected dates,\n         * nor apply to \"filler days\" at the start of the grid.\n         */\n\n        if (highlightedDates !== undefined && !isActive && day !== null) {\n          dateStyle = getHighlightStyles(highlightedDates, dateIsoString, el);\n        }\n\n        var dateParts = undefined; // \"Filler days\" at the beginning of the grid should not get the calendar day\n        // CSS parts added to them\n\n        if (!isCalendarPadding) {\n          dateParts = \"calendar-day\".concat(isActive ? ' active' : '').concat(isToday ? ' today' : '').concat(isCalDayDisabled ? ' disabled' : '');\n        }\n\n        return h(\"div\", {\n          class: \"calendar-day-wrapper\"\n        }, h(\"button\", {\n          // We need to use !important for the inline styles here because\n          // otherwise the CSS shadow parts will override these styles.\n          // See https://github.com/WICG/webcomponents/issues/847\n          // Both the CSS shadow parts and highlightedDates styles are\n          // provided by the developer, but highlightedDates styles should\n          // always take priority.\n          ref: function ref(el) {\n            if (el) {\n              el.style.setProperty('color', \"\".concat(dateStyle ? dateStyle.textColor : ''), 'important');\n              el.style.setProperty('background-color', \"\".concat(dateStyle ? dateStyle.backgroundColor : ''), 'important');\n            }\n          },\n          tabindex: \"-1\",\n          \"data-day\": day,\n          \"data-month\": month,\n          \"data-year\": year,\n          \"data-index\": index,\n          \"data-day-of-week\": dayOfWeek,\n          disabled: isButtonDisabled,\n          class: {\n            'calendar-day-padding': isCalendarPadding,\n            'calendar-day': true,\n            'calendar-day-active': isActive,\n            'calendar-day-constrained': isCalDayConstrained,\n            'calendar-day-today': isToday\n          },\n          part: dateParts,\n          \"aria-hidden\": isCalendarPadding ? 'true' : null,\n          \"aria-selected\": ariaSelected,\n          \"aria-label\": ariaLabel,\n          onClick: function onClick() {\n            if (isCalendarPadding) {\n              return;\n            }\n\n            _this15.setWorkingParts(Object.assign(Object.assign({}, _this15.workingParts), {\n              month: month,\n              day: day,\n              year: year\n            })); // multiple only needs date info, so we can wipe out other fields like time\n\n\n            if (multiple) {\n              _this15.setActiveParts({\n                month: month,\n                day: day,\n                year: year\n              }, isActive);\n            } else {\n              _this15.setActiveParts(Object.assign(Object.assign({}, activePart), {\n                month: month,\n                day: day,\n                year: year\n              }));\n            }\n          }\n        }, text));\n      })));\n    }\n  }, {\n    key: \"renderCalendarBody\",\n    value: function renderCalendarBody() {\n      var _this16 = this;\n\n      return h(\"div\", {\n        class: \"calendar-body ion-focusable\",\n        ref: function ref(el) {\n          return _this16.calendarBodyRef = el;\n        },\n        tabindex: \"0\"\n      }, generateMonths(this.workingParts, this.forceRenderDate).map(function (_ref4) {\n        var month = _ref4.month,\n            year = _ref4.year;\n        return _this16.renderMonth(month, year);\n      }));\n    }\n  }, {\n    key: \"renderCalendar\",\n    value: function renderCalendar(mode) {\n      return h(\"div\", {\n        class: \"datetime-calendar\",\n        key: \"datetime-calendar\"\n      }, this.renderCalendarHeader(mode), this.renderCalendarBody());\n    }\n  }, {\n    key: \"renderTimeLabel\",\n    value: function renderTimeLabel() {\n      var hasSlottedTimeLabel = this.el.querySelector('[slot=\"time-label\"]') !== null;\n\n      if (!hasSlottedTimeLabel && !this.showDefaultTimeLabel) {\n        return;\n      }\n\n      return h(\"slot\", {\n        name: \"time-label\"\n      }, \"Time\");\n    }\n  }, {\n    key: \"renderTimeOverlay\",\n    value: function renderTimeOverlay() {\n      var _this17 = this;\n\n      var disabled = this.disabled,\n          hourCycle = this.hourCycle,\n          isTimePopoverOpen = this.isTimePopoverOpen,\n          locale = this.locale,\n          formatOptions = this.formatOptions;\n      var computedHourCycle = getHourCycle(locale, hourCycle);\n      var activePart = this.getActivePartsWithFallback();\n      return [h(\"div\", {\n        class: \"time-header\"\n      }, this.renderTimeLabel()), h(\"button\", {\n        class: {\n          'time-body': true,\n          'time-body-active': isTimePopoverOpen\n        },\n        part: \"time-button\".concat(isTimePopoverOpen ? ' active' : ''),\n        \"aria-expanded\": \"false\",\n        \"aria-haspopup\": \"true\",\n        disabled: disabled,\n        onClick: function () {\n          var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(ev) {\n            var popoverRef;\n            return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n              while (1) switch (_context6.prev = _context6.next) {\n                case 0:\n                  popoverRef = _this17.popoverRef;\n\n                  if (!popoverRef) {\n                    _context6.next = 7;\n                    break;\n                  }\n\n                  _this17.isTimePopoverOpen = true;\n                  popoverRef.present(new CustomEvent('ionShadowTarget', {\n                    detail: {\n                      ionShadowTarget: ev.target\n                    }\n                  }));\n                  _context6.next = 6;\n                  return popoverRef.onWillDismiss();\n\n                case 6:\n                  _this17.isTimePopoverOpen = false;\n\n                case 7:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }, _callee6);\n          }));\n\n          function onClick(_x3) {\n            return _onClick.apply(this, arguments);\n          }\n\n          return onClick;\n        }()\n      }, getLocalizedTime(locale, activePart, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time)), h(\"ion-popover\", {\n        alignment: \"center\",\n        translucent: true,\n        overlayIndex: 1,\n        arrow: false,\n        onWillPresent: function onWillPresent(ev) {\n          /**\n           * Intersection Observers do not consistently fire between Blink and Webkit\n           * when toggling the visibility of the popover and trying to scroll the picker\n           * column to the correct time value.\n           *\n           * This will correctly scroll the element position to the correct time value,\n           * before the popover is fully presented.\n           */\n          var cols = ev.target.querySelectorAll('ion-picker-column'); // TODO (FW-615): Potentially remove this when intersection observers are fixed in picker column\n\n          cols.forEach(function (col) {\n            return col.scrollActiveItemIntoView();\n          });\n        },\n        style: {\n          '--offset-y': '-10px',\n          '--min-width': 'fit-content'\n        },\n        // Allow native browser keyboard events to support up/down/home/end key\n        // navigation within the time picker.\n        keyboardEvents: true,\n        ref: function ref(el) {\n          return _this17.popoverRef = el;\n        }\n      }, this.renderWheelPicker('time'))];\n    }\n  }, {\n    key: \"getHeaderSelectedDateText\",\n    value: function getHeaderSelectedDateText() {\n      var _a;\n\n      var activeParts = this.activeParts,\n          formatOptions = this.formatOptions,\n          multiple = this.multiple,\n          titleSelectedDatesFormatter = this.titleSelectedDatesFormatter;\n      var isArray = Array.isArray(activeParts);\n      var headerText;\n\n      if (multiple && isArray && activeParts.length !== 1) {\n        headerText = \"\".concat(activeParts.length, \" days\"); // default/fallback for multiple selection\n\n        if (titleSelectedDatesFormatter !== undefined) {\n          try {\n            headerText = titleSelectedDatesFormatter(convertDataToISO(activeParts));\n          } catch (e) {\n            printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n          }\n        }\n      } else {\n        // for exactly 1 day selected (multiple set or not), show a formatted version of that\n        headerText = getLocalizedDateTime(this.locale, this.getActivePartsWithFallback(), (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : {\n          weekday: 'short',\n          month: 'short',\n          day: 'numeric'\n        });\n      }\n\n      return headerText;\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var showExpandedHeader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var hasSlottedTitle = this.el.querySelector('[slot=\"title\"]') !== null;\n\n      if (!hasSlottedTitle && !this.showDefaultTitle) {\n        return;\n      }\n\n      return h(\"div\", {\n        class: \"datetime-header\"\n      }, h(\"div\", {\n        class: \"datetime-title\"\n      }, h(\"slot\", {\n        name: \"title\"\n      }, \"Select Date\")), showExpandedHeader && h(\"div\", {\n        class: \"datetime-selected-date\"\n      }, this.getHeaderSelectedDateText()));\n    }\n    /**\n     * Render time picker inside of datetime.\n     * Do not pass color prop to segment on\n     * iOS mode. MD segment has been customized and\n     * should take on the color prop, but iOS\n     * should just be the default segment.\n     */\n\n  }, {\n    key: \"renderTime\",\n    value: function renderTime() {\n      var presentation = this.presentation;\n      var timeOnlyPresentation = presentation === 'time';\n      return h(\"div\", {\n        class: \"datetime-time\"\n      }, timeOnlyPresentation ? this.renderWheelPicker() : this.renderTimeOverlay());\n    }\n    /**\n     * Renders the month/year picker that is\n     * displayed on the calendar grid.\n     * The .datetime-year class has additional\n     * styles that let us show/hide the\n     * picker when the user clicks on the\n     * toggle in the calendar header.\n     */\n\n  }, {\n    key: \"renderCalendarViewMonthYearPicker\",\n    value: function renderCalendarViewMonthYearPicker() {\n      return h(\"div\", {\n        class: \"datetime-year\"\n      }, this.renderWheelView('month-year'));\n    }\n    /**\n     * Render entry point\n     * All presentation types are rendered from here.\n     */\n\n  }, {\n    key: \"renderDatetime\",\n    value: function renderDatetime(mode) {\n      var presentation = this.presentation,\n          preferWheel = this.preferWheel;\n      /**\n       * Certain presentation types have separate grid and wheel displays.\n       * If preferWheel is true then we should show a wheel picker instead.\n       */\n\n      var hasWheelVariant = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n\n      if (preferWheel && hasWheelVariant) {\n        return [this.renderHeader(false), this.renderWheelView(), this.renderFooter()];\n      }\n\n      switch (presentation) {\n        case 'date-time':\n          return [this.renderHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderTime(), this.renderFooter()];\n\n        case 'time-date':\n          return [this.renderHeader(), this.renderTime(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];\n\n        case 'time':\n          return [this.renderHeader(false), this.renderTime(), this.renderFooter()];\n\n        case 'month':\n        case 'month-year':\n        case 'year':\n          return [this.renderHeader(false), this.renderWheelView(), this.renderFooter()];\n\n        default:\n          return [this.renderHeader(), this.renderCalendar(mode), this.renderCalendarViewMonthYearPicker(), this.renderFooter()];\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this18 = this;\n\n      var name = this.name,\n          value = this.value,\n          disabled = this.disabled,\n          el = this.el,\n          color = this.color,\n          readonly = this.readonly,\n          showMonthAndYear = this.showMonthAndYear,\n          preferWheel = this.preferWheel,\n          presentation = this.presentation,\n          size = this.size,\n          isGridStyle = this.isGridStyle;\n      var mode = getIonMode(this);\n      var isMonthAndYearPresentation = presentation === 'year' || presentation === 'month' || presentation === 'month-year';\n      var shouldShowMonthAndYear = showMonthAndYear || isMonthAndYearPresentation;\n      var monthYearPickerOpen = showMonthAndYear && !isMonthAndYearPresentation;\n      var hasDatePresentation = presentation === 'date' || presentation === 'date-time' || presentation === 'time-date';\n      var hasWheelVariant = hasDatePresentation && preferWheel;\n      renderHiddenInput(true, el, name, formatValue(value), disabled);\n      return h(Host, {\n        key: '48313af4ec8e2a2666cd8c89932c5131dfa7b556',\n        \"aria-disabled\": disabled ? 'true' : null,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        class: Object.assign({}, createColorClasses(color, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'datetime-readonly', readonly), 'datetime-disabled', disabled), 'show-month-and-year', shouldShowMonthAndYear), 'month-year-picker-open', monthYearPickerOpen), \"datetime-presentation-\".concat(presentation), true), \"datetime-size-\".concat(size), true), \"datetime-prefer-wheel\", hasWheelVariant), \"datetime-grid\", isGridStyle)))\n      }, h(\"div\", {\n        key: 'b72570048236415aed915488305046d987d51dcf',\n        class: \"intersection-tracker\",\n        ref: function ref(el) {\n          return _this18.intersectionTrackerRef = el;\n        }\n      }), this.renderDatetime(mode));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"formatOptions\": [\"formatOptionsChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"min\": [\"minChanged\"],\n        \"max\": [\"maxChanged\"],\n        \"presentation\": [\"presentationChanged\"],\n        \"yearValues\": [\"yearValuesChanged\"],\n        \"monthValues\": [\"monthValuesChanged\"],\n        \"dayValues\": [\"dayValuesChanged\"],\n        \"hourValues\": [\"hourValuesChanged\"],\n        \"minuteValues\": [\"minuteValuesChanged\"],\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar datetimeIds = 0;\nvar CANCEL_ROLE = 'datetime-cancel';\nvar CONFIRM_ROLE = 'datetime-confirm';\nvar WHEEL_ITEM_PART = 'wheel-item';\nvar WHEEL_ITEM_ACTIVE_PART = \"active\";\nDatetime.style = {\n  ios: IonDatetimeIosStyle0,\n  md: IonDatetimeMdStyle0\n};\n/**\n * iOS Picker Enter Animation\n */\n\nvar iosEnterAnimation = function iosEnterAnimation(baseEl) {\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({\n    'pointer-events': 'none'\n  }).afterClearStyles(['pointer-events']);\n  wrapperAnimation.addElement(baseEl.querySelector('.picker-wrapper')).fromTo('transform', 'translateY(100%)', 'translateY(0%)');\n  return baseAnimation.addElement(baseEl).easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n/**\n * iOS Picker Leave Animation\n */\n\n\nvar iosLeaveAnimation = function iosLeaveAnimation(baseEl) {\n  var baseAnimation = createAnimation();\n  var backdropAnimation = createAnimation();\n  var wrapperAnimation = createAnimation();\n  backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0.01);\n  wrapperAnimation.addElement(baseEl.querySelector('.picker-wrapper')).fromTo('transform', 'translateY(0%)', 'translateY(100%)');\n  return baseAnimation.addElement(baseEl).easing('cubic-bezier(.36,.66,.04,1)').duration(400).addAnimation([backdropAnimation, wrapperAnimation]);\n};\n\nvar pickerIosCss = \".sc-ion-picker-legacy-ios-h{--border-radius:0;--border-style:solid;--min-width:auto;--width:100%;--max-width:500px;--min-height:auto;--max-height:auto;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;font-family:var(--ion-font-family, inherit);contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:1001}.sc-ion-picker-legacy-ios-h{inset-inline-start:0}.overlay-hidden.sc-ion-picker-legacy-ios-h{display:none}.picker-wrapper.sc-ion-picker-legacy-ios{border-radius:var(--border-radius);left:0;right:0;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:auto;margin-bottom:auto;-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;overflow:hidden;z-index:10}.picker-toolbar.sc-ion-picker-legacy-ios{width:100%;background:transparent;contain:strict;z-index:1}.picker-button.sc-ion-picker-legacy-ios{border:0;font-family:inherit}.picker-button.sc-ion-picker-legacy-ios:active,.picker-button.sc-ion-picker-legacy-ios:focus{outline:none}.picker-columns.sc-ion-picker-legacy-ios{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;margin-bottom:var(--ion-safe-area-bottom, 0);contain:strict;overflow:hidden}.picker-above-highlight.sc-ion-picker-legacy-ios,.picker-below-highlight.sc-ion-picker-legacy-ios{display:none;pointer-events:none}.sc-ion-picker-legacy-ios-h{--background:var(--ion-background-color, #fff);--border-width:1px 0 0;--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));--height:260px;--backdrop-opacity:var(--ion-backdrop-opacity, 0.26);color:var(--ion-item-color, var(--ion-text-color, #000))}.picker-toolbar.sc-ion-picker-legacy-ios{display:-ms-flexbox;display:flex;height:44px;border-bottom:0.55px solid var(--border-color)}.picker-toolbar-button.sc-ion-picker-legacy-ios{-ms-flex:1;flex:1;text-align:end}.picker-toolbar-button.sc-ion-picker-legacy-ios:last-child .picker-button.sc-ion-picker-legacy-ios{font-weight:600}.picker-toolbar-button.sc-ion-picker-legacy-ios:first-child{font-weight:normal;text-align:start}.picker-button.sc-ion-picker-legacy-ios,.picker-button.ion-activated.sc-ion-picker-legacy-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-padding-start:1em;padding-inline-start:1em;-webkit-padding-end:1em;padding-inline-end:1em;padding-top:0;padding-bottom:0;height:44px;background:transparent;color:var(--ion-color-primary, #0054e9);font-size:16px}.picker-columns.sc-ion-picker-legacy-ios{height:215px;-webkit-perspective:1000px;perspective:1000px}.picker-above-highlight.sc-ion-picker-legacy-ios{top:0;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);display:block;position:absolute;width:100%;height:81px;border-bottom:1px solid var(--border-color);background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);z-index:10}.picker-above-highlight.sc-ion-picker-legacy-ios{inset-inline-start:0}.picker-below-highlight.sc-ion-picker-legacy-ios{top:115px;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);display:block;position:absolute;width:100%;height:119px;border-top:1px solid var(--border-color);background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);z-index:11}.picker-below-highlight.sc-ion-picker-legacy-ios{inset-inline-start:0}\";\nvar IonPickerLegacyIosStyle0 = pickerIosCss;\nvar pickerMdCss = \".sc-ion-picker-legacy-md-h{--border-radius:0;--border-style:solid;--min-width:auto;--width:100%;--max-width:500px;--min-height:auto;--max-height:auto;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;top:0;display:block;position:absolute;width:100%;height:100%;outline:none;font-family:var(--ion-font-family, inherit);contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:1001}.sc-ion-picker-legacy-md-h{inset-inline-start:0}.overlay-hidden.sc-ion-picker-legacy-md-h{display:none}.picker-wrapper.sc-ion-picker-legacy-md{border-radius:var(--border-radius);left:0;right:0;bottom:0;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:auto;margin-bottom:auto;-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;overflow:hidden;z-index:10}.picker-toolbar.sc-ion-picker-legacy-md{width:100%;background:transparent;contain:strict;z-index:1}.picker-button.sc-ion-picker-legacy-md{border:0;font-family:inherit}.picker-button.sc-ion-picker-legacy-md:active,.picker-button.sc-ion-picker-legacy-md:focus{outline:none}.picker-columns.sc-ion-picker-legacy-md{display:-ms-flexbox;display:flex;position:relative;-ms-flex-pack:center;justify-content:center;margin-bottom:var(--ion-safe-area-bottom, 0);contain:strict;overflow:hidden}.picker-above-highlight.sc-ion-picker-legacy-md,.picker-below-highlight.sc-ion-picker-legacy-md{display:none;pointer-events:none}.sc-ion-picker-legacy-md-h{--background:var(--ion-background-color, #fff);--border-width:0.55px 0 0;--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));--height:260px;--backdrop-opacity:var(--ion-backdrop-opacity, 0.26);color:var(--ion-item-color, var(--ion-text-color, #000))}.picker-toolbar.sc-ion-picker-legacy-md{display:-ms-flexbox;display:flex;-ms-flex-pack:end;justify-content:flex-end;height:44px}.picker-button.sc-ion-picker-legacy-md,.picker-button.ion-activated.sc-ion-picker-legacy-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-padding-start:1.1em;padding-inline-start:1.1em;-webkit-padding-end:1.1em;padding-inline-end:1.1em;padding-top:0;padding-bottom:0;height:44px;background:transparent;color:var(--ion-color-primary, #0054e9);font-size:14px;font-weight:500;text-transform:uppercase;-webkit-box-shadow:none;box-shadow:none}.picker-columns.sc-ion-picker-legacy-md{height:216px;-webkit-perspective:1800px;perspective:1800px}.picker-above-highlight.sc-ion-picker-legacy-md{top:0;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);position:absolute;width:100%;height:81px;border-bottom:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--ion-background-color, #fff)), to(rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8)));background:linear-gradient(to bottom, var(--ion-background-color, #fff) 20%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);z-index:10}.picker-above-highlight.sc-ion-picker-legacy-md{inset-inline-start:0}.picker-below-highlight.sc-ion-picker-legacy-md{top:115px;-webkit-transform:translate3d(0,  0,  90px);transform:translate3d(0,  0,  90px);position:absolute;width:100%;height:119px;border-top:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--ion-background-color, #fff)), to(rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8)));background:linear-gradient(to top, var(--ion-background-color, #fff) 30%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);z-index:11}.picker-below-highlight.sc-ion-picker-legacy-md{inset-inline-start:0}\";\nvar IonPickerLegacyMdStyle0 = pickerMdCss;\n\nvar Picker = /*#__PURE__*/function () {\n  function Picker(hostRef) {\n    var _this19 = this;\n\n    _classCallCheck(this, Picker);\n\n    registerInstance(this, hostRef);\n    this.didPresent = createEvent(this, \"ionPickerDidPresent\", 7);\n    this.willPresent = createEvent(this, \"ionPickerWillPresent\", 7);\n    this.willDismiss = createEvent(this, \"ionPickerWillDismiss\", 7);\n    this.didDismiss = createEvent(this, \"ionPickerDidDismiss\", 7);\n    this.didPresentShorthand = createEvent(this, \"didPresent\", 7);\n    this.willPresentShorthand = createEvent(this, \"willPresent\", 7);\n    this.willDismissShorthand = createEvent(this, \"willDismiss\", 7);\n    this.didDismissShorthand = createEvent(this, \"didDismiss\", 7);\n    this.delegateController = createDelegateController(this);\n    this.lockController = createLockController();\n    this.triggerController = createTriggerController();\n\n    this.onBackdropTap = function () {\n      _this19.dismiss(undefined, BACKDROP);\n    };\n\n    this.dispatchCancelHandler = function (ev) {\n      var role = ev.detail.role;\n\n      if (isCancel(role)) {\n        var cancelButton = _this19.buttons.find(function (b) {\n          return b.role === 'cancel';\n        });\n\n        _this19.callButtonHandler(cancelButton);\n      }\n    };\n\n    this.presented = false;\n    this.overlayIndex = undefined;\n    this.delegate = undefined;\n    this.hasController = false;\n    this.keyboardClose = true;\n    this.enterAnimation = undefined;\n    this.leaveAnimation = undefined;\n    this.buttons = [];\n    this.columns = [];\n    this.cssClass = undefined;\n    this.duration = 0;\n    this.showBackdrop = true;\n    this.backdropDismiss = true;\n    this.animated = true;\n    this.htmlAttributes = undefined;\n    this.isOpen = false;\n    this.trigger = undefined;\n  }\n\n  return _createClass(Picker, [{\n    key: \"onIsOpenChange\",\n    value: function onIsOpenChange(newValue, oldValue) {\n      if (newValue === true && oldValue === false) {\n        this.present();\n      } else if (newValue === false && oldValue === true) {\n        this.dismiss();\n      }\n    }\n  }, {\n    key: \"triggerChanged\",\n    value: function triggerChanged() {\n      var trigger = this.trigger,\n          el = this.el,\n          triggerController = this.triggerController;\n\n      if (trigger) {\n        triggerController.addClickListener(el, trigger);\n      }\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      prepareOverlay(this.el);\n      this.triggerChanged();\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.triggerController.removeClickListener();\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      setOverlayId(this.el);\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this20 = this;\n\n      printIonWarning('ion-picker-legacy and ion-picker-legacy-column have been deprecated in favor of new versions of the ion-picker and ion-picker-column components. These new components display inline with your page content allowing for more presentation flexibility than before.', this.el);\n      /**\n       * If picker was rendered with isOpen=\"true\"\n       * then we should open picker immediately.\n       */\n\n      if (this.isOpen === true) {\n        raf(function () {\n          return _this20.present();\n        });\n      }\n      /**\n       * When binding values in frameworks such as Angular\n       * it is possible for the value to be set after the Web Component\n       * initializes but before the value watcher is set up in Stencil.\n       * As a result, the watcher callback may not be fired.\n       * We work around this by manually calling the watcher\n       * callback when the component has loaded and the watcher\n       * is configured.\n       */\n\n\n      this.triggerChanged();\n    }\n    /**\n     * Present the picker overlay after it has been created.\n     */\n\n  }, {\n    key: \"present\",\n    value: function () {\n      var _present2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this21 = this;\n\n        var unlock;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.lockController.lock();\n\n            case 2:\n              unlock = _context7.sent;\n              _context7.next = 5;\n              return this.delegateController.attachViewToDom();\n\n            case 5:\n              _context7.next = 7;\n              return _present(this, 'pickerEnter', iosEnterAnimation, iosEnterAnimation, undefined);\n\n            case 7:\n              if (this.duration > 0) {\n                this.durationTimeout = setTimeout(function () {\n                  return _this21.dismiss();\n                }, this.duration);\n              }\n\n              unlock();\n\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n\n      function present() {\n        return _present2.apply(this, arguments);\n      }\n\n      return present;\n    }()\n    /**\n     * Dismiss the picker overlay after it has been presented.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function () {\n      var _dismiss2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(data, role) {\n        var unlock, dismissed;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.lockController.lock();\n\n            case 2:\n              unlock = _context8.sent;\n\n              if (this.durationTimeout) {\n                clearTimeout(this.durationTimeout);\n              }\n\n              _context8.next = 6;\n              return _dismiss(this, data, role, 'pickerLeave', iosLeaveAnimation, iosLeaveAnimation);\n\n            case 6:\n              dismissed = _context8.sent;\n\n              if (dismissed) {\n                this.delegateController.removeViewFromDom();\n              }\n\n              unlock();\n              return _context8.abrupt(\"return\", dismissed);\n\n            case 10:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n\n      function dismiss(_x4, _x5) {\n        return _dismiss2.apply(this, arguments);\n      }\n\n      return dismiss;\n    }()\n    /**\n     * Returns a promise that resolves when the picker did dismiss.\n     */\n\n  }, {\n    key: \"onDidDismiss\",\n    value: function onDidDismiss() {\n      return eventMethod(this.el, 'ionPickerDidDismiss');\n    }\n    /**\n     * Returns a promise that resolves when the picker will dismiss.\n     */\n\n  }, {\n    key: \"onWillDismiss\",\n    value: function onWillDismiss() {\n      return eventMethod(this.el, 'ionPickerWillDismiss');\n    }\n    /**\n     * Get the column that matches the specified name.\n     *\n     * @param name The name of the column.\n     */\n\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(name) {\n      return Promise.resolve(this.columns.find(function (column) {\n        return column.name === name;\n      }));\n    }\n  }, {\n    key: \"buttonClick\",\n    value: function () {\n      var _buttonClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(button) {\n        var role, shouldDismiss;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              role = button.role;\n\n              if (!isCancel(role)) {\n                _context9.next = 3;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", this.dismiss(undefined, role));\n\n            case 3:\n              _context9.next = 5;\n              return this.callButtonHandler(button);\n\n            case 5:\n              shouldDismiss = _context9.sent;\n\n              if (!shouldDismiss) {\n                _context9.next = 8;\n                break;\n              }\n\n              return _context9.abrupt(\"return\", this.dismiss(this.getSelected(), button.role));\n\n            case 8:\n              return _context9.abrupt(\"return\", Promise.resolve());\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n\n      function buttonClick(_x6) {\n        return _buttonClick.apply(this, arguments);\n      }\n\n      return buttonClick;\n    }()\n  }, {\n    key: \"callButtonHandler\",\n    value: function () {\n      var _callButtonHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(button) {\n        var rtn;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!button) {\n                _context10.next = 6;\n                break;\n              }\n\n              _context10.next = 3;\n              return safeCall(button.handler, this.getSelected());\n\n            case 3:\n              rtn = _context10.sent;\n\n              if (!(rtn === false)) {\n                _context10.next = 6;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", false);\n\n            case 6:\n              return _context10.abrupt(\"return\", true);\n\n            case 7:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n\n      function callButtonHandler(_x7) {\n        return _callButtonHandler.apply(this, arguments);\n      }\n\n      return callButtonHandler;\n    }()\n  }, {\n    key: \"getSelected\",\n    value: function getSelected() {\n      var selected = {};\n      this.columns.forEach(function (col, index) {\n        var selectedColumn = col.selectedIndex !== undefined ? col.options[col.selectedIndex] : undefined;\n        selected[col.name] = {\n          text: selectedColumn ? selectedColumn.text : undefined,\n          value: selectedColumn ? selectedColumn.value : undefined,\n          columnIndex: index\n        };\n      });\n      return selected;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this22 = this;\n\n      var htmlAttributes = this.htmlAttributes;\n      var mode = getIonMode(this);\n      return h(Host, Object.assign({\n        key: '26e3144adcdf01605271d01e468bb4a75ce854b1',\n        \"aria-modal\": \"true\",\n        tabindex: \"-1\"\n      }, htmlAttributes, {\n        style: {\n          zIndex: \"\".concat(20000 + this.overlayIndex)\n        },\n        class: Object.assign(_defineProperty(_defineProperty(_defineProperty({}, mode, true), \"picker-\".concat(mode), true), 'overlay-hidden', true), getClassMap(this.cssClass)),\n        onIonBackdropTap: this.onBackdropTap,\n        onIonPickerWillDismiss: this.dispatchCancelHandler\n      }), h(\"ion-backdrop\", {\n        key: 'fa212d21406606186cd95f8c7a4f119696ac8d4a',\n        visible: this.showBackdrop,\n        tappable: this.backdropDismiss\n      }), h(\"div\", {\n        key: '19ea889f65cb6a68a9db26cf9f83c6587cfcf07e',\n        tabindex: \"0\"\n      }), h(\"div\", {\n        key: '5fc0f5d26915ba353b9f0335946f94b6fda95e1e',\n        class: \"picker-wrapper ion-overlay-wrapper\",\n        role: \"dialog\"\n      }, h(\"div\", {\n        key: '3fa5bff4ac0013ef31845482a27a14caebbdcd2f',\n        class: \"picker-toolbar\"\n      }, this.buttons.map(function (b) {\n        return h(\"div\", {\n          class: buttonWrapperClass(b)\n        }, h(\"button\", {\n          type: \"button\",\n          onClick: function onClick() {\n            return _this22.buttonClick(b);\n          },\n          class: buttonClass(b)\n        }, b.text));\n      })), h(\"div\", {\n        key: '2ff6376956d01dcd9ec01b8d6972dd4b37ffb1a1',\n        class: \"picker-columns\"\n      }, h(\"div\", {\n        key: '4adcef77429f10a3faa50b41d1eaf3404387997c',\n        class: \"picker-above-highlight\"\n      }), this.presented && this.columns.map(function (c) {\n        return h(\"ion-picker-legacy-column\", {\n          col: c\n        });\n      }), h(\"div\", {\n        key: 'e0f37d3e9896eb2bc0f0aef4762a897130851963',\n        class: \"picker-below-highlight\"\n      }))), h(\"div\", {\n        key: '671bb7d0f487b0d7c7fa70388f8fa1de77448b9f',\n        tabindex: \"0\"\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"isOpen\": [\"onIsOpenChange\"],\n        \"trigger\": [\"triggerChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar buttonWrapperClass = function buttonWrapperClass(button) {\n  return _defineProperty(_defineProperty({}, \"picker-toolbar-\".concat(button.role), button.role !== undefined), 'picker-toolbar-button', true);\n};\n\nvar buttonClass = function buttonClass(button) {\n  return Object.assign({\n    'picker-button': true,\n    'ion-activatable': true\n  }, getClassMap(button.cssClass));\n};\n\nPicker.style = {\n  ios: IonPickerLegacyIosStyle0,\n  md: IonPickerLegacyMdStyle0\n};\nvar pickerColumnIosCss = \".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}.picker-opt{inset-inline-start:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:20px;line-height:42px;pointer-events:none}.picker-opt{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-transform-origin:center center;transform-origin:center center;height:46px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:20px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}:host-context([dir=rtl]) .picker-opt{-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}[dir=rtl] .picker-opt{-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}@supports selector(:dir(rtl)){.picker-opt:dir(rtl){-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}}\";\nvar IonPickerLegacyColumnIosStyle0 = pickerColumnIosCss;\nvar pickerColumnMdCss = \".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}.picker-opt{inset-inline-start:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:22px;line-height:42px;pointer-events:none}.picker-opt{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;height:43px;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:22px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}.picker-prefix,.picker-suffix,.picker-opt.picker-opt-selected{color:var(--ion-color-primary, #0054e9)}\";\nvar IonPickerLegacyColumnMdStyle0 = pickerColumnMdCss;\n\nvar PickerColumnCmp = /*#__PURE__*/function () {\n  function PickerColumnCmp(hostRef) {\n    _classCallCheck(this, PickerColumnCmp);\n\n    registerInstance(this, hostRef);\n    this.ionPickerColChange = createEvent(this, \"ionPickerColChange\", 7);\n    this.optHeight = 0;\n    this.rotateFactor = 0;\n    this.scaleFactor = 1;\n    this.velocity = 0;\n    this.y = 0;\n    this.noAnimate = true; // `colDidChange` is a flag that gets set when the column is changed\n    // dynamically. When this flag is set, the column will refresh\n    // after the component re-renders to incorporate the new column data.\n    // This is necessary because `this.refresh` queries for the option elements,\n    // so it needs to wait for the latest elements to be available in the DOM.\n    // Ex: column is created with 3 options. User updates the column data\n    // to have 5 options. The column will still think it only has 3 options.\n\n    this.colDidChange = false;\n    this.col = undefined;\n  }\n\n  return _createClass(PickerColumnCmp, [{\n    key: \"colChanged\",\n    value: function colChanged() {\n      this.colDidChange = true;\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _this23 = this;\n\n        var pickerRotateFactor, pickerScaleFactor, mode;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              pickerRotateFactor = 0;\n              pickerScaleFactor = 0.81;\n              mode = getIonMode(this);\n\n              if (mode === 'ios') {\n                pickerRotateFactor = -0.46;\n                pickerScaleFactor = 1;\n              }\n\n              this.rotateFactor = pickerRotateFactor;\n              this.scaleFactor = pickerScaleFactor;\n              _context11.next = 8;\n              return import('./index-39782642.js');\n\n            case 8:\n              this.gesture = _context11.sent.createGesture({\n                el: this.el,\n                gestureName: 'picker-swipe',\n                gesturePriority: 100,\n                threshold: 0,\n                passive: false,\n                onStart: function onStart(ev) {\n                  return _this23.onStart(ev);\n                },\n                onMove: function onMove(ev) {\n                  return _this23.onMove(ev);\n                },\n                onEnd: function onEnd(ev) {\n                  return _this23.onEnd(ev);\n                }\n              });\n              this.gesture.enable(); // Options have not been initialized yet\n              // Animation must be disabled through the `noAnimate` flag\n              // Otherwise, the options will render\n              // at the top of the column and transition down\n\n              this.tmrId = setTimeout(function () {\n                _this23.noAnimate = false; // After initialization, `refresh()` will be called\n                // At this point, animation will be enabled. The options will\n                // animate as they are being selected.\n\n                _this23.refresh(true);\n              }, 250);\n\n            case 11:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      this.onDomChange();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // Options may have changed since last update.\n      if (this.colDidChange) {\n        // Animation must be disabled through the `onDomChange` parameter.\n        // Otherwise, the recently added options will render\n        // at the top of the column and transition down\n        this.onDomChange(true, false);\n        this.colDidChange = false;\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.rafId !== undefined) cancelAnimationFrame(this.rafId);\n      if (this.tmrId) clearTimeout(this.tmrId);\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n    }\n  }, {\n    key: \"emitColChange\",\n    value: function emitColChange() {\n      this.ionPickerColChange.emit(this.col);\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(selectedIndex, duration) {\n      // if there is a selected index, then figure out it's y position\n      // if there isn't a selected index, then just use the top y position\n      var y = selectedIndex > -1 ? -(selectedIndex * this.optHeight) : 0;\n      this.velocity = 0; // set what y position we're at\n\n      if (this.rafId !== undefined) cancelAnimationFrame(this.rafId);\n      this.update(y, duration, true);\n      this.emitColChange();\n    }\n  }, {\n    key: \"update\",\n    value: function update(y, duration, saveY) {\n      if (!this.optsEl) {\n        return;\n      } // ensure we've got a good round number :)\n\n\n      var translateY = 0;\n      var translateZ = 0;\n      var col = this.col,\n          rotateFactor = this.rotateFactor;\n      var prevSelected = col.selectedIndex;\n      var selectedIndex = col.selectedIndex = this.indexForY(-y);\n      var durationStr = duration === 0 ? '' : duration + 'ms';\n      var scaleStr = \"scale(\".concat(this.scaleFactor, \")\");\n      var children = this.optsEl.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var button = children[i];\n        var opt = col.options[i];\n        var optOffset = i * this.optHeight + y;\n        var transform = '';\n\n        if (rotateFactor !== 0) {\n          var rotateX = optOffset * rotateFactor;\n\n          if (Math.abs(rotateX) <= 90) {\n            translateY = 0;\n            translateZ = 90;\n            transform = \"rotateX(\".concat(rotateX, \"deg) \");\n          } else {\n            translateY = -9999;\n          }\n        } else {\n          translateZ = 0;\n          translateY = optOffset;\n        }\n\n        var selected = selectedIndex === i;\n        transform += \"translate3d(0px,\".concat(translateY, \"px,\").concat(translateZ, \"px) \");\n\n        if (this.scaleFactor !== 1 && !selected) {\n          transform += scaleStr;\n        } // Update transition duration\n\n\n        if (this.noAnimate) {\n          opt.duration = 0;\n          button.style.transitionDuration = '';\n        } else if (duration !== opt.duration) {\n          opt.duration = duration;\n          button.style.transitionDuration = durationStr;\n        } // Update transform\n\n\n        if (transform !== opt.transform) {\n          opt.transform = transform;\n        }\n\n        button.style.transform = transform;\n        /**\n         * Ensure that the select column\n         * item has the selected class\n         */\n\n        opt.selected = selected;\n\n        if (selected) {\n          button.classList.add(PICKER_OPT_SELECTED);\n        } else {\n          button.classList.remove(PICKER_OPT_SELECTED);\n        }\n      }\n\n      this.col.prevSelected = prevSelected;\n\n      if (saveY) {\n        this.y = y;\n      }\n\n      if (this.lastIndex !== selectedIndex) {\n        // have not set a last index yet\n        hapticSelectionChanged();\n        this.lastIndex = selectedIndex;\n      }\n    }\n  }, {\n    key: \"decelerate\",\n    value: function decelerate() {\n      var _this24 = this;\n\n      if (this.velocity !== 0) {\n        // still decelerating\n        this.velocity *= DECELERATION_FRICTION; // do not let it go slower than a velocity of 1\n\n        this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);\n        var y = this.y + this.velocity;\n\n        if (y > this.minY) {\n          // whoops, it's trying to scroll up farther than the options we have!\n          y = this.minY;\n          this.velocity = 0;\n        } else if (y < this.maxY) {\n          // gahh, it's trying to scroll down farther than we can!\n          y = this.maxY;\n          this.velocity = 0;\n        }\n\n        this.update(y, 0, true);\n        var notLockedIn = Math.round(y) % this.optHeight !== 0 || Math.abs(this.velocity) > 1;\n\n        if (notLockedIn) {\n          // isn't locked in yet, keep decelerating until it is\n          this.rafId = requestAnimationFrame(function () {\n            return _this24.decelerate();\n          });\n        } else {\n          this.velocity = 0;\n          this.emitColChange();\n          hapticSelectionEnd();\n        }\n      } else if (this.y % this.optHeight !== 0) {\n        // needs to still get locked into a position so options line up\n        var currentPos = Math.abs(this.y % this.optHeight); // create a velocity in the direction it needs to scroll\n\n        this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;\n        this.decelerate();\n      }\n    }\n  }, {\n    key: \"indexForY\",\n    value: function indexForY(y) {\n      return Math.min(Math.max(Math.abs(Math.round(y / this.optHeight)), 0), this.col.options.length - 1);\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(detail) {\n      // We have to prevent default in order to block scrolling under the picker\n      // but we DO NOT have to stop propagation, since we still want\n      // some \"click\" events to capture\n      if (detail.event.cancelable) {\n        detail.event.preventDefault();\n      }\n\n      detail.event.stopPropagation();\n      hapticSelectionStart(); // reset everything\n\n      if (this.rafId !== undefined) cancelAnimationFrame(this.rafId);\n      var options = this.col.options;\n      var minY = options.length - 1;\n      var maxY = 0;\n\n      for (var i = 0; i < options.length; i++) {\n        if (!options[i].disabled) {\n          minY = Math.min(minY, i);\n          maxY = Math.max(maxY, i);\n        }\n      }\n\n      this.minY = -(minY * this.optHeight);\n      this.maxY = -(maxY * this.optHeight);\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(detail) {\n      if (detail.event.cancelable) {\n        detail.event.preventDefault();\n      }\n\n      detail.event.stopPropagation(); // update the scroll position relative to pointer start position\n\n      var y = this.y + detail.deltaY;\n\n      if (y > this.minY) {\n        // scrolling up higher than scroll area\n        y = Math.pow(y, 0.8);\n        this.bounceFrom = y;\n      } else if (y < this.maxY) {\n        // scrolling down below scroll area\n        y += Math.pow(this.maxY - y, 0.9);\n        this.bounceFrom = y;\n      } else {\n        this.bounceFrom = 0;\n      }\n\n      this.update(y, 0, false);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(detail) {\n      if (this.bounceFrom > 0) {\n        // bounce back up\n        this.update(this.minY, 100, true);\n        this.emitColChange();\n        return;\n      } else if (this.bounceFrom < 0) {\n        // bounce back down\n        this.update(this.maxY, 100, true);\n        this.emitColChange();\n        return;\n      }\n\n      this.velocity = clamp(-MAX_PICKER_SPEED, detail.velocityY * 23, MAX_PICKER_SPEED);\n\n      if (this.velocity === 0 && detail.deltaY === 0) {\n        var opt = detail.event.target.closest('.picker-opt');\n\n        if (opt === null || opt === void 0 ? void 0 : opt.hasAttribute('opt-index')) {\n          this.setSelected(parseInt(opt.getAttribute('opt-index'), 10), TRANSITION_DURATION);\n        }\n      } else {\n        this.y += detail.deltaY;\n\n        if (Math.abs(detail.velocityY) < 0.05) {\n          var isScrollingUp = detail.deltaY > 0;\n          var optHeightFraction = Math.abs(this.y) % this.optHeight / this.optHeight;\n\n          if (isScrollingUp && optHeightFraction > 0.5) {\n            this.velocity = Math.abs(this.velocity) * -1;\n          } else if (!isScrollingUp && optHeightFraction <= 0.5) {\n            this.velocity = Math.abs(this.velocity);\n          }\n        }\n\n        this.decelerate();\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(forceRefresh, animated) {\n      var _a;\n\n      var min = this.col.options.length - 1;\n      var max = 0;\n      var options = this.col.options;\n\n      for (var i = 0; i < options.length; i++) {\n        if (!options[i].disabled) {\n          min = Math.min(min, i);\n          max = Math.max(max, i);\n        }\n      }\n      /**\n       * Only update selected value if column has a\n       * velocity of 0. If it does not, then the\n       * column is animating might land on\n       * a value different than the value at\n       * selectedIndex\n       */\n\n\n      if (this.velocity !== 0) {\n        return;\n      }\n\n      var selectedIndex = clamp(min, (_a = this.col.selectedIndex) !== null && _a !== void 0 ? _a : 0, max);\n\n      if (this.col.prevSelected !== selectedIndex || forceRefresh) {\n        var y = selectedIndex * this.optHeight * -1;\n        var duration = animated ? TRANSITION_DURATION : 0;\n        this.velocity = 0;\n        this.update(y, duration, true);\n      }\n    }\n  }, {\n    key: \"onDomChange\",\n    value: function onDomChange(forceRefresh, animated) {\n      var colEl = this.optsEl;\n\n      if (colEl) {\n        // DOM READ\n        // We perfom a DOM read over a rendered item, this needs to happen after the first render or after the the column has changed\n        this.optHeight = colEl.firstElementChild ? colEl.firstElementChild.clientHeight : 0;\n      }\n\n      this.refresh(forceRefresh, animated);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this25 = this;\n\n      var col = this.col;\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '56289a294e5c580f3e7fe5fc12777aa7f80ad19b',\n        class: Object.assign(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'picker-col', true), 'picker-opts-left', this.col.align === 'left'), 'picker-opts-right', this.col.align === 'right'), getClassMap(col.cssClass)),\n        style: {\n          'max-width': this.col.columnWidth\n        }\n      }, col.prefix && h(\"div\", {\n        key: 'd21f44667b5df567d6879723fe643ea7c2c60bef',\n        class: \"picker-prefix\",\n        style: {\n          width: col.prefixWidth\n        }\n      }, col.prefix), h(\"div\", {\n        key: 'bb427e5f24fd832703926e0e847ad05567597262',\n        class: \"picker-opts\",\n        style: {\n          maxWidth: col.optionsWidth\n        },\n        ref: function ref(el) {\n          return _this25.optsEl = el;\n        }\n      }, col.options.map(function (o, index) {\n        return h(\"button\", {\n          \"aria-label\": o.ariaLabel,\n          class: {\n            'picker-opt': true,\n            'picker-opt-disabled': !!o.disabled\n          },\n          \"opt-index\": index\n        }, o.text);\n      })), col.suffix && h(\"div\", {\n        key: '0413f7c074b6534b8967387ecb9957a79a267aff',\n        class: \"picker-suffix\",\n        style: {\n          width: col.suffixWidth\n        }\n      }, col.suffix));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"col\": [\"colChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar PICKER_OPT_SELECTED = 'picker-opt-selected';\nvar DECELERATION_FRICTION = 0.97;\nvar MAX_PICKER_SPEED = 90;\nvar TRANSITION_DURATION = 150;\nPickerColumnCmp.style = {\n  ios: IonPickerLegacyColumnIosStyle0,\n  md: IonPickerLegacyColumnMdStyle0\n};\nexport { Datetime as ion_datetime, Picker as ion_picker_legacy, PickerColumnCmp as ion_picker_legacy_column };","map":null,"metadata":{},"sourceType":"module"}