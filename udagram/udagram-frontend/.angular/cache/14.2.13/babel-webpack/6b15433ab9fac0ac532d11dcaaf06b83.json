{"ast":null,"code":"import _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nvar splitPaneIosCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:0.55px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));--side-min-width:270px;--side-max-width:28%}\";\nvar IonSplitPaneIosStyle0 = splitPaneIosCss;\nvar splitPaneMdCss = \":host{--side-width:100%;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;contain:strict}:host(.split-pane-visible) ::slotted(.split-pane-main){left:0;right:0;top:0;bottom:0;position:relative;-ms-flex:1;flex:1;-webkit-box-shadow:none;box-shadow:none;overflow:hidden;z-index:0}::slotted(.split-pane-side:not(ion-menu)){display:none}:host{--border:1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));--side-min-width:270px;--side-max-width:28%}\";\nvar IonSplitPaneMdStyle0 = splitPaneMdCss; // TODO(FW-2832): types\n\nvar SPLIT_PANE_MAIN = 'split-pane-main';\nvar SPLIT_PANE_SIDE = 'split-pane-side';\nvar QUERY = {\n  xs: '(min-width: 0px)',\n  sm: '(min-width: 576px)',\n  md: '(min-width: 768px)',\n  lg: '(min-width: 992px)',\n  xl: '(min-width: 1200px)',\n  never: ''\n};\n\nvar SplitPane = /*#__PURE__*/function () {\n  function SplitPane(hostRef) {\n    _classCallCheck(this, SplitPane);\n\n    registerInstance(this, hostRef);\n    this.ionSplitPaneVisible = createEvent(this, \"ionSplitPaneVisible\", 7);\n    this.visible = false;\n    this.contentId = undefined;\n    this.disabled = false;\n    this.when = QUERY['lg'];\n  }\n\n  return _createClass(SplitPane, [{\n    key: \"visibleChanged\",\n    value: function visibleChanged(visible) {\n      this.ionSplitPaneVisible.emit({\n        visible: visible\n      });\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function () {\n      var _isVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.resolve(this.visible));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n\n      function isVisible() {\n        return _isVisible.apply(this, arguments);\n      }\n\n      return isVisible;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof customElements !== 'undefined' && customElements != null)) {\n                _context2.next = 3;\n                break;\n              }\n\n              _context2.next = 3;\n              return customElements.whenDefined('ion-split-pane');\n\n            case 3:\n              this.styleMainElement();\n              this.updateState();\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      if (this.rmL) {\n        this.rmL();\n        this.rmL = undefined;\n      }\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState() {\n      var _this = this;\n\n      if (this.rmL) {\n        this.rmL();\n        this.rmL = undefined;\n      } // Check if the split-pane is disabled\n\n\n      if (this.disabled) {\n        this.visible = false;\n        return;\n      } // When query is a boolean\n\n\n      var query = this.when;\n\n      if (typeof query === 'boolean') {\n        this.visible = query;\n        return;\n      } // When query is a string, let's find first if it is a shortcut\n\n\n      var mediaQuery = QUERY[query] || query; // Media query is empty or null, we hide it\n\n      if (mediaQuery.length === 0) {\n        this.visible = false;\n        return;\n      } // Listen on media query\n\n\n      var callback = function callback(q) {\n        _this.visible = q.matches;\n      };\n\n      var mediaList = window.matchMedia(mediaQuery); // TODO FW-5869\n\n      mediaList.addListener(callback);\n\n      this.rmL = function () {\n        return mediaList.removeListener(callback);\n      };\n\n      this.visible = mediaList.matches;\n    }\n    /**\n     * Attempt to find the main content\n     * element inside of the split pane.\n     * If found, set it as the main node.\n     *\n     * We assume that the main node\n     * is available in the DOM on split\n     * pane load.\n     */\n\n  }, {\n    key: \"styleMainElement\",\n    value: function styleMainElement() {\n      var contentId = this.contentId;\n      var children = this.el.children;\n      var nu = this.el.childElementCount;\n      var foundMain = false;\n\n      for (var i = 0; i < nu; i++) {\n        var child = children[i];\n        var isMain = contentId !== undefined && child.id === contentId;\n\n        if (isMain) {\n          if (foundMain) {\n            console.warn('split pane cannot have more than one main node');\n            return;\n          } else {\n            setPaneClass(child, isMain);\n            foundMain = true;\n          }\n        }\n      }\n\n      if (!foundMain) {\n        console.warn('split pane does not have a specified main node');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: 'd54c356cd4bff7e55325160882dea8249f47f388',\n        class: _defineProperty(_defineProperty(_defineProperty({}, mode, true), \"split-pane-\".concat(mode), true), 'split-pane-visible', this.visible)\n      }, h(\"slot\", {\n        key: 'af62690d0fd686cfbd29d888c79eda9001f13e2f'\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"visible\": [\"visibleChanged\"],\n        \"disabled\": [\"updateState\"],\n        \"when\": [\"updateState\"]\n      };\n    }\n  }]);\n}();\n\nvar setPaneClass = function setPaneClass(el, isMain) {\n  var toAdd;\n  var toRemove;\n\n  if (isMain) {\n    toAdd = SPLIT_PANE_MAIN;\n    toRemove = SPLIT_PANE_SIDE;\n  } else {\n    toAdd = SPLIT_PANE_SIDE;\n    toRemove = SPLIT_PANE_MAIN;\n  }\n\n  var classList = el.classList;\n  classList.add(toAdd);\n  classList.remove(toRemove);\n};\n\nSplitPane.style = {\n  ios: IonSplitPaneIosStyle0,\n  md: IonSplitPaneMdStyle0\n};\nexport { SplitPane as ion_split_pane };","map":null,"metadata":{},"sourceType":"module"}