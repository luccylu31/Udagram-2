{"ast":null,"code":"import _toConsumableArray from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, f as Host, i as getElement, d as createEvent } from './index-7a952e7a.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-da915de8.js';\nimport { l as chevronDown } from './index-e2cf2ceb.js';\nimport { c as config, b as getIonMode } from './ionic-global-81a1064f.js';\nimport { p as printIonWarning } from './index-9b0d46f4.js';\nvar accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nvar IonAccordionIosStyle0 = accordionIosCss;\nvar accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nvar IonAccordionMdStyle0 = accordionMdCss;\n\nvar Accordion = /*#__PURE__*/function () {\n  function Accordion(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Accordion);\n\n    registerInstance(this, hostRef);\n\n    this.updateListener = function () {\n      return _this.updateState(false);\n    };\n\n    this.setItemDefaults = function () {\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n\n\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n\n    this.getSlottedHeaderIonItem = function () {\n      var headerEl = _this.headerEl;\n\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n\n\n      var slot = headerEl.querySelector('slot');\n\n      if (!slot) {\n        return;\n      } // This is not defined in unit tests\n\n\n      if (slot.assignedElements === undefined) return;\n      return slot.assignedElements().find(function (el) {\n        return el.tagName === 'ION-ITEM';\n      });\n    };\n\n    this.setAria = function () {\n      var expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n\n\n      var root = getElementRoot(ionItem);\n      var button = root.querySelector('button');\n\n      if (!button) {\n        return;\n      }\n\n      button.setAttribute('aria-expanded', \"\".concat(expanded));\n    };\n\n    this.slotToggleIcon = function () {\n      var ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n\n      var toggleIconSlot = _this.toggleIconSlot,\n          toggleIcon = _this.toggleIcon;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n\n      var existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n\n      if (existingToggleIcon) {\n        return;\n      }\n\n      var iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n\n    this.expandAccordion = function () {\n      var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var contentEl = _this.contentEl,\n          contentElWrapper = _this.contentElWrapper;\n\n      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {\n        _this.state = 4\n        /* AccordionState.Expanded */\n        ;\n        return;\n      }\n\n      if (_this.state === 4\n      /* AccordionState.Expanded */\n      ) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        raf(function () {\n          _this.state = 8\n          /* AccordionState.Expanding */\n          ;\n          _this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var contentHeight, waitForTransition;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  contentHeight = contentElWrapper.offsetHeight;\n                  waitForTransition = transitionEndAsync(contentEl, 2000);\n                  contentEl.style.setProperty('max-height', \"\".concat(contentHeight, \"px\"));\n                  _context.next = 5;\n                  return waitForTransition;\n\n                case 5:\n                  _this.state = 4\n                  /* AccordionState.Expanded */\n                  ;\n                  contentEl.style.removeProperty('max-height');\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          })));\n        });\n      } else {\n        _this.state = 4\n        /* AccordionState.Expanded */\n        ;\n      }\n    };\n\n    this.collapseAccordion = function () {\n      var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var contentEl = _this.contentEl;\n\n      if (initialUpdate || contentEl === undefined) {\n        _this.state = 1\n        /* AccordionState.Collapsed */\n        ;\n        return;\n      }\n\n      if (_this.state === 1\n      /* AccordionState.Collapsed */\n      ) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        _this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var contentHeight;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                contentHeight = contentEl.offsetHeight;\n                contentEl.style.setProperty('max-height', \"\".concat(contentHeight, \"px\"));\n                raf( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  var waitForTransition;\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) switch (_context2.prev = _context2.next) {\n                      case 0:\n                        waitForTransition = transitionEndAsync(contentEl, 2000);\n                        _this.state = 2\n                        /* AccordionState.Collapsing */\n                        ;\n                        _context2.next = 4;\n                        return waitForTransition;\n\n                      case 4:\n                        _this.state = 1\n                        /* AccordionState.Collapsed */\n                        ;\n                        contentEl.style.removeProperty('max-height');\n\n                      case 6:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }, _callee2);\n                })));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        })));\n      } else {\n        _this.state = 1\n        /* AccordionState.Collapsed */\n        ;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n\n\n    this.shouldAnimate = function () {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n\n      var prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      if (prefersReducedMotion) {\n        return false;\n      }\n\n      var animated = config.get('animated', true);\n\n      if (!animated) {\n        return false;\n      }\n\n      if (_this.accordionGroupEl && !_this.accordionGroupEl.animated) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateState = /*#__PURE__*/_asyncToGenerator(function () {\n      var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var accordionGroup, accordionValue, value, shouldExpand, nextAccordion, nextAccordionValue, previousAccordion, previousAccordionValue;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              accordionGroup = _this.accordionGroupEl;\n              accordionValue = _this.value;\n\n              if (accordionGroup) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 4:\n              value = accordionGroup.value;\n              shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n\n              if (shouldExpand) {\n                _this.expandAccordion(initialUpdate);\n\n                _this.isNext = _this.isPrevious = false;\n              } else {\n                _this.collapseAccordion(initialUpdate);\n                /**\n                 * When using popout or inset,\n                 * the collapsed accordion items\n                 * may need additional border radius\n                 * applied. Check to see if the\n                 * next or previous accordion is selected.\n                 */\n\n\n                nextAccordion = _this.getNextSibling();\n                nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n\n                if (nextAccordionValue !== undefined) {\n                  _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n                }\n\n                previousAccordion = _this.getPreviousSibling();\n                previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n\n                if (previousAccordionValue !== undefined) {\n                  _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n                }\n              }\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      })();\n    });\n\n    this.getNextSibling = function () {\n      if (!_this.el) {\n        return;\n      }\n\n      var nextSibling = _this.el.nextElementSibling;\n\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return nextSibling;\n    };\n\n    this.getPreviousSibling = function () {\n      if (!_this.el) {\n        return;\n      }\n\n      var previousSibling = _this.el.previousElementSibling;\n\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return previousSibling;\n    };\n\n    this.state = 1\n    /* AccordionState.Collapsed */\n    ;\n    this.isNext = false;\n    this.isPrevious = false;\n    this.value = \"ion-accordion-\".concat(accordionIds++);\n    this.disabled = false;\n    this.readonly = false;\n    this.toggleIcon = chevronDown;\n    this.toggleIconSlot = 'end';\n  }\n\n  return _createClass(Accordion, [{\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      this.updateState();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _a;\n\n      var accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n\n      if (accordionGroupEl) {\n        this.updateState(true);\n        addEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var accordionGroupEl = this.accordionGroupEl;\n\n      if (accordionGroupEl) {\n        removeEventListener(accordionGroupEl, 'ionValueChange', this.updateListener);\n      }\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      var _this2 = this;\n\n      this.setItemDefaults();\n      this.slotToggleIcon();\n      /**\n       * We need to wait a tick because we\n       * just set ionItem.button = true and\n       * the button has not have been rendered yet.\n       */\n\n      raf(function () {\n        /**\n         * Set aria label on button inside of ion-item\n         * once the inner content has been rendered.\n         */\n        var expanded = _this2.state === 4\n        /* AccordionState.Expanded */\n        || _this2.state === 8\n        /* AccordionState.Expanding */\n        ;\n\n        _this2.setAria(expanded);\n      });\n    }\n  }, {\n    key: \"toggleExpanded\",\n    value: function toggleExpanded() {\n      var accordionGroupEl = this.accordionGroupEl,\n          disabled = this.disabled,\n          readonly = this.readonly,\n          value = this.value,\n          state = this.state;\n      if (disabled || readonly) return;\n\n      if (accordionGroupEl) {\n        /**\n         * Because the accordion group may or may\n         * not allow multiple accordions open, we\n         * need to request the toggling of this\n         * accordion and the accordion group will\n         * make the decision on whether or not\n         * to allow it.\n         */\n        var expand = state === 1\n        /* AccordionState.Collapsed */\n        || state === 2\n        /* AccordionState.Collapsing */\n        ;\n        accordionGroupEl.requestAccordionToggle(value, expand);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var disabled = this.disabled,\n          readonly = this.readonly;\n      var mode = getIonMode(this);\n      var expanded = this.state === 4\n      /* AccordionState.Expanded */\n      || this.state === 8\n      /* AccordionState.Expanding */\n      ;\n      var headerPart = expanded ? 'header expanded' : 'header';\n      var contentPart = expanded ? 'content expanded' : 'content';\n      this.setAria(expanded);\n      return h(Host, {\n        key: '073e1d02c18dcbc20c68648426e87c14750c031d',\n        class: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'accordion-expanding', this.state === 8), 'accordion-expanded', this.state === 4), 'accordion-collapsing', this.state === 2), 'accordion-collapsed', this.state === 1), 'accordion-next', this.isNext), 'accordion-previous', this.isPrevious), 'accordion-disabled', disabled), 'accordion-readonly', readonly), 'accordion-animated', this.shouldAnimate())\n      }, h(\"div\", {\n        key: '9b4cf326de8bb6b4033992903c0c1bfd7eea9bcc',\n        onClick: function onClick() {\n          return _this3.toggleExpanded();\n        },\n        id: \"header\",\n        part: headerPart,\n        \"aria-controls\": \"content\",\n        ref: function ref(headerEl) {\n          return _this3.headerEl = headerEl;\n        }\n      }, h(\"slot\", {\n        key: '464c32a37f64655eacf4218284214f5f30b14a1e',\n        name: \"header\"\n      })), h(\"div\", {\n        key: '8bb52e6a62d7de0106b253201a89a32e79d9a594',\n        id: \"content\",\n        part: contentPart,\n        role: \"region\",\n        \"aria-labelledby\": \"header\",\n        ref: function ref(contentEl) {\n          return _this3.contentEl = contentEl;\n        }\n      }, h(\"div\", {\n        key: '1d9dfd952ad493754aaeea7a8f625b33c2dd90a0',\n        id: \"content-wrapper\",\n        ref: function ref(contentElWrapper) {\n          return _this3.contentElWrapper = contentElWrapper;\n        }\n      }, h(\"slot\", {\n        key: '970dfbc55a612d739d0ca3b7b1a08e5c96d0c479',\n        name: \"content\"\n      }))));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"delegatesFocus\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar accordionIds = 0;\nAccordion.style = {\n  ios: IonAccordionIosStyle0,\n  md: IonAccordionMdStyle0\n};\nvar accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nvar IonAccordionGroupIosStyle0 = accordionGroupIosCss;\nvar accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:16px;margin-bottom:16px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-end-end-radius:6px;border-end-start-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-start-start-radius:6px;border-start-end-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nvar IonAccordionGroupMdStyle0 = accordionGroupMdCss;\n\nvar AccordionGroup = /*#__PURE__*/function () {\n  function AccordionGroup(hostRef) {\n    _classCallCheck(this, AccordionGroup);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    this.animated = true;\n    this.multiple = undefined;\n    this.value = undefined;\n    this.disabled = false;\n    this.readonly = false;\n    this.expand = 'compact';\n  }\n\n  return _createClass(AccordionGroup, [{\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      var value = this.value,\n          multiple = this.multiple;\n\n      if (!multiple && Array.isArray(value)) {\n        /**\n         * We do some processing on the `value` array so\n         * that it looks more like an array when logged to\n         * the console.\n         * Example given ['a', 'b']\n         * Default toString() behavior: a,b\n         * Custom behavior: ['a', 'b']\n         */\n        printIonWarning(\"ion-accordion-group was passed an array of values, but multiple=\\\"false\\\". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the \\\"value\\\" property when multiple=\\\"false\\\".\\n\\n  Value Passed: [\".concat(value.map(function (v) {\n          return \"'\".concat(v, \"'\");\n        }).join(', '), \"]\\n\"), this.el);\n      }\n      /**\n       * Do not use `value` here as that will be\n       * not account for the adjustment we make above.\n       */\n\n\n      this.ionValueChange.emit({\n        value: this.value\n      });\n    }\n  }, {\n    key: \"disabledChanged\",\n    value: function () {\n      var _disabledChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var disabled, accordions, _iterator, _step, accordion;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              disabled = this.disabled;\n              _context5.next = 3;\n              return this.getAccordions();\n\n            case 3:\n              accordions = _context5.sent;\n              _iterator = _createForOfIteratorHelper(accordions);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  accordion = _step.value;\n                  accordion.disabled = disabled;\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n\n      function disabledChanged() {\n        return _disabledChanged.apply(this, arguments);\n      }\n\n      return disabledChanged;\n    }()\n  }, {\n    key: \"readonlyChanged\",\n    value: function () {\n      var _readonlyChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var readonly, accordions, _iterator2, _step2, accordion;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              readonly = this.readonly;\n              _context6.next = 3;\n              return this.getAccordions();\n\n            case 3:\n              accordions = _context6.sent;\n              _iterator2 = _createForOfIteratorHelper(accordions);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  accordion = _step2.value;\n                  accordion.readonly = readonly;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n\n      function readonlyChanged() {\n        return _readonlyChanged.apply(this, arguments);\n      }\n\n      return readonlyChanged;\n    }()\n  }, {\n    key: \"onKeydown\",\n    value: function () {\n      var _onKeydown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(ev) {\n        var activeElement, activeAccordionHeader, accordionEl, closestGroup, accordions, startingIndex, accordion;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              activeElement = document.activeElement;\n\n              if (activeElement) {\n                _context7.next = 3;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 3:\n              /**\n               * Make sure focus is in the header, not the body, of the accordion. This ensures\n               * that if there are any interactable elements in the body, their keyboard\n               * interaction doesn't get stolen by the accordion. Example: using up/down keys\n               * in ion-textarea.\n               */\n              activeAccordionHeader = activeElement.closest('ion-accordion [slot=\"header\"]');\n\n              if (activeAccordionHeader) {\n                _context7.next = 6;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 6:\n              accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n\n              if (accordionEl) {\n                _context7.next = 9;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 9:\n              closestGroup = accordionEl.closest('ion-accordion-group');\n\n              if (!(closestGroup !== this.el)) {\n                _context7.next = 12;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 12:\n              _context7.next = 14;\n              return this.getAccordions();\n\n            case 14:\n              accordions = _context7.sent;\n              startingIndex = accordions.findIndex(function (a) {\n                return a === accordionEl;\n              });\n\n              if (!(startingIndex === -1)) {\n                _context7.next = 18;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 18:\n              if (ev.key === 'ArrowDown') {\n                accordion = this.findNextAccordion(accordions, startingIndex);\n              } else if (ev.key === 'ArrowUp') {\n                accordion = this.findPreviousAccordion(accordions, startingIndex);\n              } else if (ev.key === 'Home') {\n                accordion = accordions[0];\n              } else if (ev.key === 'End') {\n                accordion = accordions[accordions.length - 1];\n              }\n\n              if (accordion !== undefined && accordion !== activeElement) {\n                accordion.focus();\n              }\n\n            case 20:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n\n      function onKeydown(_x) {\n        return _onKeydown.apply(this, arguments);\n      }\n\n      return onKeydown;\n    }()\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.disabled) {\n                this.disabledChanged();\n              }\n\n              if (this.readonly) {\n                this.readonlyChanged();\n              }\n              /**\n               * When binding values in frameworks such as Angular\n               * it is possible for the value to be set after the Web Component\n               * initializes but before the value watcher is set up in Stencil.\n               * As a result, the watcher callback may not be fired.\n               * We work around this by manually calling the watcher\n               * callback when the component has loaded and the watcher\n               * is configured.\n               */\n\n\n              this.valueChanged();\n\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n    /**\n     * Sets the value property and emits ionChange.\n     * This should only be called when the user interacts\n     * with the accordion and not for any update\n     * to the value property. The exception is when\n     * the app sets the value of a single-select\n     * accordion group to an array.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(accordionValue) {\n      var value = this.value = accordionValue;\n      this.ionChange.emit({\n        value: value\n      });\n    }\n    /**\n     * This method is used to ensure that the value\n     * of ion-accordion-group is being set in a valid\n     * way. This method should only be called in\n     * response to a user generated action.\n     * @internal\n     */\n\n  }, {\n    key: \"requestAccordionToggle\",\n    value: function () {\n      var _requestAccordionToggle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(accordionValue, accordionExpand) {\n        var multiple, value, readonly, disabled, groupValue, processedValue, valueExists, _groupValue, _processedValue;\n\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              multiple = this.multiple, value = this.value, readonly = this.readonly, disabled = this.disabled;\n\n              if (!(readonly || disabled)) {\n                _context9.next = 3;\n                break;\n              }\n\n              return _context9.abrupt(\"return\");\n\n            case 3:\n              if (accordionExpand) {\n                /**\n                 * If group accepts multiple values\n                 * check to see if value is already in\n                 * in values array. If not, add it\n                 * to the array.\n                 */\n                if (multiple) {\n                  groupValue = value !== null && value !== void 0 ? value : [];\n                  processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n                  valueExists = processedValue.find(function (v) {\n                    return v === accordionValue;\n                  });\n\n                  if (valueExists === undefined && accordionValue !== undefined) {\n                    this.setValue([].concat(_toConsumableArray(processedValue), [accordionValue]));\n                  }\n                } else {\n                  this.setValue(accordionValue);\n                }\n              } else {\n                /**\n                 * If collapsing accordion, either filter the value\n                 * out of the values array or unset the value.\n                 */\n                if (multiple) {\n                  _groupValue = value !== null && value !== void 0 ? value : [];\n                  _processedValue = Array.isArray(_groupValue) ? _groupValue : [_groupValue];\n                  this.setValue(_processedValue.filter(function (v) {\n                    return v !== accordionValue;\n                  }));\n                } else {\n                  this.setValue(undefined);\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n\n      function requestAccordionToggle(_x2, _x3) {\n        return _requestAccordionToggle.apply(this, arguments);\n      }\n\n      return requestAccordionToggle;\n    }()\n  }, {\n    key: \"findNextAccordion\",\n    value: function findNextAccordion(accordions, startingIndex) {\n      var nextAccordion = accordions[startingIndex + 1];\n\n      if (nextAccordion === undefined) {\n        return accordions[0];\n      }\n\n      return nextAccordion;\n    }\n  }, {\n    key: \"findPreviousAccordion\",\n    value: function findPreviousAccordion(accordions, startingIndex) {\n      var prevAccordion = accordions[startingIndex - 1];\n\n      if (prevAccordion === undefined) {\n        return accordions[accordions.length - 1];\n      }\n\n      return prevAccordion;\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"getAccordions\",\n    value: function () {\n      var _getAccordions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", Array.from(this.el.querySelectorAll(':scope > ion-accordion')));\n\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n\n      function getAccordions() {\n        return _getAccordions.apply(this, arguments);\n      }\n\n      return getAccordions;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var disabled = this.disabled,\n          readonly = this.readonly,\n          expand = this.expand;\n      var mode = getIonMode(this);\n      return h(Host, {\n        key: '82f3e77066fabb4736638ee4c487ad56efd39c63',\n        class: _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'accordion-group-disabled', disabled), 'accordion-group-readonly', readonly), \"accordion-group-expand-\".concat(expand), true),\n        role: \"presentation\"\n      }, h(\"slot\", {\n        key: 'a3c791ea887fc640b512f81d429be465ae902b3d'\n      }));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"readonly\": [\"readonlyChanged\"]\n      };\n    }\n  }]);\n}();\n\nAccordionGroup.style = {\n  ios: IonAccordionGroupIosStyle0,\n  md: IonAccordionGroupMdStyle0\n};\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };","map":null,"metadata":{},"sourceType":"module"}