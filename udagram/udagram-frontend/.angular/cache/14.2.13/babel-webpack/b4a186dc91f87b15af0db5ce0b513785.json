{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Udemy/Hosting AWS/Udagram/nd0067-c4-deployment-process-project-starter-online/udagram/udagram-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, d as createEvent, h, f as Host, i as getElement } from './index-7a952e7a.js';\nimport { a as addEventListener, b as removeEventListener, d as renderHiddenInput } from './helpers-da915de8.js';\nimport { i as isOptionSelected } from './compare-with-utils-a96ff2ea.js';\nimport { h as hostContext, c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-81a1064f.js';\nvar radioIosCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;max-width:100%;min-height:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host(.in-item){-ms-flex:1 1 0px;flex:1 1 0;width:100%;height:100%}:host([slot=start]),:host([slot=end]){-ms-flex:initial;flex:initial;width:auto}.radio-wrapper{display:-ms-flexbox;display:flex;position:relative;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;height:inherit;min-height:inherit;cursor:inherit}.label-text-wrapper{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host(.in-item) .label-text-wrapper{margin-top:10px;margin-bottom:10px}:host(.in-item.radio-label-placement-stacked) .label-text-wrapper{margin-top:10px;margin-bottom:16px}:host(.in-item.radio-label-placement-stacked) .native-wrapper{margin-bottom:10px}.label-text-wrapper-hidden{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host(.radio-justify-space-between) .radio-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.radio-justify-start) .radio-wrapper{-ms-flex-pack:start;justify-content:start}:host(.radio-justify-end) .radio-wrapper{-ms-flex-pack:end;justify-content:end}:host(.radio-alignment-start) .radio-wrapper{-ms-flex-align:start;align-items:start}:host(.radio-alignment-center) .radio-wrapper{-ms-flex-align:center;align-items:center}:host(.radio-label-placement-start) .radio-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.radio-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.radio-label-placement-end) .radio-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.radio-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0}:host(.radio-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.radio-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px}:host(.radio-label-placement-stacked) .radio-wrapper{-ms-flex-direction:column;flex-direction:column}:host(.radio-label-placement-stacked) .label-text-wrapper{-webkit-transform:scale(0.75);transform:scale(0.75);margin-left:0;margin-right:0;margin-bottom:16px;max-width:calc(100% / 0.75)}:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper,:host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}@supports selector(:dir(rtl)){:host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}}:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper{-webkit-transform-origin:center top;transform-origin:center top}:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper,:host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}@supports selector(:dir(rtl)){:host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}}:host{--color-checked:var(--ion-color-primary, #0054e9)}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{-webkit-margin-start:0;margin-inline-start:0}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:0.125rem;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:0.3}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #1a65eb);content:\\\"\\\";opacity:0.2}:host(.ion-focused) .radio-icon::after{inset-inline-start:-9px}.native-wrapper .radio-icon{width:0.9375rem;height:1.5rem}\";\nvar IonRadioIosStyle0 = radioIosCss;\nvar radioMdCss = \":host{--inner-border-radius:50%;display:inline-block;position:relative;max-width:100%;min-height:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2;-webkit-box-sizing:border-box;box-sizing:border-box}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;contain:layout size style}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host(:focus){outline:none}:host(.in-item){-ms-flex:1 1 0px;flex:1 1 0;width:100%;height:100%}:host([slot=start]),:host([slot=end]){-ms-flex:initial;flex:initial;width:auto}.radio-wrapper{display:-ms-flexbox;display:flex;position:relative;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;height:inherit;min-height:inherit;cursor:inherit}.label-text-wrapper{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host(.in-item) .label-text-wrapper{margin-top:10px;margin-bottom:10px}:host(.in-item.radio-label-placement-stacked) .label-text-wrapper{margin-top:10px;margin-bottom:16px}:host(.in-item.radio-label-placement-stacked) .native-wrapper{margin-bottom:10px}.label-text-wrapper-hidden{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host(.radio-justify-space-between) .radio-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.radio-justify-start) .radio-wrapper{-ms-flex-pack:start;justify-content:start}:host(.radio-justify-end) .radio-wrapper{-ms-flex-pack:end;justify-content:end}:host(.radio-alignment-start) .radio-wrapper{-ms-flex-align:start;align-items:start}:host(.radio-alignment-center) .radio-wrapper{-ms-flex-align:center;align-items:center}:host(.radio-label-placement-start) .radio-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.radio-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.radio-label-placement-end) .radio-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.radio-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0}:host(.radio-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px}:host(.radio-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px}:host(.radio-label-placement-stacked) .radio-wrapper{-ms-flex-direction:column;flex-direction:column}:host(.radio-label-placement-stacked) .label-text-wrapper{-webkit-transform:scale(0.75);transform:scale(0.75);margin-left:0;margin-right:0;margin-bottom:16px;max-width:calc(100% / 0.75)}:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper,:host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}@supports selector(:dir(rtl)){:host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}}:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper{-webkit-transform-origin:center top;transform-origin:center top}:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper,:host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}@supports selector(:dir(rtl)){:host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper{-webkit-transform-origin:calc(100% - center) top;transform-origin:calc(100% - center) top}}:host{--color:rgb(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #0054e9);--border-width:0.125rem;--border-style:solid;--border-radius:50%}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0, 0, 0);transform:scale3d(0, 0, 0);-webkit-transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1);transition:transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scale3d(1, 1, 1);transform:scale3d(1, 1, 1)}:host(.radio-disabled) .label-text-wrapper{opacity:0.38}:host(.radio-disabled) .native-wrapper{opacity:0.63}:host(.ion-focused) .radio-icon::after{border-radius:var(--inner-border-radius);display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint, #1a65eb);content:\\\"\\\";opacity:0.2}.native-wrapper .radio-icon{width:1.25rem;height:1.25rem}\";\nvar IonRadioMdStyle0 = radioMdCss;\n\nvar Radio = /*#__PURE__*/function () {\n  function Radio(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Radio);\n\n    registerInstance(this, hostRef);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.inputId = \"ion-rb-\".concat(radioButtonIds++);\n    this.radioGroup = null;\n\n    this.updateState = function () {\n      if (_this.radioGroup) {\n        var _this$radioGroup = _this.radioGroup,\n            compareWith = _this$radioGroup.compareWith,\n            radioGroupValue = _this$radioGroup.value;\n        _this.checked = isOptionSelected(radioGroupValue, _this.value, compareWith);\n      }\n    };\n\n    this.onClick = function () {\n      var radioGroup = _this.radioGroup,\n          checked = _this.checked,\n          disabled = _this.disabled;\n\n      if (disabled) {\n        return;\n      }\n      /**\n       * The modern control does not use a native input\n       * inside of the radio host, so we cannot rely on the\n       * ev.preventDefault() behavior above. If the radio\n       * is checked and the parent radio group allows for empty\n       * selection, then we can set the checked state to false.\n       * Otherwise, the checked state should always be set\n       * to true because the checked state cannot be toggled.\n       */\n\n\n      if (checked && (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.allowEmptySelection)) {\n        _this.checked = false;\n      } else {\n        _this.checked = true;\n      }\n    };\n\n    this.onFocus = function () {\n      _this.ionFocus.emit();\n    };\n\n    this.onBlur = function () {\n      _this.ionBlur.emit();\n    };\n\n    this.checked = false;\n    this.buttonTabindex = -1;\n    this.color = undefined;\n    this.name = this.inputId;\n    this.disabled = false;\n    this.value = undefined;\n    this.labelPlacement = 'start';\n    this.justify = 'space-between';\n    this.alignment = 'center';\n  }\n\n  return _createClass(Radio, [{\n    key: \"valueChanged\",\n    value: function valueChanged() {\n      /**\n       * The new value of the radio may\n       * match the radio group's value,\n       * so we see if it should be checked.\n       */\n      this.updateState();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      /**\n       * The value may be `undefined` if it\n       * gets set before the radio is\n       * rendered. This ensures that the radio\n       * is checked if the value matches. This\n       * happens most often when Angular is\n       * rendering the radio.\n       */\n      this.updateState();\n    }\n    /** @internal */\n\n  }, {\n    key: \"setFocus\",\n    value: function () {\n      var _setFocus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ev) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              ev.stopPropagation();\n              ev.preventDefault();\n              this.el.focus();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n\n      function setFocus(_x) {\n        return _setFocus.apply(this, arguments);\n      }\n\n      return setFocus;\n    }()\n    /** @internal */\n\n  }, {\n    key: \"setButtonTabindex\",\n    value: function () {\n      var _setButtonTabindex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this.buttonTabindex = value;\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n\n      function setButtonTabindex(_x2) {\n        return _setButtonTabindex.apply(this, arguments);\n      }\n\n      return setButtonTabindex;\n    }()\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      if (this.value === undefined) {\n        this.value = this.inputId;\n      }\n\n      var radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\n\n      if (radioGroup) {\n        this.updateState();\n        addEventListener(radioGroup, 'ionValueChange', this.updateState);\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var radioGroup = this.radioGroup;\n\n      if (radioGroup) {\n        removeEventListener(radioGroup, 'ionValueChange', this.updateState);\n        this.radioGroup = null;\n      }\n    }\n  }, {\n    key: \"hasLabel\",\n    get: function get() {\n      return this.el.textContent !== '';\n    }\n  }, {\n    key: \"renderRadioControl\",\n    value: function renderRadioControl() {\n      return h(\"div\", {\n        class: \"radio-icon\",\n        part: \"container\"\n      }, h(\"div\", {\n        class: \"radio-inner\",\n        part: \"mark\"\n      }), h(\"div\", {\n        class: \"radio-ripple\"\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var checked = this.checked,\n          disabled = this.disabled,\n          color = this.color,\n          el = this.el,\n          justify = this.justify,\n          labelPlacement = this.labelPlacement,\n          hasLabel = this.hasLabel,\n          buttonTabindex = this.buttonTabindex,\n          alignment = this.alignment;\n      var mode = getIonMode(this);\n      var inItem = hostContext('ion-item', el);\n      return h(Host, {\n        key: '43c95effb6acb119733270e8a5e02fe18b47ee4b',\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onClick: this.onClick,\n        class: createColorClasses(color, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, mode, true), 'in-item', inItem), 'radio-checked', checked), 'radio-disabled', disabled), \"radio-justify-\".concat(justify), true), \"radio-alignment-\".concat(alignment), true), \"radio-label-placement-\".concat(labelPlacement), true), 'ion-activatable', !inItem), 'ion-focusable', !inItem)),\n        role: \"radio\",\n        \"aria-checked\": checked ? 'true' : 'false',\n        \"aria-disabled\": disabled ? 'true' : null,\n        tabindex: buttonTabindex\n      }, h(\"label\", {\n        key: '168ea77c08fde9832077d617662b93dc9986b544',\n        class: \"radio-wrapper\"\n      }, h(\"div\", {\n        key: 'ce1e6eee63fbab1e5a66b18f767f4eecc2a227f1',\n        class: {\n          'label-text-wrapper': true,\n          'label-text-wrapper-hidden': !hasLabel\n        },\n        part: \"label\"\n      }, h(\"slot\", {\n        key: '7d849e43d4356b5c3978c2bba9a6fba5d21ca69d'\n      })), h(\"div\", {\n        key: 'e741f7822364958b050a232bdfccdc413095c244',\n        class: \"native-wrapper\"\n      }, this.renderRadioControl())));\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar radioButtonIds = 0;\nRadio.style = {\n  ios: IonRadioIosStyle0,\n  md: IonRadioMdStyle0\n};\n\nvar RadioGroup = /*#__PURE__*/function () {\n  function RadioGroup(hostRef) {\n    var _this2 = this;\n\n    _classCallCheck(this, RadioGroup);\n\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionValueChange = createEvent(this, \"ionValueChange\", 7);\n    this.inputId = \"ion-rg-\".concat(radioGroupIds++);\n    this.labelId = \"\".concat(this.inputId, \"-lbl\");\n\n    this.setRadioTabindex = function (value) {\n      var radios = _this2.getRadios(); // Get the first radio that is not disabled and the checked one\n\n\n      var first = radios.find(function (radio) {\n        return !radio.disabled;\n      });\n      var checked = radios.find(function (radio) {\n        return radio.value === value && !radio.disabled;\n      });\n\n      if (!first && !checked) {\n        return;\n      } // If an enabled checked radio exists, set it to be the focusable radio\n      // otherwise we default to focus the first radio\n\n\n      var focusable = checked || first;\n\n      var _iterator = _createForOfIteratorHelper(radios),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var radio = _step.value;\n          var tabindex = radio === focusable ? 0 : -1;\n          radio.setButtonTabindex(tabindex);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    this.onClick = function (ev) {\n      ev.preventDefault();\n      /**\n       * The Radio Group component mandates that only one radio button\n       * within the group can be selected at any given time. Since `ion-radio`\n       * is a shadow DOM component, it cannot natively perform this behavior\n       * using the `name` attribute.\n       */\n\n      var selectedRadio = ev.target && ev.target.closest('ion-radio');\n      /**\n       * Our current disabled prop definition causes Stencil to mark it\n       * as optional. While this is not desired, fixing this behavior\n       * in Stencil is a significant breaking change, so this effort is\n       * being de-risked in STENCIL-917. Until then, we compromise\n       * here by checking for falsy `disabled` values instead of strictly\n       * checking `disabled === false`.\n       */\n\n      if (selectedRadio && !selectedRadio.disabled) {\n        var currentValue = _this2.value;\n        var newValue = selectedRadio.value;\n\n        if (newValue !== currentValue) {\n          _this2.value = newValue;\n\n          _this2.emitValueChange(ev);\n        } else if (_this2.allowEmptySelection) {\n          _this2.value = undefined;\n\n          _this2.emitValueChange(ev);\n        }\n      }\n    };\n\n    this.allowEmptySelection = false;\n    this.compareWith = undefined;\n    this.name = this.inputId;\n    this.value = undefined;\n  }\n\n  return _createClass(RadioGroup, [{\n    key: \"valueChanged\",\n    value: function valueChanged(value) {\n      this.setRadioTabindex(value);\n      this.ionValueChange.emit({\n        value: value\n      });\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      /**\n       * There's an issue when assigning a value to the radio group\n       * within the Angular primary content (rendering within the\n       * app component template). When the template is isolated to a route,\n       * the value is assigned correctly.\n       * To address this issue, we need to ensure that the watcher is\n       * called after the component has finished loading,\n       * allowing the emit to be dispatched correctly.\n       */\n      this.valueChanged(this.value);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var header, label;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // Get the list header if it exists and set the id\n              // this is used to set aria-labelledby\n              header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n\n              if (header) {\n                label = this.label = header.querySelector('ion-label');\n\n                if (label) {\n                  this.labelId = label.id = this.name + '-lbl';\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n  }, {\n    key: \"getRadios\",\n    value: function getRadios() {\n      return Array.from(this.el.querySelectorAll('ion-radio'));\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n\n  }, {\n    key: \"emitValueChange\",\n    value: function emitValueChange(event) {\n      var value = this.value;\n      this.ionChange.emit({\n        value: value,\n        event: event\n      });\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(ev) {\n      var inSelectPopover = !!this.el.closest('ion-select-popover');\n\n      if (ev.target && !this.el.contains(ev.target)) {\n        return;\n      } // Get all radios inside of the radio group and then\n      // filter out disabled radios since we need to skip those\n\n\n      var radios = this.getRadios().filter(function (radio) {\n        return !radio.disabled;\n      }); // Only move the radio if the current focus is in the radio group\n\n      if (ev.target && radios.includes(ev.target)) {\n        var index = radios.findIndex(function (radio) {\n          return radio === ev.target;\n        });\n        var current = radios[index];\n        var next; // If hitting arrow down or arrow right, move to the next radio\n        // If we're on the last radio, move to the first radio\n\n        if (['ArrowDown', 'ArrowRight'].includes(ev.key)) {\n          next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n        } // If hitting arrow up or arrow left, move to the previous radio\n        // If we're on the first radio, move to the last radio\n\n\n        if (['ArrowUp', 'ArrowLeft'].includes(ev.key)) {\n          next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n        }\n\n        if (next && radios.includes(next)) {\n          next.setFocus(ev);\n\n          if (!inSelectPopover) {\n            this.value = next.value;\n            this.emitValueChange(ev);\n          }\n        } // Update the radio group value when a user presses the\n        // space bar on top of a selected radio\n\n\n        if ([' '].includes(ev.key)) {\n          var previousValue = this.value;\n          this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n\n          if (previousValue !== this.value || this.allowEmptySelection) {\n            /**\n             * Value change should only be emitted if the value is different,\n             * such as selecting a new radio with the space bar or if\n             * the radio group allows for empty selection and the user\n             * is deselecting a checked radio.\n             */\n            this.emitValueChange(ev);\n          } // Prevent browsers from jumping\n          // to the bottom of the screen\n\n\n          ev.preventDefault();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var label = this.label,\n          labelId = this.labelId,\n          el = this.el,\n          name = this.name,\n          value = this.value;\n      var mode = getIonMode(this);\n      renderHiddenInput(true, el, name, value, false);\n      return h(Host, {\n        key: '7a8ad7eb6a05c6f96a348dcf30fd0c610a95688c',\n        role: \"radiogroup\",\n        \"aria-labelledby\": label ? labelId : null,\n        onClick: this.onClick,\n        class: mode\n      });\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return getElement(this);\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"value\": [\"valueChanged\"]\n      };\n    }\n  }]);\n}();\n\nvar radioGroupIds = 0;\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };","map":null,"metadata":{},"sourceType":"module"}